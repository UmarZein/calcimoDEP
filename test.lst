   1              		.file	"test.cpp"
   2              	# GNU C++14 (Ubuntu 9.4.0-1ubuntu1~20.04.1) version 9.4.0 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 9.4.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl ve
   4              	
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed:  -imultiarch x86_64-linux-gnu -D_GNU_SOURCE test.cpp
   7              	# -mtune=generic -march=x86-64 -g -O0 -fverbose-asm
   8              	# -fasynchronous-unwind-tables -fstack-protector-strong -Wformat
   9              	# -Wformat-security -fstack-clash-protection -fcf-protection
  10              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  11              	# -fassume-phsa -fasynchronous-unwind-tables -fauto-inc-dec -fcommon
  12              	# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  13              	# -feliminate-unused-debug-types -fexceptions -ffp-int-builtin-inexact
  14              	# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  15              	# -finline-atomics -fipa-stack-alignment -fira-hoist-pressure
  16              	# -fira-share-save-slots -fira-share-spill-slots -fivopts
  17              	# -fkeep-static-consts -fleading-underscore -flifetime-dse
  18              	# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
  19              	# -fplt -fprefetch-loop-arrays -freg-struct-return
  20              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  21              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  22              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  23              	# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
  24              	# -fshow-column -fshrink-wrap-separate -fsigned-zeros
  25              	# -fsplit-ivs-in-unroller -fssa-backprop -fstack-clash-protection
  26              	# -fstack-protector-strong -fstdarg-opt -fstrict-volatile-bitfields
  27              	# -fsync-libcalls -ftrapping-math -ftree-cselim -ftree-forwprop
  28              	# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  29              	# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  30              	# -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -funwind-tables
  31              	# -fverbose-asm -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387
  32              	# -malign-stringops -mavx256-split-unaligned-load
  33              	# -mavx256-split-unaligned-store -mfancy-math-387 -mfp-ret-in-387 -mfxsr
  34              	# -mglibc -mieee-fp -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone
  35              	# -msse -msse2 -mstv -mtls-direct-seg-refs -mvzeroupper
  36              	
  37              		.text
  38              	.Ltext0:
  39              		.section	.text._ZNKSt9type_infoeqERKS_,"axG",@progbits,_ZNKSt9type_infoeqERKS_,comdat
  40              		.align 2
  41              		.weak	_ZNKSt9type_infoeqERKS_
  43              	_ZNKSt9type_infoeqERKS_:
  44              	.LFB20:
  45              		.file 1 "/usr/include/c++/9/typeinfo"
   1:/usr/include/c++/9/typeinfo **** // RTTI support for -*- C++ -*-
   2:/usr/include/c++/9/typeinfo **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   3:/usr/include/c++/9/typeinfo **** //
   4:/usr/include/c++/9/typeinfo **** // This file is part of GCC.
   5:/usr/include/c++/9/typeinfo **** //
   6:/usr/include/c++/9/typeinfo **** // GCC is free software; you can redistribute it and/or modify
   7:/usr/include/c++/9/typeinfo **** // it under the terms of the GNU General Public License as published by
   8:/usr/include/c++/9/typeinfo **** // the Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/typeinfo **** // any later version.
  10:/usr/include/c++/9/typeinfo **** //
  11:/usr/include/c++/9/typeinfo **** // GCC is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/typeinfo **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/typeinfo **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/typeinfo **** // GNU General Public License for more details.
  15:/usr/include/c++/9/typeinfo **** //
  16:/usr/include/c++/9/typeinfo **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/typeinfo **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/typeinfo **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/typeinfo **** 
  20:/usr/include/c++/9/typeinfo **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/typeinfo **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/typeinfo **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/typeinfo **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/typeinfo **** 
  25:/usr/include/c++/9/typeinfo **** /** @file typeinfo
  26:/usr/include/c++/9/typeinfo ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/typeinfo ****  */
  28:/usr/include/c++/9/typeinfo **** 
  29:/usr/include/c++/9/typeinfo **** #ifndef _TYPEINFO
  30:/usr/include/c++/9/typeinfo **** #define _TYPEINFO
  31:/usr/include/c++/9/typeinfo **** 
  32:/usr/include/c++/9/typeinfo **** #pragma GCC system_header
  33:/usr/include/c++/9/typeinfo **** 
  34:/usr/include/c++/9/typeinfo **** #include <bits/exception.h>
  35:/usr/include/c++/9/typeinfo **** #if __cplusplus >= 201103L
  36:/usr/include/c++/9/typeinfo **** #include <bits/hash_bytes.h>
  37:/usr/include/c++/9/typeinfo **** #endif
  38:/usr/include/c++/9/typeinfo **** 
  39:/usr/include/c++/9/typeinfo **** #pragma GCC visibility push(default)
  40:/usr/include/c++/9/typeinfo **** 
  41:/usr/include/c++/9/typeinfo **** extern "C++" {
  42:/usr/include/c++/9/typeinfo **** 
  43:/usr/include/c++/9/typeinfo **** namespace __cxxabiv1
  44:/usr/include/c++/9/typeinfo **** {
  45:/usr/include/c++/9/typeinfo ****   class __class_type_info;
  46:/usr/include/c++/9/typeinfo **** } // namespace __cxxabiv1
  47:/usr/include/c++/9/typeinfo **** 
  48:/usr/include/c++/9/typeinfo **** // Determine whether typeinfo names for the same type are merged (in which
  49:/usr/include/c++/9/typeinfo **** // case comparison can just compare pointers) or not (in which case strings
  50:/usr/include/c++/9/typeinfo **** // must be compared), and whether comparison is to be implemented inline or
  51:/usr/include/c++/9/typeinfo **** // not.  We used to do inline pointer comparison by default if weak symbols
  52:/usr/include/c++/9/typeinfo **** // are available, but even with weak symbols sometimes names are not merged
  53:/usr/include/c++/9/typeinfo **** // when objects are loaded with RTLD_LOCAL, so now we always use strcmp by
  54:/usr/include/c++/9/typeinfo **** // default.  For ABI compatibility, we do the strcmp inline if weak symbols
  55:/usr/include/c++/9/typeinfo **** // are available, and out-of-line if not.  Out-of-line pointer comparison
  56:/usr/include/c++/9/typeinfo **** // is used where the object files are to be portable to multiple systems,
  57:/usr/include/c++/9/typeinfo **** // some of which may not be able to use pointer comparison, but the
  58:/usr/include/c++/9/typeinfo **** // particular system for which libstdc++ is being built can use pointer
  59:/usr/include/c++/9/typeinfo **** // comparison; in particular for most ARM EABI systems, where the ABI
  60:/usr/include/c++/9/typeinfo **** // specifies out-of-line comparison.  The compiler's target configuration
  61:/usr/include/c++/9/typeinfo **** // can override the defaults by defining __GXX_TYPEINFO_EQUALITY_INLINE to
  62:/usr/include/c++/9/typeinfo **** // 1 or 0 to indicate whether or not comparison is inline, and
  63:/usr/include/c++/9/typeinfo **** // __GXX_MERGED_TYPEINFO_NAMES to 1 or 0 to indicate whether or not pointer
  64:/usr/include/c++/9/typeinfo **** // comparison can be used.
  65:/usr/include/c++/9/typeinfo **** 
  66:/usr/include/c++/9/typeinfo **** #ifndef __GXX_MERGED_TYPEINFO_NAMES
  67:/usr/include/c++/9/typeinfo **** // By default, typeinfo names are not merged.
  68:/usr/include/c++/9/typeinfo **** #define __GXX_MERGED_TYPEINFO_NAMES 0
  69:/usr/include/c++/9/typeinfo **** #endif
  70:/usr/include/c++/9/typeinfo **** 
  71:/usr/include/c++/9/typeinfo **** // By default follow the old inline rules to avoid ABI changes.
  72:/usr/include/c++/9/typeinfo **** #ifndef __GXX_TYPEINFO_EQUALITY_INLINE
  73:/usr/include/c++/9/typeinfo ****   #if !__GXX_WEAK__
  74:/usr/include/c++/9/typeinfo ****     #define __GXX_TYPEINFO_EQUALITY_INLINE 0
  75:/usr/include/c++/9/typeinfo ****   #else
  76:/usr/include/c++/9/typeinfo ****     #define __GXX_TYPEINFO_EQUALITY_INLINE 1
  77:/usr/include/c++/9/typeinfo ****   #endif
  78:/usr/include/c++/9/typeinfo **** #endif
  79:/usr/include/c++/9/typeinfo **** 
  80:/usr/include/c++/9/typeinfo **** namespace std
  81:/usr/include/c++/9/typeinfo **** {
  82:/usr/include/c++/9/typeinfo ****   /**
  83:/usr/include/c++/9/typeinfo ****    *  @brief  Part of RTTI.
  84:/usr/include/c++/9/typeinfo ****    *
  85:/usr/include/c++/9/typeinfo ****    *  The @c type_info class describes type information generated by
  86:/usr/include/c++/9/typeinfo ****    *  an implementation.
  87:/usr/include/c++/9/typeinfo ****   */
  88:/usr/include/c++/9/typeinfo ****   class type_info
  89:/usr/include/c++/9/typeinfo ****   {
  90:/usr/include/c++/9/typeinfo ****   public:
  91:/usr/include/c++/9/typeinfo ****     /** Destructor first. Being the first non-inline virtual function, this
  92:/usr/include/c++/9/typeinfo ****      *  controls in which translation unit the vtable is emitted. The
  93:/usr/include/c++/9/typeinfo ****      *  compiler makes use of that information to know where to emit
  94:/usr/include/c++/9/typeinfo ****      *  the runtime-mandated type_info structures in the new-abi.  */
  95:/usr/include/c++/9/typeinfo ****     virtual ~type_info();
  96:/usr/include/c++/9/typeinfo **** 
  97:/usr/include/c++/9/typeinfo ****     /** Returns an @e implementation-defined byte string; this is not
  98:/usr/include/c++/9/typeinfo ****      *  portable between compilers!  */
  99:/usr/include/c++/9/typeinfo ****     const char* name() const _GLIBCXX_NOEXCEPT
 100:/usr/include/c++/9/typeinfo ****     { return __name[0] == '*' ? __name + 1 : __name; }
 101:/usr/include/c++/9/typeinfo **** 
 102:/usr/include/c++/9/typeinfo **** #if !__GXX_TYPEINFO_EQUALITY_INLINE
 103:/usr/include/c++/9/typeinfo ****     // In old abi, or when weak symbols are not supported, there can
 104:/usr/include/c++/9/typeinfo ****     // be multiple instances of a type_info object for one
 105:/usr/include/c++/9/typeinfo ****     // type. Uniqueness must use the _name value, not object address.
 106:/usr/include/c++/9/typeinfo ****     bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
 107:/usr/include/c++/9/typeinfo ****     bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT;
 108:/usr/include/c++/9/typeinfo **** #else
 109:/usr/include/c++/9/typeinfo ****   #if !__GXX_MERGED_TYPEINFO_NAMES
 110:/usr/include/c++/9/typeinfo ****     /** Returns true if @c *this precedes @c __arg in the implementation's
 111:/usr/include/c++/9/typeinfo ****      *  collation order.  */
 112:/usr/include/c++/9/typeinfo ****     // Even with the new abi, on systems that support dlopen
 113:/usr/include/c++/9/typeinfo ****     // we can run into cases where type_info names aren't merged,
 114:/usr/include/c++/9/typeinfo ****     // so we still need to do string comparison.
 115:/usr/include/c++/9/typeinfo ****     bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT
 116:/usr/include/c++/9/typeinfo ****     { return (__name[0] == '*' && __arg.__name[0] == '*')
 117:/usr/include/c++/9/typeinfo **** 	? __name < __arg.__name
 118:/usr/include/c++/9/typeinfo **** 	: __builtin_strcmp (__name, __arg.__name) < 0; }
 119:/usr/include/c++/9/typeinfo **** 
 120:/usr/include/c++/9/typeinfo ****     bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
  46              		.loc 1 120 10
  47              		.cfi_startproc
  48 0000 F30F1EFA 		endbr64	
  49 0004 55       		pushq	%rbp	#
  50              		.cfi_def_cfa_offset 16
  51              		.cfi_offset 6, -16
  52 0005 4889E5   		movq	%rsp, %rbp	#,
  53              		.cfi_def_cfa_register 6
  54 0008 4883EC10 		subq	$16, %rsp	#,
  55 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
  56 0010 488975F0 		movq	%rsi, -16(%rbp)	# __arg, __arg
  57              	# /usr/include/c++/9/typeinfo:122:       return ((__name == __arg.__name)
 121:/usr/include/c++/9/typeinfo ****     {
 122:/usr/include/c++/9/typeinfo ****       return ((__name == __arg.__name)
  58              		.loc 1 122 16
  59 0014 488B45F8 		movq	-8(%rbp), %rax	# this, tmp91
  60 0018 488B5008 		movq	8(%rax), %rdx	# this_10(D)->__name, _1
  61              	# /usr/include/c++/9/typeinfo:122:       return ((__name == __arg.__name)
  62              		.loc 1 122 32
  63 001c 488B45F0 		movq	-16(%rbp), %rax	# __arg, tmp92
  64 0020 488B4008 		movq	8(%rax), %rax	# __arg_11(D)->__name, _2
  65              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
 123:/usr/include/c++/9/typeinfo **** 	      || (__name[0] != '*' &&
  66              		.loc 1 123 8
  67 0024 4839C2   		cmpq	%rax, %rdx	# _2, _1
  68 0027 742E     		je	.L2	#,
  69              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
  70              		.loc 1 123 12 discriminator 2
  71 0029 488B45F8 		movq	-8(%rbp), %rax	# this, tmp93
  72 002d 488B4008 		movq	8(%rax), %rax	# this_10(D)->__name, _3
  73              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
  74              		.loc 1 123 20 discriminator 2
  75 0031 0FB600   		movzbl	(%rax), %eax	# *_3, _4
  76              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
  77              		.loc 1 123 8 discriminator 2
  78 0034 3C2A     		cmpb	$42, %al	#, _4
  79 0036 7426     		je	.L3	#,
  80              	# /usr/include/c++/9/typeinfo:124: 		  __builtin_strcmp (__name, __arg.__name) == 0));
 124:/usr/include/c++/9/typeinfo **** 		  __builtin_strcmp (__name, __arg.__name) == 0));
  81              		.loc 1 124 37 discriminator 3
  82 0038 488B45F0 		movq	-16(%rbp), %rax	# __arg, tmp94
  83 003c 488B5008 		movq	8(%rax), %rdx	# __arg_11(D)->__name, _5
  84              	# /usr/include/c++/9/typeinfo:124: 		  __builtin_strcmp (__name, __arg.__name) == 0));
  85              		.loc 1 124 23 discriminator 3
  86 0040 488B45F8 		movq	-8(%rbp), %rax	# this, tmp95
  87 0044 488B4008 		movq	8(%rax), %rax	# this_10(D)->__name, _6
  88              	# /usr/include/c++/9/typeinfo:124: 		  __builtin_strcmp (__name, __arg.__name) == 0));
  89              		.loc 1 124 22 discriminator 3
  90 0048 4889D6   		movq	%rdx, %rsi	# _5,
  91 004b 4889C7   		movq	%rax, %rdi	# _6,
  92 004e E8000000 		call	strcmp@PLT	#
  92      00
  93              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
 123:/usr/include/c++/9/typeinfo **** 	      || (__name[0] != '*' &&
  94              		.loc 1 123 29 discriminator 3
  95 0053 85C0     		testl	%eax, %eax	# _7
  96 0055 7507     		jne	.L3	#,
  97              	.L2:
  98              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
 123:/usr/include/c++/9/typeinfo **** 	      || (__name[0] != '*' &&
  99              		.loc 1 123 8 discriminator 5
 100 0057 B8010000 		movl	$1, %eax	#, iftmp.3_8
 100      00
 101 005c EB05     		jmp	.L4	#
 102              	.L3:
 103              	# /usr/include/c++/9/typeinfo:123: 	      || (__name[0] != '*' &&
 123:/usr/include/c++/9/typeinfo **** 	      || (__name[0] != '*' &&
 104              		.loc 1 123 8 is_stmt 0 discriminator 6
 105 005e B8000000 		movl	$0, %eax	#, iftmp.3_8
 105      00
 106              	.L4:
 107              	# /usr/include/c++/9/typeinfo:125:     }
 125:/usr/include/c++/9/typeinfo ****     }
 108              		.loc 1 125 5 is_stmt 1
 109 0063 C9       		leave	
 110              		.cfi_def_cfa 7, 8
 111 0064 C3       		ret	
 112              		.cfi_endproc
 113              	.LFE20:
 115              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
 116              		.weak	_ZnwmPv
 118              	_ZnwmPv:
 119              	.LFB38:
 120              		.file 2 "/usr/include/c++/9/new"
   1:/usr/include/c++/9/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/9/new **** 
   3:/usr/include/c++/9/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/new **** 
   5:/usr/include/c++/9/new **** // This file is part of GCC.
   6:/usr/include/c++/9/new **** //
   7:/usr/include/c++/9/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/9/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/9/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/9/new **** // any later version.
  11:/usr/include/c++/9/new **** // 
  12:/usr/include/c++/9/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/9/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/9/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/9/new **** // GNU General Public License for more details.
  16:/usr/include/c++/9/new **** // 
  17:/usr/include/c++/9/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/9/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/9/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/9/new **** 
  21:/usr/include/c++/9/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/9/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/9/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/9/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/9/new **** 
  26:/usr/include/c++/9/new **** /** @file new
  27:/usr/include/c++/9/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/9/new ****  *
  29:/usr/include/c++/9/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/9/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/9/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/9/new ****  */
  33:/usr/include/c++/9/new **** 
  34:/usr/include/c++/9/new **** #ifndef _NEW
  35:/usr/include/c++/9/new **** #define _NEW
  36:/usr/include/c++/9/new **** 
  37:/usr/include/c++/9/new **** #pragma GCC system_header
  38:/usr/include/c++/9/new **** 
  39:/usr/include/c++/9/new **** #include <bits/c++config.h>
  40:/usr/include/c++/9/new **** #include <exception>
  41:/usr/include/c++/9/new **** 
  42:/usr/include/c++/9/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/9/new **** 
  44:/usr/include/c++/9/new **** extern "C++" {
  45:/usr/include/c++/9/new **** 
  46:/usr/include/c++/9/new **** namespace std 
  47:/usr/include/c++/9/new **** {
  48:/usr/include/c++/9/new ****   /**
  49:/usr/include/c++/9/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/9/new ****    *  @ingroup exceptions
  51:/usr/include/c++/9/new ****    *
  52:/usr/include/c++/9/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/9/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/9/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/9/new ****   {
  56:/usr/include/c++/9/new ****   public:
  57:/usr/include/c++/9/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/9/new **** 
  59:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  60:/usr/include/c++/9/new ****     bad_alloc(const bad_alloc&) = default;
  61:/usr/include/c++/9/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/usr/include/c++/9/new **** #endif
  63:/usr/include/c++/9/new **** 
  64:/usr/include/c++/9/new ****     // This declaration is not useless:
  65:/usr/include/c++/9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  66:/usr/include/c++/9/new ****     virtual ~bad_alloc() throw();
  67:/usr/include/c++/9/new **** 
  68:/usr/include/c++/9/new ****     // See comment in eh_exception.cc.
  69:/usr/include/c++/9/new ****     virtual const char* what() const throw();
  70:/usr/include/c++/9/new ****   };
  71:/usr/include/c++/9/new **** 
  72:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  73:/usr/include/c++/9/new ****   class bad_array_new_length : public bad_alloc
  74:/usr/include/c++/9/new ****   {
  75:/usr/include/c++/9/new ****   public:
  76:/usr/include/c++/9/new ****     bad_array_new_length() throw() { }
  77:/usr/include/c++/9/new **** 
  78:/usr/include/c++/9/new ****     // This declaration is not useless:
  79:/usr/include/c++/9/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/usr/include/c++/9/new ****     virtual ~bad_array_new_length() throw();
  81:/usr/include/c++/9/new **** 
  82:/usr/include/c++/9/new ****     // See comment in eh_exception.cc.
  83:/usr/include/c++/9/new ****     virtual const char* what() const throw();
  84:/usr/include/c++/9/new ****   };
  85:/usr/include/c++/9/new **** #endif
  86:/usr/include/c++/9/new **** 
  87:/usr/include/c++/9/new **** #if __cpp_aligned_new
  88:/usr/include/c++/9/new ****   enum class align_val_t: size_t {};
  89:/usr/include/c++/9/new **** #endif
  90:/usr/include/c++/9/new **** 
  91:/usr/include/c++/9/new ****   struct nothrow_t
  92:/usr/include/c++/9/new ****   {
  93:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
  94:/usr/include/c++/9/new ****     explicit nothrow_t() = default;
  95:/usr/include/c++/9/new **** #endif
  96:/usr/include/c++/9/new ****   };
  97:/usr/include/c++/9/new **** 
  98:/usr/include/c++/9/new ****   extern const nothrow_t nothrow;
  99:/usr/include/c++/9/new **** 
 100:/usr/include/c++/9/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/usr/include/c++/9/new ****    *  be of this type.  */
 102:/usr/include/c++/9/new ****   typedef void (*new_handler)();
 103:/usr/include/c++/9/new **** 
 104:/usr/include/c++/9/new ****   /// Takes a replacement handler as the argument, returns the
 105:/usr/include/c++/9/new ****   /// previous handler.
 106:/usr/include/c++/9/new ****   new_handler set_new_handler(new_handler) throw();
 107:/usr/include/c++/9/new **** 
 108:/usr/include/c++/9/new **** #if __cplusplus >= 201103L
 109:/usr/include/c++/9/new ****   /// Return the current new handler.
 110:/usr/include/c++/9/new ****   new_handler get_new_handler() noexcept;
 111:/usr/include/c++/9/new **** #endif
 112:/usr/include/c++/9/new **** } // namespace std
 113:/usr/include/c++/9/new **** 
 114:/usr/include/c++/9/new **** //@{
 115:/usr/include/c++/9/new **** /** These are replaceable signatures:
 116:/usr/include/c++/9/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/usr/include/c++/9/new ****  *  - normal array new and delete (same)
 118:/usr/include/c++/9/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/usr/include/c++/9/new ****  *    @c NULL on error)
 120:/usr/include/c++/9/new ****  *  - @c nothrow array new and delete (same)
 121:/usr/include/c++/9/new ****  *
 122:/usr/include/c++/9/new ****  *  Placement new and delete signatures (take a memory address argument,
 123:/usr/include/c++/9/new ****  *  does nothing) may not be replaced by a user's program.
 124:/usr/include/c++/9/new **** */
 125:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 127:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 129:/usr/include/c++/9/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 131:/usr/include/c++/9/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 133:/usr/include/c++/9/new **** #if __cpp_sized_deallocation
 134:/usr/include/c++/9/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 136:/usr/include/c++/9/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 138:/usr/include/c++/9/new **** #endif
 139:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/usr/include/c++/9/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/usr/include/c++/9/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/usr/include/c++/9/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 145:/usr/include/c++/9/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 147:/usr/include/c++/9/new **** #if __cpp_aligned_new
 148:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 150:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 151:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/usr/include/c++/9/new **** void operator delete(void*, std::align_val_t)
 153:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/usr/include/c++/9/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 155:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/usr/include/c++/9/new ****   __attribute__((__externally_visible__));
 158:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/usr/include/c++/9/new **** void operator delete[](void*, std::align_val_t)
 161:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/usr/include/c++/9/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/usr/include/c++/9/new **** #if __cpp_sized_deallocation
 165:/usr/include/c++/9/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/usr/include/c++/9/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/usr/include/c++/9/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/usr/include/c++/9/new **** #endif // __cpp_sized_deallocation
 170:/usr/include/c++/9/new **** #endif // __cpp_aligned_new
 171:/usr/include/c++/9/new **** 
 172:/usr/include/c++/9/new **** // Default placement versions of operator new.
 173:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/usr/include/c++/9/new **** { return __p; }
 121              		.loc 2 174 1
 122              		.cfi_startproc
 123 0000 F30F1EFA 		endbr64	
 124 0004 55       		pushq	%rbp	#
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 6, -16
 127 0005 4889E5   		movq	%rsp, %rbp	#,
 128              		.cfi_def_cfa_register 6
 129 0008 48897DF8 		movq	%rdi, -8(%rbp)	# D.3452, D.3452
 130 000c 488975F0 		movq	%rsi, -16(%rbp)	# __p, __p
 131              	# /usr/include/c++/9/new:174: { return __p; }
 132              		.loc 2 174 10
 133 0010 488B45F0 		movq	-16(%rbp), %rax	# __p, _2
 134              	# /usr/include/c++/9/new:174: { return __p; }
 135              		.loc 2 174 15
 136 0014 5D       		popq	%rbp	#
 137              		.cfi_def_cfa 7, 8
 138 0015 C3       		ret	
 139              		.cfi_endproc
 140              	.LFE38:
 142              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
 143              		.weak	_ZdlPvS_
 145              	_ZdlPvS_:
 146              	.LFB40:
 175:/usr/include/c++/9/new **** _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 176:/usr/include/c++/9/new **** { return __p; }
 177:/usr/include/c++/9/new **** 
 178:/usr/include/c++/9/new **** // Default placement versions of operator delete.
 179:/usr/include/c++/9/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 147              		.loc 2 179 67
 148              		.cfi_startproc
 149 0000 F30F1EFA 		endbr64	
 150 0004 55       		pushq	%rbp	#
 151              		.cfi_def_cfa_offset 16
 152              		.cfi_offset 6, -16
 153 0005 4889E5   		movq	%rsp, %rbp	#,
 154              		.cfi_def_cfa_register 6
 155 0008 48897DF8 		movq	%rdi, -8(%rbp)	# D.3460, D.3460
 156 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.3461, D.3461
 157              	# /usr/include/c++/9/new:179: inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 158              		.loc 2 179 69
 159 0010 90       		nop	
 160 0011 5D       		popq	%rbp	#
 161              		.cfi_def_cfa 7, 8
 162 0012 C3       		ret	
 163              		.cfi_endproc
 164              	.LFE40:
 166              		.section	.rodata
 169              	_ZStL19piecewise_construct:
 170 0000 00       		.zero	1
 171              		.section	.data.rel.ro,"aw"
 172              		.align 8
 175              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 176 0000 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 176      00000000 
 177              		.text
 179              	_ZL18__gthread_active_pv:
 180              	.LFB460:
 181              		.file 3 "/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h"
   1:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* Compile this one with gcc.  */
   3:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
   5:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** This file is part of GCC.
   6:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
   7:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** GCC is free software; you can redistribute it and/or modify it under
   8:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** the terms of the GNU General Public License as published by the Free
   9:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** Software Foundation; either version 3, or (at your option) any later
  10:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** version.
  11:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  12:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  13:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  14:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  15:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** for more details.
  16:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  17:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 3.1, as published by the Free Software Foundation.
  20:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  21:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** You should have received a copy of the GNU General Public License and
  22:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** <http://www.gnu.org/licenses/>.  */
  25:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  26:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifndef _GLIBCXX_GCC_GTHR_POSIX_H
  27:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define _GLIBCXX_GCC_GTHR_POSIX_H
  28:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  29:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* POSIX threads specific definitions.
  30:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    Easy, since the interface is just one-to-one mapping.  */
  31:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  32:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREADS 1
  33:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREADS_CXX0X 1
  34:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  35:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #include <pthread.h>
  36:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  37:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if ((defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)) \
  38:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****      || !defined(_GTHREAD_USE_MUTEX_TIMEDLOCK))
  39:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # include <unistd.h>
  40:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # if defined(_POSIX_TIMEOUTS) && _POSIX_TIMEOUTS >= 0
  41:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #  define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
  42:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # else
  43:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #  define _GTHREAD_USE_MUTEX_TIMEDLOCK 0
  44:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # endif
  45:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  46:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  47:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_t __gthread_t;
  48:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_key_t __gthread_key_t;
  49:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_once_t __gthread_once_t;
  50:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_mutex_t __gthread_mutex_t;
  51:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_mutex_t __gthread_recursive_mutex_t;
  52:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef pthread_cond_t __gthread_cond_t;
  53:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** typedef struct timespec __gthread_time_t;
  54:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  55:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* POSIX like conditional variables are supported.  Please look at comments
  56:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    in gthr.h for details. */
  57:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_HAS_COND	1
  58:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  59:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
  60:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function
  61:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT
  62:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER)
  63:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT PTHREAD_RECURSIVE_MUTEX_INITIALIZER
  64:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #elif defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)
  65:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
  66:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #else
  67:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function
  68:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  69:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_COND_INIT PTHREAD_COND_INITIALIZER
  70:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __GTHREAD_TIME_INIT {0,0}
  71:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  72:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _GTHREAD_USE_MUTEX_INIT_FUNC
  73:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # undef __GTHREAD_MUTEX_INIT
  74:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  75:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _GTHREAD_USE_RECURSIVE_MUTEX_INIT_FUNC
  76:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # undef __GTHREAD_RECURSIVE_MUTEX_INIT
  77:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # undef __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
  78:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION __gthread_recursive_mutex_init_function
  79:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  80:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _GTHREAD_USE_COND_INIT_FUNC
  81:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # undef __GTHREAD_COND_INIT
  82:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __GTHREAD_COND_INIT_FUNCTION __gthread_cond_init_function
  83:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  84:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  85:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if __GXX_WEAK__ && _GLIBCXX_GTHREAD_USE_WEAK
  86:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # ifndef __gthrw_pragma
  87:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #  define __gthrw_pragma(pragma)
  88:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # endif
  89:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __gthrw2(name,name2,type) \
  90:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   static __typeof(type) name \
  91:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****     __attribute__ ((__weakref__(#name2), __copy__ (type))); \
  92:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   __gthrw_pragma(weak type)
  93:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __gthrw_(name) __gthrw_ ## name
  94:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #else
  95:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __gthrw2(name,name2,type)
  96:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define __gthrw_(name) name
  97:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
  98:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
  99:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* Typically, __gthrw_foo is a weak reference to symbol foo.  */
 100:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #define __gthrw(name) __gthrw2(__gthrw_ ## name,name,name)
 101:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 102:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_once)
 103:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_getspecific)
 104:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_setspecific)
 105:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 106:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_create)
 107:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_join)
 108:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_equal)
 109:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_self)
 110:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_detach)
 111:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifndef __BIONIC__
 112:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cancel)
 113:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
 114:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(sched_yield)
 115:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 116:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_lock)
 117:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_trylock)
 118:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if _GTHREAD_USE_MUTEX_TIMEDLOCK
 119:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_timedlock)
 120:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
 121:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_unlock)
 122:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_init)
 123:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutex_destroy)
 124:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 125:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_init)
 126:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_broadcast)
 127:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_signal)
 128:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_wait)
 129:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_timedwait)
 130:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_cond_destroy)
 131:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 132:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_key_create)
 133:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_key_delete)
 134:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutexattr_init)
 135:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutexattr_settype)
 136:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_mutexattr_destroy)
 137:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 138:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 139:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if defined(_LIBOBJC) || defined(_LIBOBJC_WEAK)
 140:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* Objective-C.  */
 141:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_exit)
 142:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _POSIX_PRIORITY_SCHEDULING
 143:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING
 144:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(sched_get_priority_max)
 145:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(sched_get_priority_min)
 146:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */
 147:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif /* _POSIX_PRIORITY_SCHEDULING */
 148:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_attr_destroy)
 149:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_attr_init)
 150:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_attr_setdetachstate)
 151:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef _POSIX_THREAD_PRIORITY_SCHEDULING
 152:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_getschedparam)
 153:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw(pthread_setschedparam)
 154:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif /* _POSIX_THREAD_PRIORITY_SCHEDULING */
 155:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif /* _LIBOBJC || _LIBOBJC_WEAK */
 156:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 157:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if __GXX_WEAK__ && _GLIBCXX_GTHREAD_USE_WEAK
 158:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 159:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* On Solaris 2.6 up to 9, the libc exposes a POSIX threads interface even if
 160:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    -pthreads is not specified.  The functions are dummies and most return an
 161:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    error value.  However pthread_once returns 0 without invoking the routine
 162:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    it is passed so we cannot pretend that the interface is active if -pthreads
 163:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    is not specified.  On Solaris 2.5.1, the interface is not exposed at all so
 164:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    we need to play the usual game with weak symbols.  On Solaris 10 and up, a
 165:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    working interface is always exposed.  On FreeBSD 6 and later, libc also
 166:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    exposes a dummy POSIX threads interface, similar to what Solaris 2.6 up
 167:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    to 9 does.  FreeBSD >= 700014 even provides a pthread_cancel stub in libc,
 168:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    which means the alternate __gthread_active_p below cannot be used there.  */
 169:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 170:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #if defined(__FreeBSD__) || (defined(__sun) && defined(__svr4__))
 171:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 172:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** static volatile int __gthread_active = -1;
 173:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 174:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** static void
 175:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthread_trigger (void)
 176:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** {
 177:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   __gthread_active = 1;
 178:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** }
 179:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 180:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** static inline int
 181:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthread_active_p (void)
 182:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** {
 183:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   static pthread_mutex_t __gthread_active_mutex = PTHREAD_MUTEX_INITIALIZER;
 184:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   static pthread_once_t __gthread_active_once = PTHREAD_ONCE_INIT;
 185:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 186:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   /* Avoid reading __gthread_active twice on the main code path.  */
 187:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   int __gthread_active_latest_value = __gthread_active;
 188:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 189:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   /* This test is not protected to avoid taking a lock on the main code
 190:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****      path so every update of __gthread_active in a threaded program must
 191:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****      be atomic with regard to the result of the test.  */
 192:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   if (__builtin_expect (__gthread_active_latest_value < 0, 0))
 193:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****     {
 194:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****       if (__gthrw_(pthread_once))
 195:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	{
 196:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	  /* If this really is a threaded program, then we must ensure that
 197:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	     __gthread_active has been set to 1 before exiting this block.  */
 198:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	  __gthrw_(pthread_mutex_lock) (&__gthread_active_mutex);
 199:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	  __gthrw_(pthread_once) (&__gthread_active_once, __gthread_trigger);
 200:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	  __gthrw_(pthread_mutex_unlock) (&__gthread_active_mutex);
 201:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	}
 202:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 203:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****       /* Make sure we'll never enter this block again.  */
 204:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****       if (__gthread_active < 0)
 205:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	__gthread_active = 0;
 206:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 207:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****       __gthread_active_latest_value = __gthread_active;
 208:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****     }
 209:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 210:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   return __gthread_active_latest_value != 0;
 211:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** }
 212:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 213:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #else /* neither FreeBSD nor Solaris */
 214:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 215:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** /* For a program to be multi-threaded the only thing that it certainly must
 216:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    be using is pthread_create.  However, there may be other libraries that
 217:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    intercept pthread_create with their own definitions to wrap pthreads
 218:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    functionality for some purpose.  In those cases, pthread_create being
 219:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    defined might not necessarily mean that libpthread is actually linked
 220:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    in.
 221:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 222:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    For the GNU C library, we can use a known internal name.  This is always
 223:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    available in the ABI, but no other library would define it.  That is
 224:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    ideal, since any public pthread function might be intercepted just as
 225:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    pthread_create might be.  __pthread_key_create is an "internal"
 226:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    implementation symbol, but it is part of the public exported ABI.  Also,
 227:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    it's among the symbols that the static libpthread.a always links in
 228:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    whenever pthread_create is used, so there is no danger of a false
 229:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    negative result in any statically-linked, multi-threaded program.
 230:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 231:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    For others, we choose pthread_cancel as a function that seems unlikely
 232:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    to be redefined by an interceptor library.  The bionic (Android) C
 233:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    library does not provide pthread_cancel, so we do use pthread_create
 234:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****    there (and interceptor libraries lose).  */
 235:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 236:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #ifdef __GLIBC__
 237:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthrw2(__gthrw_(__pthread_key_create),
 238:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	 __pthread_key_create,
 239:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 	 pthread_key_create)
 240:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define GTHR_ACTIVE_PROXY	__gthrw_(__pthread_key_create)
 241:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #elif defined (__BIONIC__)
 242:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define GTHR_ACTIVE_PROXY	__gthrw_(pthread_create)
 243:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #else
 244:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** # define GTHR_ACTIVE_PROXY	__gthrw_(pthread_cancel)
 245:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** #endif
 246:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** 
 247:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** static inline int
 248:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** __gthread_active_p (void)
 249:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** {
 182              		.loc 3 249 1
 183              		.cfi_startproc
 184 0000 55       		pushq	%rbp	#
 185              		.cfi_def_cfa_offset 16
 186              		.cfi_offset 6, -16
 187 0001 4889E5   		movq	%rsp, %rbp	#,
 188              		.cfi_def_cfa_register 6
 189              	# /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:252:   return __gthread_active_ptr != 0;
 250:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   static void *const __gthread_active_ptr
 251:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****     = __extension__ (void *) &GTHR_ACTIVE_PROXY;
 252:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h ****   return __gthread_active_ptr != 0;
 190              		.loc 3 252 31
 191 0004 BA010000 		movl	$1, %edx	#, _1
 191      00
 192 0009 488B0500 		movq	_ZL28__gthrw___pthread_key_createPjPFvPvE@GOTPCREL(%rip), %rax	#, tmp86
 192      000000
 193 0010 4885C0   		testq	%rax, %rax	# tmp85
 194 0013 7505     		jne	.L10	#,
 195 0015 BA000000 		movl	$0, %edx	#, _1
 195      00
 196              	.L10:
 197              	# /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:252:   return __gthread_active_ptr != 0;
 198              		.loc 3 252 34
 199 001a 0FB6C2   		movzbl	%dl, %eax	# _1, _2
 200              	# /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:253: }
 253:/usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h **** }
 201              		.loc 3 253 1
 202 001d 5D       		popq	%rbp	#
 203              		.cfi_def_cfa 7, 8
 204 001e C3       		ret	
 205              		.cfi_endproc
 206              	.LFE460:
 208              		.section	.text._ZN9__gnu_cxxL18__exchange_and_addEPVii,"axG",@progbits,_ZNSt16_Sp_counted_baseILN9
 210              	_ZN9__gnu_cxxL18__exchange_and_addEPVii:
 211              	.LFB489:
 212              		.file 4 "/usr/include/c++/9/ext/atomicity.h"
   1:/usr/include/c++/9/ext/atomicity.h **** // Support for atomic operations -*- C++ -*-
   2:/usr/include/c++/9/ext/atomicity.h **** 
   3:/usr/include/c++/9/ext/atomicity.h **** // Copyright (C) 2004-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/atomicity.h **** //
   5:/usr/include/c++/9/ext/atomicity.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/atomicity.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/atomicity.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/atomicity.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/atomicity.h **** // any later version.
  10:/usr/include/c++/9/ext/atomicity.h **** 
  11:/usr/include/c++/9/ext/atomicity.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/atomicity.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/atomicity.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/atomicity.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/atomicity.h **** 
  16:/usr/include/c++/9/ext/atomicity.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/atomicity.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/atomicity.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/atomicity.h **** 
  20:/usr/include/c++/9/ext/atomicity.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/atomicity.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/atomicity.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/atomicity.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/atomicity.h **** 
  25:/usr/include/c++/9/ext/atomicity.h **** /** @file ext/atomicity.h
  26:/usr/include/c++/9/ext/atomicity.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/atomicity.h ****  */
  28:/usr/include/c++/9/ext/atomicity.h **** 
  29:/usr/include/c++/9/ext/atomicity.h **** #ifndef _GLIBCXX_ATOMICITY_H
  30:/usr/include/c++/9/ext/atomicity.h **** #define _GLIBCXX_ATOMICITY_H	1
  31:/usr/include/c++/9/ext/atomicity.h **** 
  32:/usr/include/c++/9/ext/atomicity.h **** #pragma GCC system_header
  33:/usr/include/c++/9/ext/atomicity.h **** 
  34:/usr/include/c++/9/ext/atomicity.h **** #include <bits/c++config.h>
  35:/usr/include/c++/9/ext/atomicity.h **** #include <bits/gthr.h>
  36:/usr/include/c++/9/ext/atomicity.h **** #include <bits/atomic_word.h>
  37:/usr/include/c++/9/ext/atomicity.h **** 
  38:/usr/include/c++/9/ext/atomicity.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  39:/usr/include/c++/9/ext/atomicity.h **** {
  40:/usr/include/c++/9/ext/atomicity.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/include/c++/9/ext/atomicity.h **** 
  42:/usr/include/c++/9/ext/atomicity.h ****   // Functions for portable atomic access.
  43:/usr/include/c++/9/ext/atomicity.h ****   // To abstract locking primitives across all thread policies, use:
  44:/usr/include/c++/9/ext/atomicity.h ****   // __exchange_and_add_dispatch
  45:/usr/include/c++/9/ext/atomicity.h ****   // __atomic_add_dispatch
  46:/usr/include/c++/9/ext/atomicity.h **** #ifdef _GLIBCXX_ATOMIC_BUILTINS
  47:/usr/include/c++/9/ext/atomicity.h ****   static inline _Atomic_word 
  48:/usr/include/c++/9/ext/atomicity.h ****   __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  49:/usr/include/c++/9/ext/atomicity.h ****   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 213              		.loc 4 49 3
 214              		.cfi_startproc
 215 0000 55       		pushq	%rbp	#
 216              		.cfi_def_cfa_offset 16
 217              		.cfi_offset 6, -16
 218 0001 4889E5   		movq	%rsp, %rbp	#,
 219              		.cfi_def_cfa_register 6
 220 0004 48897DF8 		movq	%rdi, -8(%rbp)	# __mem, __mem
 221 0008 8975F4   		movl	%esi, -12(%rbp)	# __val, __val
 222              	# /usr/include/c++/9/ext/atomicity.h:49:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_R
 223              		.loc 4 49 61
 224 000b 8B55F4   		movl	-12(%rbp), %edx	# __val, __val.9_1
 225 000e 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp86
 226 0012 F00FC110 		lock xaddl	%edx, (%rax)	#, _2,
 227 0016 89D0     		movl	%edx, %eax	# _2, _7
 228              	# /usr/include/c++/9/ext/atomicity.h:49:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_R
 229              		.loc 4 49 64
 230 0018 5D       		popq	%rbp	#
 231              		.cfi_def_cfa 7, 8
 232 0019 C3       		ret	
 233              		.cfi_endproc
 234              	.LFE489:
 236              		.section	.text._ZN9__gnu_cxxL12__atomic_addEPVii,"axG",@progbits,_ZNSt16_Sp_counted_baseILN9__gnu_
 238              	_ZN9__gnu_cxxL12__atomic_addEPVii:
 239              	.LFB490:
  50:/usr/include/c++/9/ext/atomicity.h **** 
  51:/usr/include/c++/9/ext/atomicity.h ****   static inline void
  52:/usr/include/c++/9/ext/atomicity.h ****   __atomic_add(volatile _Atomic_word* __mem, int __val)
  53:/usr/include/c++/9/ext/atomicity.h ****   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 240              		.loc 4 53 3
 241              		.cfi_startproc
 242 0000 55       		pushq	%rbp	#
 243              		.cfi_def_cfa_offset 16
 244              		.cfi_offset 6, -16
 245 0001 4889E5   		movq	%rsp, %rbp	#,
 246              		.cfi_def_cfa_register 6
 247 0004 48897DF8 		movq	%rdi, -8(%rbp)	# __mem, __mem
 248 0008 8975F4   		movl	%esi, -12(%rbp)	# __val, __val
 249              	# /usr/include/c++/9/ext/atomicity.h:53:   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 250              		.loc 4 53 54
 251 000b 8B55F4   		movl	-12(%rbp), %edx	# __val, __val.5_1
 252 000e 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp83
 253 0012 F00110   		lock addl	%edx, (%rax)	#, __val.5_1,
 254              	# /usr/include/c++/9/ext/atomicity.h:53:   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
 255              		.loc 4 53 57
 256 0015 90       		nop	
 257 0016 5D       		popq	%rbp	#
 258              		.cfi_def_cfa 7, 8
 259 0017 C3       		ret	
 260              		.cfi_endproc
 261              	.LFE490:
 263              		.section	.text._ZN9__gnu_cxxL25__exchange_and_add_singleEPii,"axG",@progbits,_ZNSt16_Sp_counted_ba
 265              	_ZN9__gnu_cxxL25__exchange_and_add_singleEPii:
 266              	.LFB491:
  54:/usr/include/c++/9/ext/atomicity.h **** #else
  55:/usr/include/c++/9/ext/atomicity.h ****   _Atomic_word
  56:/usr/include/c++/9/ext/atomicity.h ****   __attribute__ ((__unused__))
  57:/usr/include/c++/9/ext/atomicity.h ****   __exchange_and_add(volatile _Atomic_word*, int) throw ();
  58:/usr/include/c++/9/ext/atomicity.h **** 
  59:/usr/include/c++/9/ext/atomicity.h ****   void
  60:/usr/include/c++/9/ext/atomicity.h ****   __attribute__ ((__unused__))
  61:/usr/include/c++/9/ext/atomicity.h ****   __atomic_add(volatile _Atomic_word*, int) throw ();
  62:/usr/include/c++/9/ext/atomicity.h **** #endif
  63:/usr/include/c++/9/ext/atomicity.h **** 
  64:/usr/include/c++/9/ext/atomicity.h ****   static inline _Atomic_word
  65:/usr/include/c++/9/ext/atomicity.h ****   __exchange_and_add_single(_Atomic_word* __mem, int __val)
  66:/usr/include/c++/9/ext/atomicity.h ****   {
 267              		.loc 4 66 3
 268              		.cfi_startproc
 269 0000 55       		pushq	%rbp	#
 270              		.cfi_def_cfa_offset 16
 271              		.cfi_offset 6, -16
 272 0001 4889E5   		movq	%rsp, %rbp	#,
 273              		.cfi_def_cfa_register 6
 274 0004 48897DE8 		movq	%rdi, -24(%rbp)	# __mem, __mem
 275 0008 8975E4   		movl	%esi, -28(%rbp)	# __val, __val
 276              	# /usr/include/c++/9/ext/atomicity.h:67:     _Atomic_word __result = *__mem;
  67:/usr/include/c++/9/ext/atomicity.h ****     _Atomic_word __result = *__mem;
 277              		.loc 4 67 18
 278 000b 488B45E8 		movq	-24(%rbp), %rax	# __mem, tmp86
 279 000f 8B00     		movl	(%rax), %eax	# *__mem_4(D), tmp87
 280 0011 8945FC   		movl	%eax, -4(%rbp)	# tmp87, __result
 281              	# /usr/include/c++/9/ext/atomicity.h:68:     *__mem += __val;
  68:/usr/include/c++/9/ext/atomicity.h ****     *__mem += __val;
 282              		.loc 4 68 12
 283 0014 488B45E8 		movq	-24(%rbp), %rax	# __mem, tmp88
 284 0018 8B10     		movl	(%rax), %edx	# *__mem_4(D), _1
 285 001a 8B45E4   		movl	-28(%rbp), %eax	# __val, tmp89
 286 001d 01C2     		addl	%eax, %edx	# tmp89, _2
 287 001f 488B45E8 		movq	-24(%rbp), %rax	# __mem, tmp90
 288 0023 8910     		movl	%edx, (%rax)	# _2, *__mem_4(D)
 289              	# /usr/include/c++/9/ext/atomicity.h:69:     return __result;
  69:/usr/include/c++/9/ext/atomicity.h ****     return __result;
 290              		.loc 4 69 12
 291 0025 8B45FC   		movl	-4(%rbp), %eax	# __result, _8
 292              	# /usr/include/c++/9/ext/atomicity.h:70:   }
  70:/usr/include/c++/9/ext/atomicity.h ****   }
 293              		.loc 4 70 3
 294 0028 5D       		popq	%rbp	#
 295              		.cfi_def_cfa 7, 8
 296 0029 C3       		ret	
 297              		.cfi_endproc
 298              	.LFE491:
 300              		.section	.text._ZN9__gnu_cxxL19__atomic_add_singleEPii,"axG",@progbits,_ZNSt16_Sp_counted_baseILN9
 302              	_ZN9__gnu_cxxL19__atomic_add_singleEPii:
 303              	.LFB492:
  71:/usr/include/c++/9/ext/atomicity.h **** 
  72:/usr/include/c++/9/ext/atomicity.h ****   static inline void
  73:/usr/include/c++/9/ext/atomicity.h ****   __atomic_add_single(_Atomic_word* __mem, int __val)
  74:/usr/include/c++/9/ext/atomicity.h ****   { *__mem += __val; }
 304              		.loc 4 74 3
 305              		.cfi_startproc
 306 0000 55       		pushq	%rbp	#
 307              		.cfi_def_cfa_offset 16
 308              		.cfi_offset 6, -16
 309 0001 4889E5   		movq	%rsp, %rbp	#,
 310              		.cfi_def_cfa_register 6
 311 0004 48897DF8 		movq	%rdi, -8(%rbp)	# __mem, __mem
 312 0008 8975F4   		movl	%esi, -12(%rbp)	# __val, __val
 313              	# /usr/include/c++/9/ext/atomicity.h:74:   { *__mem += __val; }
 314              		.loc 4 74 12
 315 000b 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp84
 316 000f 8B10     		movl	(%rax), %edx	# *__mem_4(D), _1
 317 0011 8B45F4   		movl	-12(%rbp), %eax	# __val, tmp85
 318 0014 01C2     		addl	%eax, %edx	# tmp85, _2
 319 0016 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp86
 320 001a 8910     		movl	%edx, (%rax)	# _2, *__mem_4(D)
 321              	# /usr/include/c++/9/ext/atomicity.h:74:   { *__mem += __val; }
 322              		.loc 4 74 22
 323 001c 90       		nop	
 324 001d 5D       		popq	%rbp	#
 325              		.cfi_def_cfa 7, 8
 326 001e C3       		ret	
 327              		.cfi_endproc
 328              	.LFE492:
 330              		.section	.text._ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii,"axG",@progbits,_ZNSt16_Sp_counted_
 332              	_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii:
 333              	.LFB493:
  75:/usr/include/c++/9/ext/atomicity.h **** 
  76:/usr/include/c++/9/ext/atomicity.h ****   static inline _Atomic_word
  77:/usr/include/c++/9/ext/atomicity.h ****   __attribute__ ((__unused__))
  78:/usr/include/c++/9/ext/atomicity.h ****   __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  79:/usr/include/c++/9/ext/atomicity.h ****   {
 334              		.loc 4 79 3
 335              		.cfi_startproc
 336 0000 55       		pushq	%rbp	#
 337              		.cfi_def_cfa_offset 16
 338              		.cfi_offset 6, -16
 339 0001 4889E5   		movq	%rsp, %rbp	#,
 340              		.cfi_def_cfa_register 6
 341 0004 4883EC10 		subq	$16, %rsp	#,
 342 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __mem, __mem
 343 000c 8975F4   		movl	%esi, -12(%rbp)	# __val, __val
 344              	# /usr/include/c++/9/ext/atomicity.h:81:     if (__gthread_active_p())
  80:/usr/include/c++/9/ext/atomicity.h **** #ifdef __GTHREADS
  81:/usr/include/c++/9/ext/atomicity.h ****     if (__gthread_active_p())
 345              		.loc 4 81 27
 346 000f E8000000 		call	_ZL18__gthread_active_pv	#
 346      00
 347              	# /usr/include/c++/9/ext/atomicity.h:81:     if (__gthread_active_p())
 348              		.loc 4 81 29
 349 0014 85C0     		testl	%eax, %eax	# _1
 350 0016 0F95C0   		setne	%al	#, retval.8_6
 351              	# /usr/include/c++/9/ext/atomicity.h:81:     if (__gthread_active_p())
 352              		.loc 4 81 5
 353 0019 84C0     		testb	%al, %al	# retval.8_6
 354 001b 7413     		je	.L19	#,
 355              	# /usr/include/c++/9/ext/atomicity.h:82:       return __exchange_and_add(__mem, __val);
  82:/usr/include/c++/9/ext/atomicity.h ****       return __exchange_and_add(__mem, __val);
 356              		.loc 4 82 32
 357 001d 8B55F4   		movl	-12(%rbp), %edx	# __val, tmp86
 358 0020 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp87
 359 0024 89D6     		movl	%edx, %esi	# tmp86,
 360 0026 4889C7   		movq	%rax, %rdi	# tmp87,
 361 0029 E8000000 		call	_ZN9__gnu_cxxL18__exchange_and_addEPVii	#
 361      00
 362              	# /usr/include/c++/9/ext/atomicity.h:82:       return __exchange_and_add(__mem, __val);
 363              		.loc 4 82 45
 364 002e EB12     		jmp	.L20	#
 365              	.L19:
 366              	# /usr/include/c++/9/ext/atomicity.h:84:       return __exchange_and_add_single(__mem, __val);
  83:/usr/include/c++/9/ext/atomicity.h ****     else
  84:/usr/include/c++/9/ext/atomicity.h ****       return __exchange_and_add_single(__mem, __val);
 367              		.loc 4 84 39
 368 0030 8B55F4   		movl	-12(%rbp), %edx	# __val, tmp88
 369 0033 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp89
 370 0037 89D6     		movl	%edx, %esi	# tmp88,
 371 0039 4889C7   		movq	%rax, %rdi	# tmp89,
 372 003c E8000000 		call	_ZN9__gnu_cxxL25__exchange_and_add_singleEPii	#
 372      00
 373              	# /usr/include/c++/9/ext/atomicity.h:84:       return __exchange_and_add_single(__mem, __val);
 374              		.loc 4 84 52
 375 0041 90       		nop	
 376              	.L20:
 377              	# /usr/include/c++/9/ext/atomicity.h:88:   }
  85:/usr/include/c++/9/ext/atomicity.h **** #else
  86:/usr/include/c++/9/ext/atomicity.h ****     return __exchange_and_add_single(__mem, __val);
  87:/usr/include/c++/9/ext/atomicity.h **** #endif
  88:/usr/include/c++/9/ext/atomicity.h ****   }
 378              		.loc 4 88 3
 379 0042 C9       		leave	
 380              		.cfi_def_cfa 7, 8
 381 0043 C3       		ret	
 382              		.cfi_endproc
 383              	.LFE493:
 385              		.section	.text._ZN9__gnu_cxxL21__atomic_add_dispatchEPii,"axG",@progbits,_ZNSt16_Sp_counted_baseIL
 387              	_ZN9__gnu_cxxL21__atomic_add_dispatchEPii:
 388              	.LFB494:
  89:/usr/include/c++/9/ext/atomicity.h **** 
  90:/usr/include/c++/9/ext/atomicity.h ****   static inline void
  91:/usr/include/c++/9/ext/atomicity.h ****   __attribute__ ((__unused__))
  92:/usr/include/c++/9/ext/atomicity.h ****   __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  93:/usr/include/c++/9/ext/atomicity.h ****   {
 389              		.loc 4 93 3
 390              		.cfi_startproc
 391 0000 55       		pushq	%rbp	#
 392              		.cfi_def_cfa_offset 16
 393              		.cfi_offset 6, -16
 394 0001 4889E5   		movq	%rsp, %rbp	#,
 395              		.cfi_def_cfa_register 6
 396 0004 4883EC10 		subq	$16, %rsp	#,
 397 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __mem, __mem
 398 000c 8975F4   		movl	%esi, -12(%rbp)	# __val, __val
 399              	# /usr/include/c++/9/ext/atomicity.h:95:     if (__gthread_active_p())
  94:/usr/include/c++/9/ext/atomicity.h **** #ifdef __GTHREADS
  95:/usr/include/c++/9/ext/atomicity.h ****     if (__gthread_active_p())
 400              		.loc 4 95 27
 401 000f E8000000 		call	_ZL18__gthread_active_pv	#
 401      00
 402              	# /usr/include/c++/9/ext/atomicity.h:95:     if (__gthread_active_p())
 403              		.loc 4 95 29
 404 0014 85C0     		testl	%eax, %eax	# _1
 405 0016 0F95C0   		setne	%al	#, retval.4_5
 406              	# /usr/include/c++/9/ext/atomicity.h:95:     if (__gthread_active_p())
 407              		.loc 4 95 5
 408 0019 84C0     		testb	%al, %al	# retval.4_5
 409 001b 7413     		je	.L22	#,
 410              	# /usr/include/c++/9/ext/atomicity.h:96:       __atomic_add(__mem, __val);
  96:/usr/include/c++/9/ext/atomicity.h ****       __atomic_add(__mem, __val);
 411              		.loc 4 96 19
 412 001d 8B55F4   		movl	-12(%rbp), %edx	# __val, tmp84
 413 0020 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp85
 414 0024 89D6     		movl	%edx, %esi	# tmp84,
 415 0026 4889C7   		movq	%rax, %rdi	# tmp85,
 416 0029 E8000000 		call	_ZN9__gnu_cxxL12__atomic_addEPVii	#
 416      00
 417              	# /usr/include/c++/9/ext/atomicity.h:102:   }
  97:/usr/include/c++/9/ext/atomicity.h ****     else
  98:/usr/include/c++/9/ext/atomicity.h ****       __atomic_add_single(__mem, __val);
  99:/usr/include/c++/9/ext/atomicity.h **** #else
 100:/usr/include/c++/9/ext/atomicity.h ****     __atomic_add_single(__mem, __val);
 101:/usr/include/c++/9/ext/atomicity.h **** #endif
 102:/usr/include/c++/9/ext/atomicity.h ****   }
 418              		.loc 4 102 3
 419 002e EB11     		jmp	.L24	#
 420              	.L22:
 421              	# /usr/include/c++/9/ext/atomicity.h:98:       __atomic_add_single(__mem, __val);
  98:/usr/include/c++/9/ext/atomicity.h **** #else
 422              		.loc 4 98 26
 423 0030 8B55F4   		movl	-12(%rbp), %edx	# __val, tmp86
 424 0033 488B45F8 		movq	-8(%rbp), %rax	# __mem, tmp87
 425 0037 89D6     		movl	%edx, %esi	# tmp86,
 426 0039 4889C7   		movq	%rax, %rdi	# tmp87,
 427 003c E8000000 		call	_ZN9__gnu_cxxL19__atomic_add_singleEPii	#
 427      00
 428              	.L24:
 429              	# /usr/include/c++/9/ext/atomicity.h:102:   }
 430              		.loc 4 102 3
 431 0041 90       		nop	
 432 0042 C9       		leave	
 433              		.cfi_def_cfa 7, 8
 434 0043 C3       		ret	
 435              		.cfi_endproc
 436              	.LFE494:
 438              		.local	_ZStL8__ioinit
 439              		.comm	_ZStL8__ioinit,1,1
 440              		.section	.rodata
 441 0001 000000   		.align 4
 444              	_ZN9__gnu_cxxL21__default_lock_policyE:
 445 0004 02000000 		.long	2
 448              	_ZStL13allocator_arg:
 449 0008 00       		.zero	1
 452              	_ZStL6ignore:
 453 0009 00       		.zero	1
 454              		.weak	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag
 455              		.section	.rodata._ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag,"aG",@progbits,_ZZNSt19_Sp_make_shared
 456              		.align 8
 459              	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag:
 460 0000 00000000 		.zero	16
 460      00000000 
 460      00000000 
 460      00000000 
 461              		.section	.text._ZNSt19_Sp_make_shared_tag5_S_tiEv,"axG",@progbits,_ZNSt19_Sp_make_shared_tag5_S_ti
 462              		.weak	_ZNSt19_Sp_make_shared_tag5_S_tiEv
 464              	_ZNSt19_Sp_make_shared_tag5_S_tiEv:
 465              	.LFB2063:
 466              		.file 5 "/usr/include/c++/9/bits/shared_ptr_base.h"
   1:/usr/include/c++/9/bits/shared_ptr_base.h **** // shared_ptr and weak_ptr implementation details -*- C++ -*-
   2:/usr/include/c++/9/bits/shared_ptr_base.h **** 
   3:/usr/include/c++/9/bits/shared_ptr_base.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/shared_ptr_base.h **** //
   5:/usr/include/c++/9/bits/shared_ptr_base.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/shared_ptr_base.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/shared_ptr_base.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/shared_ptr_base.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/shared_ptr_base.h **** // any later version.
  10:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  11:/usr/include/c++/9/bits/shared_ptr_base.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/shared_ptr_base.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/shared_ptr_base.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/shared_ptr_base.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  16:/usr/include/c++/9/bits/shared_ptr_base.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/shared_ptr_base.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/shared_ptr_base.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  20:/usr/include/c++/9/bits/shared_ptr_base.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/shared_ptr_base.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/shared_ptr_base.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/shared_ptr_base.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  25:/usr/include/c++/9/bits/shared_ptr_base.h **** // GCC Note: Based on files from version 1.32.0 of the Boost library.
  26:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  27:/usr/include/c++/9/bits/shared_ptr_base.h **** //  shared_count.hpp
  28:/usr/include/c++/9/bits/shared_ptr_base.h **** //  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
  29:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  30:/usr/include/c++/9/bits/shared_ptr_base.h **** //  shared_ptr.hpp
  31:/usr/include/c++/9/bits/shared_ptr_base.h **** //  Copyright (C) 1998, 1999 Greg Colvin and Beman Dawes.
  32:/usr/include/c++/9/bits/shared_ptr_base.h **** //  Copyright (C) 2001, 2002, 2003 Peter Dimov
  33:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  34:/usr/include/c++/9/bits/shared_ptr_base.h **** //  weak_ptr.hpp
  35:/usr/include/c++/9/bits/shared_ptr_base.h **** //  Copyright (C) 2001, 2002, 2003 Peter Dimov
  36:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  37:/usr/include/c++/9/bits/shared_ptr_base.h **** //  enable_shared_from_this.hpp
  38:/usr/include/c++/9/bits/shared_ptr_base.h **** //  Copyright (C) 2002 Peter Dimov
  39:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  40:/usr/include/c++/9/bits/shared_ptr_base.h **** // Distributed under the Boost Software License, Version 1.0. (See
  41:/usr/include/c++/9/bits/shared_ptr_base.h **** // accompanying file LICENSE_1_0.txt or copy at
  42:/usr/include/c++/9/bits/shared_ptr_base.h **** // http://www.boost.org/LICENSE_1_0.txt)
  43:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  44:/usr/include/c++/9/bits/shared_ptr_base.h **** /** @file bits/shared_ptr_base.h
  45:/usr/include/c++/9/bits/shared_ptr_base.h ****  *  This is an internal header file, included by other library headers.
  46:/usr/include/c++/9/bits/shared_ptr_base.h ****  *  Do not attempt to use it directly. @headername{memory}
  47:/usr/include/c++/9/bits/shared_ptr_base.h ****  */
  48:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  49:/usr/include/c++/9/bits/shared_ptr_base.h **** #ifndef _SHARED_PTR_BASE_H
  50:/usr/include/c++/9/bits/shared_ptr_base.h **** #define _SHARED_PTR_BASE_H 1
  51:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  52:/usr/include/c++/9/bits/shared_ptr_base.h **** #include <typeinfo>
  53:/usr/include/c++/9/bits/shared_ptr_base.h **** #include <bits/allocated_ptr.h>
  54:/usr/include/c++/9/bits/shared_ptr_base.h **** #include <bits/refwrap.h>
  55:/usr/include/c++/9/bits/shared_ptr_base.h **** #include <bits/stl_function.h>
  56:/usr/include/c++/9/bits/shared_ptr_base.h **** #include <ext/aligned_buffer.h>
  57:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  58:/usr/include/c++/9/bits/shared_ptr_base.h **** namespace std _GLIBCXX_VISIBILITY(default)
  59:/usr/include/c++/9/bits/shared_ptr_base.h **** {
  60:/usr/include/c++/9/bits/shared_ptr_base.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  61:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  62:/usr/include/c++/9/bits/shared_ptr_base.h **** #if _GLIBCXX_USE_DEPRECATED
  63:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic push
  64:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  65:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename> class auto_ptr;
  66:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic pop
  67:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
  68:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  69:/usr/include/c++/9/bits/shared_ptr_base.h ****  /**
  70:/usr/include/c++/9/bits/shared_ptr_base.h ****    *  @brief  Exception possibly thrown by @c shared_ptr.
  71:/usr/include/c++/9/bits/shared_ptr_base.h ****    *  @ingroup exceptions
  72:/usr/include/c++/9/bits/shared_ptr_base.h ****    */
  73:/usr/include/c++/9/bits/shared_ptr_base.h ****   class bad_weak_ptr : public std::exception
  74:/usr/include/c++/9/bits/shared_ptr_base.h ****   {
  75:/usr/include/c++/9/bits/shared_ptr_base.h ****   public:
  76:/usr/include/c++/9/bits/shared_ptr_base.h ****     virtual char const* what() const noexcept;
  77:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  78:/usr/include/c++/9/bits/shared_ptr_base.h ****     virtual ~bad_weak_ptr() noexcept;
  79:/usr/include/c++/9/bits/shared_ptr_base.h ****   };
  80:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  81:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Substitute for bad_weak_ptr object in the case of -fno-exceptions.
  82:/usr/include/c++/9/bits/shared_ptr_base.h ****   inline void
  83:/usr/include/c++/9/bits/shared_ptr_base.h ****   __throw_bad_weak_ptr()
  84:/usr/include/c++/9/bits/shared_ptr_base.h ****   { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
  85:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  86:/usr/include/c++/9/bits/shared_ptr_base.h ****   using __gnu_cxx::_Lock_policy;
  87:/usr/include/c++/9/bits/shared_ptr_base.h ****   using __gnu_cxx::__default_lock_policy;
  88:/usr/include/c++/9/bits/shared_ptr_base.h ****   using __gnu_cxx::_S_single;
  89:/usr/include/c++/9/bits/shared_ptr_base.h ****   using __gnu_cxx::_S_mutex;
  90:/usr/include/c++/9/bits/shared_ptr_base.h ****   using __gnu_cxx::_S_atomic;
  91:/usr/include/c++/9/bits/shared_ptr_base.h **** 
  92:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Empty helper class except when the template argument is _S_mutex.
  93:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp>
  94:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Mutex_base
  95:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
  96:/usr/include/c++/9/bits/shared_ptr_base.h ****     protected:
  97:/usr/include/c++/9/bits/shared_ptr_base.h ****       // The atomic policy uses fully-fenced builtins, single doesn't care.
  98:/usr/include/c++/9/bits/shared_ptr_base.h ****       enum { _S_need_barriers = 0 };
  99:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 100:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 101:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 102:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Mutex_base<_S_mutex>
 103:/usr/include/c++/9/bits/shared_ptr_base.h ****     : public __gnu_cxx::__mutex
 104:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 105:/usr/include/c++/9/bits/shared_ptr_base.h ****     protected:
 106:/usr/include/c++/9/bits/shared_ptr_base.h ****       // This policy is used when atomic builtins are not available.
 107:/usr/include/c++/9/bits/shared_ptr_base.h ****       // The replacement atomic operations might not have the necessary
 108:/usr/include/c++/9/bits/shared_ptr_base.h ****       // memory barriers.
 109:/usr/include/c++/9/bits/shared_ptr_base.h ****       enum { _S_need_barriers = 1 };
 110:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 111:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 112:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp = __default_lock_policy>
 113:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Sp_counted_base
 114:/usr/include/c++/9/bits/shared_ptr_base.h ****     : public _Mutex_base<_Lp>
 115:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 116:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 117:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_base() noexcept
 118:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_use_count(1), _M_weak_count(1) { }
 119:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 120:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual
 121:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~_Sp_counted_base() noexcept
 122:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 123:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 124:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Called when _M_use_count drops to zero, to release the resources
 125:/usr/include/c++/9/bits/shared_ptr_base.h ****       // managed by *this.
 126:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 127:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_dispose() noexcept = 0;
 128:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 129:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Called when _M_weak_count drops to zero.
 130:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 131:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_destroy() noexcept
 132:/usr/include/c++/9/bits/shared_ptr_base.h ****       { delete this; }
 133:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 134:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void*
 135:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_deleter(const std::type_info&) noexcept = 0;
 136:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 137:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 138:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_add_ref_copy()
 139:/usr/include/c++/9/bits/shared_ptr_base.h ****       { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
 140:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 141:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 142:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_add_ref_lock();
 143:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 144:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 145:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_add_ref_lock_nothrow();
 146:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 147:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 148:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_release() noexcept
 149:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 150:/usr/include/c++/9/bits/shared_ptr_base.h ****         // Be race-detector-friendly.  For more info see bits/c++config.
 151:/usr/include/c++/9/bits/shared_ptr_base.h ****         _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
 152:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
 153:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 154:/usr/include/c++/9/bits/shared_ptr_base.h ****             _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_use_count);
 155:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _M_dispose();
 156:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    // There must be a memory barrier between dispose() and destroy()
 157:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    // to ensure that the effects of dispose() are observed in the
 158:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    // thread that runs destroy().
 159:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html
 160:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    if (_Mutex_base<_Lp>::_S_need_barriers)
 161:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      {
 162:/usr/include/c++/9/bits/shared_ptr_base.h **** 		__atomic_thread_fence (__ATOMIC_ACQ_REL);
 163:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      }
 164:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 165:/usr/include/c++/9/bits/shared_ptr_base.h ****             // Be race-detector-friendly.  For more info see bits/c++config.
 166:/usr/include/c++/9/bits/shared_ptr_base.h ****             _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
 167:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
 168:/usr/include/c++/9/bits/shared_ptr_base.h **** 						       -1) == 1)
 169:/usr/include/c++/9/bits/shared_ptr_base.h ****               {
 170:/usr/include/c++/9/bits/shared_ptr_base.h ****                 _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
 171:/usr/include/c++/9/bits/shared_ptr_base.h **** 	        _M_destroy();
 172:/usr/include/c++/9/bits/shared_ptr_base.h ****               }
 173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  }
 174:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 175:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 176:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 177:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_weak_add_ref() noexcept
 178:/usr/include/c++/9/bits/shared_ptr_base.h ****       { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }
 179:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 180:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 181:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_weak_release() noexcept
 182:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 183:/usr/include/c++/9/bits/shared_ptr_base.h ****         // Be race-detector-friendly. For more info see bits/c++config.
 184:/usr/include/c++/9/bits/shared_ptr_base.h ****         _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
 185:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
 186:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 187:/usr/include/c++/9/bits/shared_ptr_base.h ****             _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
 188:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    if (_Mutex_base<_Lp>::_S_need_barriers)
 189:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      {
 190:/usr/include/c++/9/bits/shared_ptr_base.h **** 	        // See _M_release(),
 191:/usr/include/c++/9/bits/shared_ptr_base.h **** 	        // destroy() must observe results of dispose()
 192:/usr/include/c++/9/bits/shared_ptr_base.h **** 		__atomic_thread_fence (__ATOMIC_ACQ_REL);
 193:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      }
 194:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _M_destroy();
 195:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  }
 196:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 197:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 198:/usr/include/c++/9/bits/shared_ptr_base.h ****       long
 199:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_use_count() const noexcept
 200:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 201:/usr/include/c++/9/bits/shared_ptr_base.h ****         // No memory barrier is used here so there is no synchronization
 202:/usr/include/c++/9/bits/shared_ptr_base.h ****         // with other threads.
 203:/usr/include/c++/9/bits/shared_ptr_base.h ****         return __atomic_load_n(&_M_use_count, __ATOMIC_RELAXED);
 204:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 205:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 206:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 207:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_base(_Sp_counted_base const&) = delete;
 208:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;
 209:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 210:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Atomic_word  _M_use_count;     // #shared
 211:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Atomic_word  _M_weak_count;    // #weak + (#shared != 0)
 212:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 213:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 214:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 215:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 216:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::
 217:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock()
 218:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 219:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (_M_use_count == 0)
 220:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__throw_bad_weak_ptr();
 221:/usr/include/c++/9/bits/shared_ptr_base.h ****       ++_M_use_count;
 222:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 223:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 224:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 225:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 226:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_mutex>::
 227:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock()
 228:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 229:/usr/include/c++/9/bits/shared_ptr_base.h ****       __gnu_cxx::__scoped_lock sentry(*this);
 230:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 231:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 232:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_use_count = 0;
 233:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __throw_bad_weak_ptr();
 234:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 235:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 236:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 237:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 238:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 239:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_atomic>::
 240:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock()
 241:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 242:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Perform lock-free add-if-not-zero operation.
 243:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Atomic_word __count = _M_get_use_count();
 244:/usr/include/c++/9/bits/shared_ptr_base.h ****       do
 245:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 246:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  if (__count == 0)
 247:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    __throw_bad_weak_ptr();
 248:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // Replace the current counter value with the old value + 1, as
 249:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // long as it's not changed meanwhile.
 250:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 251:/usr/include/c++/9/bits/shared_ptr_base.h ****       while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
 252:/usr/include/c++/9/bits/shared_ptr_base.h **** 					  true, __ATOMIC_ACQ_REL,
 253:/usr/include/c++/9/bits/shared_ptr_base.h **** 					  __ATOMIC_RELAXED));
 254:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 255:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 256:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 257:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline bool
 258:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::
 259:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock_nothrow()
 260:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 261:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (_M_use_count == 0)
 262:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return false;
 263:/usr/include/c++/9/bits/shared_ptr_base.h ****       ++_M_use_count;
 264:/usr/include/c++/9/bits/shared_ptr_base.h ****       return true;
 265:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 266:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 267:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 268:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline bool
 269:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_mutex>::
 270:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock_nothrow()
 271:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 272:/usr/include/c++/9/bits/shared_ptr_base.h ****       __gnu_cxx::__scoped_lock sentry(*this);
 273:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 274:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 275:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_use_count = 0;
 276:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return false;
 277:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 278:/usr/include/c++/9/bits/shared_ptr_base.h ****       return true;
 279:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 280:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 281:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 282:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline bool
 283:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_atomic>::
 284:/usr/include/c++/9/bits/shared_ptr_base.h ****     _M_add_ref_lock_nothrow()
 285:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 286:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Perform lock-free add-if-not-zero operation.
 287:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Atomic_word __count = _M_get_use_count();
 288:/usr/include/c++/9/bits/shared_ptr_base.h ****       do
 289:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 290:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  if (__count == 0)
 291:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    return false;
 292:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // Replace the current counter value with the old value + 1, as
 293:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // long as it's not changed meanwhile.
 294:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 295:/usr/include/c++/9/bits/shared_ptr_base.h ****       while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
 296:/usr/include/c++/9/bits/shared_ptr_base.h **** 					  true, __ATOMIC_ACQ_REL,
 297:/usr/include/c++/9/bits/shared_ptr_base.h **** 					  __ATOMIC_RELAXED));
 298:/usr/include/c++/9/bits/shared_ptr_base.h ****       return true;
 299:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 300:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 301:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 302:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 303:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::_M_add_ref_copy()
 304:/usr/include/c++/9/bits/shared_ptr_base.h ****     { ++_M_use_count; }
 305:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 306:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 307:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 308:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::_M_release() noexcept
 309:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 310:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (--_M_use_count == 0)
 311:/usr/include/c++/9/bits/shared_ptr_base.h ****         {
 312:/usr/include/c++/9/bits/shared_ptr_base.h ****           _M_dispose();
 313:/usr/include/c++/9/bits/shared_ptr_base.h ****           if (--_M_weak_count == 0)
 314:/usr/include/c++/9/bits/shared_ptr_base.h ****             _M_destroy();
 315:/usr/include/c++/9/bits/shared_ptr_base.h ****         }
 316:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 317:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 318:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 319:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 320:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
 321:/usr/include/c++/9/bits/shared_ptr_base.h ****     { ++_M_weak_count; }
 322:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 323:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 324:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 325:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::_M_weak_release() noexcept
 326:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 327:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (--_M_weak_count == 0)
 328:/usr/include/c++/9/bits/shared_ptr_base.h ****         _M_destroy();
 329:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 330:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 331:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 332:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline long
 333:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
 334:/usr/include/c++/9/bits/shared_ptr_base.h ****     { return _M_use_count; }
 335:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 336:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 337:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Forward declarations.
 338:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
 339:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_ptr;
 340:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 341:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
 342:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __weak_ptr;
 343:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 344:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
 345:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __enable_shared_from_this;
 346:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 347:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp>
 348:/usr/include/c++/9/bits/shared_ptr_base.h ****     class shared_ptr;
 349:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 350:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp>
 351:/usr/include/c++/9/bits/shared_ptr_base.h ****     class weak_ptr;
 352:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 353:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp>
 354:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct owner_less;
 355:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 356:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp>
 357:/usr/include/c++/9/bits/shared_ptr_base.h ****     class enable_shared_from_this;
 358:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 359:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp = __default_lock_policy>
 360:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __weak_count;
 361:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 362:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp = __default_lock_policy>
 363:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_count;
 364:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 365:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 366:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Counted ptr with no deleter or allocator support
 367:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Ptr, _Lock_policy _Lp>
 368:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 369:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 370:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 371:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit
 372:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_ptr(_Ptr __p) noexcept
 373:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_ptr(__p) { }
 374:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 375:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 376:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_dispose() noexcept
 377:/usr/include/c++/9/bits/shared_ptr_base.h ****       { delete _M_ptr; }
 378:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 379:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 380:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_destroy() noexcept
 381:/usr/include/c++/9/bits/shared_ptr_base.h ****       { delete this; }
 382:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 383:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void*
 384:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_deleter(const std::type_info&) noexcept
 385:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return nullptr; }
 386:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 387:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
 388:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;
 389:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 390:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 391:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Ptr             _M_ptr;
 392:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 393:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 394:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 395:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 396:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }
 397:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 398:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 399:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 400:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }
 401:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 402:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<>
 403:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline void
 404:/usr/include/c++/9/bits/shared_ptr_base.h ****     _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }
 405:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 406:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<int _Nm, typename _Tp,
 407:/usr/include/c++/9/bits/shared_ptr_base.h **** 	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
 408:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct _Sp_ebo_helper;
 409:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 410:/usr/include/c++/9/bits/shared_ptr_base.h ****   /// Specialization using EBO.
 411:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<int _Nm, typename _Tp>
 412:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
 413:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 414:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 415:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 416:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 417:/usr/include/c++/9/bits/shared_ptr_base.h ****       static _Tp&
 418:/usr/include/c++/9/bits/shared_ptr_base.h ****       _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 419:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 420:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 421:/usr/include/c++/9/bits/shared_ptr_base.h ****   /// Specialization not using EBO.
 422:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<int _Nm, typename _Tp>
 423:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct _Sp_ebo_helper<_Nm, _Tp, false>
 424:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 425:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
 426:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }
 427:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 428:/usr/include/c++/9/bits/shared_ptr_base.h ****       static _Tp&
 429:/usr/include/c++/9/bits/shared_ptr_base.h ****       _S_get(_Sp_ebo_helper& __eboh)
 430:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return __eboh._M_tp; }
 431:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 432:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 433:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Tp _M_tp;
 434:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 435:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 436:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Support for custom deleter and/or allocator
 437:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
 438:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
 439:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 440:/usr/include/c++/9/bits/shared_ptr_base.h ****       class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
 441:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 442:/usr/include/c++/9/bits/shared_ptr_base.h **** 	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
 443:/usr/include/c++/9/bits/shared_ptr_base.h **** 	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;
 444:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 445:/usr/include/c++/9/bits/shared_ptr_base.h ****       public:
 446:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 447:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 448:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 449:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 450:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 451:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 452:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 453:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Ptr _M_ptr;
 454:/usr/include/c++/9/bits/shared_ptr_base.h ****       };
 455:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 456:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 457:/usr/include/c++/9/bits/shared_ptr_base.h ****       using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;
 458:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 459:/usr/include/c++/9/bits/shared_ptr_base.h ****       // __d(__p) must not throw.
 460:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 461:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_impl(__p, std::move(__d), _Alloc()) { }
 462:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 463:/usr/include/c++/9/bits/shared_ptr_base.h ****       // __d(__p) must not throw.
 464:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 465:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_impl(__p, std::move(__d), __a) { }
 466:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 467:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~_Sp_counted_deleter() noexcept { }
 468:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 469:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 470:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_dispose() noexcept
 471:/usr/include/c++/9/bits/shared_ptr_base.h ****       { _M_impl._M_del()(_M_impl._M_ptr); }
 472:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 473:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 474:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_destroy() noexcept
 475:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 476:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocator_type __a(_M_impl._M_alloc());
 477:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 478:/usr/include/c++/9/bits/shared_ptr_base.h **** 	this->~_Sp_counted_deleter();
 479:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 480:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 481:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void*
 482:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_deleter(const std::type_info& __ti) noexcept
 483:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 484:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 485:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 486:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// 2400. shared_ptr's get_deleter() should use addressof()
 487:/usr/include/c++/9/bits/shared_ptr_base.h ****         return __ti == typeid(_Deleter)
 488:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  ? std::__addressof(_M_impl._M_del())
 489:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  : nullptr;
 490:/usr/include/c++/9/bits/shared_ptr_base.h **** #else
 491:/usr/include/c++/9/bits/shared_ptr_base.h ****         return nullptr;
 492:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
 493:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 494:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 495:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 496:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Impl _M_impl;
 497:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 498:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 499:/usr/include/c++/9/bits/shared_ptr_base.h ****   // helpers for make_shared / allocate_shared
 500:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 501:/usr/include/c++/9/bits/shared_ptr_base.h ****   struct _Sp_make_shared_tag
 502:/usr/include/c++/9/bits/shared_ptr_base.h ****   {
 503:/usr/include/c++/9/bits/shared_ptr_base.h ****   private:
 504:/usr/include/c++/9/bits/shared_ptr_base.h ****     template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
 505:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend class _Sp_counted_ptr_inplace;
 506:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 507:/usr/include/c++/9/bits/shared_ptr_base.h ****     static const type_info&
 508:/usr/include/c++/9/bits/shared_ptr_base.h ****     _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 467              		.loc 5 508 5
 468              		.cfi_startproc
 469 0000 F30F1EFA 		endbr64	
 470 0004 55       		pushq	%rbp	#
 471              		.cfi_def_cfa_offset 16
 472              		.cfi_offset 6, -16
 473 0005 4889E5   		movq	%rsp, %rbp	#,
 474              		.cfi_def_cfa_register 6
 475              	# /usr/include/c++/9/bits/shared_ptr_base.h:511:       return reinterpret_cast<const type_info&>(__
 509:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 510:/usr/include/c++/9/bits/shared_ptr_base.h ****       alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
 511:/usr/include/c++/9/bits/shared_ptr_base.h ****       return reinterpret_cast<const type_info&>(__tag);
 476              		.loc 5 511 54
 477 0008 488D0500 		leaq	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag(%rip), %rax	#, _1
 477      000000
 478              	# /usr/include/c++/9/bits/shared_ptr_base.h:512:     }
 512:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 479              		.loc 5 512 5
 480 000f 5D       		popq	%rbp	#
 481              		.cfi_def_cfa 7, 8
 482 0010 C3       		ret	
 483              		.cfi_endproc
 484              	.LFE2063:
 486              		.section	.text._ZN7VisitorC2Ev,"axG",@progbits,_ZN7VisitorC5Ev,comdat
 487              		.align 2
 488              		.weak	_ZN7VisitorC2Ev
 490              	_ZN7VisitorC2Ev:
 491              	.LFB2419:
 492              		.file 6 "test.cpp"
   1:test.cpp      **** #include <iostream>
   2:test.cpp      **** #include <memory>
   3:test.cpp      **** 
   4:test.cpp      **** template<typename T>
   5:test.cpp      **** using spt = std::shared_ptr<T>;
   6:test.cpp      **** 
   7:test.cpp      **** struct Core;
   8:test.cpp      **** struct Complex;
   9:test.cpp      **** 
  10:test.cpp      **** using sCore = spt<Core>;
  11:test.cpp      **** using sComp = spt<Complex>;
  12:test.cpp      **** 
  13:test.cpp      **** struct Visitor{
  14:test.cpp      **** 	Visitor(){}
 493              		.loc 6 14 2
 494              		.cfi_startproc
 495 0000 F30F1EFA 		endbr64	
 496 0004 55       		pushq	%rbp	#
 497              		.cfi_def_cfa_offset 16
 498              		.cfi_offset 6, -16
 499 0005 4889E5   		movq	%rsp, %rbp	#,
 500              		.cfi_def_cfa_register 6
 501 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 502              	.LBB2:
 503              	# test.cpp:14: 	Visitor(){}
 504              		.loc 6 14 11
 505 000c 488D1500 		leaq	16+_ZTV7Visitor(%rip), %rdx	#, _1
 505      000000
 506 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 507 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Visitor
 508              	.LBE2:
 509              	# test.cpp:14: 	Visitor(){}
 510              		.loc 6 14 12
 511 001a 90       		nop	
 512 001b 5D       		popq	%rbp	#
 513              		.cfi_def_cfa 7, 8
 514 001c C3       		ret	
 515              		.cfi_endproc
 516              	.LFE2419:
 518              		.weak	_ZN7VisitorC1Ev
 519              		.set	_ZN7VisitorC1Ev,_ZN7VisitorC2Ev
 520              		.section	.text._ZN7VisitorD2Ev,"axG",@progbits,_ZN7VisitorD5Ev,comdat
 521              		.align 2
 522              		.weak	_ZN7VisitorD2Ev
 524              	_ZN7VisitorD2Ev:
 525              	.LFB2422:
  15:test.cpp      **** 	virtual ~Visitor(){}
 526              		.loc 6 15 10
 527              		.cfi_startproc
 528 0000 F30F1EFA 		endbr64	
 529 0004 55       		pushq	%rbp	#
 530              		.cfi_def_cfa_offset 16
 531              		.cfi_offset 6, -16
 532 0005 4889E5   		movq	%rsp, %rbp	#,
 533              		.cfi_def_cfa_register 6
 534 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 535              	.LBB3:
 536              	# test.cpp:15: 	virtual ~Visitor(){}
 537              		.loc 6 15 20
 538 000c 488D1500 		leaq	16+_ZTV7Visitor(%rip), %rdx	#, _1
 538      000000
 539 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 540 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Visitor
 541              	.LBE3:
 542              	# test.cpp:15: 	virtual ~Visitor(){}
 543              		.loc 6 15 21
 544 001a 90       		nop	
 545 001b 5D       		popq	%rbp	#
 546              		.cfi_def_cfa 7, 8
 547 001c C3       		ret	
 548              		.cfi_endproc
 549              	.LFE2422:
 551              		.weak	_ZN7VisitorD1Ev
 552              		.set	_ZN7VisitorD1Ev,_ZN7VisitorD2Ev
 553              		.section	.text._ZN7VisitorD0Ev,"axG",@progbits,_ZN7VisitorD5Ev,comdat
 554              		.align 2
 555              		.weak	_ZN7VisitorD0Ev
 557              	_ZN7VisitorD0Ev:
 558              	.LFB2424:
 559              		.loc 6 15 10
 560              		.cfi_startproc
 561 0000 F30F1EFA 		endbr64	
 562 0004 55       		pushq	%rbp	#
 563              		.cfi_def_cfa_offset 16
 564              		.cfi_offset 6, -16
 565 0005 4889E5   		movq	%rsp, %rbp	#,
 566              		.cfi_def_cfa_register 6
 567 0008 4883EC10 		subq	$16, %rsp	#,
 568 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 569              	# test.cpp:15: 	virtual ~Visitor(){}
 570              		.loc 6 15 21
 571 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 572 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 573 0017 E8000000 		call	_ZN7VisitorD1Ev	#
 573      00
 574 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 575 0020 BE080000 		movl	$8, %esi	#,
 575      00
 576 0025 4889C7   		movq	%rax, %rdi	# tmp83,
 577 0028 E8000000 		call	_ZdlPvm@PLT	#
 577      00
 578 002d C9       		leave	
 579              		.cfi_def_cfa 7, 8
 580 002e C3       		ret	
 581              		.cfi_endproc
 582              	.LFE2424:
 584              		.section	.text._ZN4CoreD2Ev,"axG",@progbits,_ZN4CoreD5Ev,comdat
 585              		.align 2
 586              		.weak	_ZN4CoreD2Ev
 588              	_ZN4CoreD2Ev:
 589              	.LFB2426:
  16:test.cpp      **** 	template<typename T>
  17:test.cpp      **** 	sCore add(T t, sCore c2);
  18:test.cpp      **** 	//sCore add(Complex c1, Complex c2);
  19:test.cpp      **** };
  20:test.cpp      **** 
  21:test.cpp      **** using sV = spt<Visitor>;
  22:test.cpp      **** 
  23:test.cpp      **** struct Core{
  24:test.cpp      **** 	//Core(){};
  25:test.cpp      **** 	virtual ~Core(){};
 590              		.loc 6 25 10
 591              		.cfi_startproc
 592 0000 F30F1EFA 		endbr64	
 593 0004 55       		pushq	%rbp	#
 594              		.cfi_def_cfa_offset 16
 595              		.cfi_offset 6, -16
 596 0005 4889E5   		movq	%rsp, %rbp	#,
 597              		.cfi_def_cfa_register 6
 598 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 599              	.LBB4:
 600              	# test.cpp:25: 	virtual ~Core(){};
 601              		.loc 6 25 17
 602 000c 488D1500 		leaq	16+_ZTV4Core(%rip), %rdx	#, _1
 602      000000
 603 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 604 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Core
 605              	.LBE4:
 606              	# test.cpp:25: 	virtual ~Core(){};
 607              		.loc 6 25 18
 608 001a 90       		nop	
 609 001b 5D       		popq	%rbp	#
 610              		.cfi_def_cfa 7, 8
 611 001c C3       		ret	
 612              		.cfi_endproc
 613              	.LFE2426:
 615              		.weak	_ZN4CoreD1Ev
 616              		.set	_ZN4CoreD1Ev,_ZN4CoreD2Ev
 617              		.section	.text._ZN4CoreD0Ev,"axG",@progbits,_ZN4CoreD5Ev,comdat
 618              		.align 2
 619              		.weak	_ZN4CoreD0Ev
 621              	_ZN4CoreD0Ev:
 622              	.LFB2428:
 623              		.loc 6 25 10
 624              		.cfi_startproc
 625 0000 F30F1EFA 		endbr64	
 626 0004 55       		pushq	%rbp	#
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 6, -16
 629 0005 4889E5   		movq	%rsp, %rbp	#,
 630              		.cfi_def_cfa_register 6
 631 0008 4883EC10 		subq	$16, %rsp	#,
 632 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 633              	# test.cpp:25: 	virtual ~Core(){};
 634              		.loc 6 25 18
 635 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 636 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 637 0017 E8000000 		call	_ZN4CoreD1Ev	#
 637      00
 638 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 639 0020 BE080000 		movl	$8, %esi	#,
 639      00
 640 0025 4889C7   		movq	%rax, %rdi	# tmp83,
 641 0028 E8000000 		call	_ZdlPvm@PLT	#
 641      00
 642 002d C9       		leave	
 643              		.cfi_def_cfa 7, 8
 644 002e C3       		ret	
 645              		.cfi_endproc
 646              	.LFE2428:
 648              		.section	.text._ZN4CoreC2Ev,"axG",@progbits,_ZN4CoreC5Ev,comdat
 649              		.align 2
 650              		.weak	_ZN4CoreC2Ev
 652              	_ZN4CoreC2Ev:
 653              	.LFB2431:
  23:test.cpp      **** 	//Core(){};
 654              		.loc 6 23 8
 655              		.cfi_startproc
 656 0000 F30F1EFA 		endbr64	
 657 0004 55       		pushq	%rbp	#
 658              		.cfi_def_cfa_offset 16
 659              		.cfi_offset 6, -16
 660 0005 4889E5   		movq	%rsp, %rbp	#,
 661              		.cfi_def_cfa_register 6
 662 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 663              	.LBB5:
 664              	# test.cpp:23: struct Core{
  23:test.cpp      **** 	//Core(){};
 665              		.loc 6 23 8
 666 000c 488D1500 		leaq	16+_ZTV4Core(%rip), %rdx	#, _1
 666      000000
 667 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 668 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Core
 669              	.LBE5:
 670 001a 90       		nop	
 671 001b 5D       		popq	%rbp	#
 672              		.cfi_def_cfa 7, 8
 673 001c C3       		ret	
 674              		.cfi_endproc
 675              	.LFE2431:
 677              		.weak	_ZN4CoreC1Ev
 678              		.set	_ZN4CoreC1Ev,_ZN4CoreC2Ev
 679              		.section	.text._ZN7ComplexD2Ev,"axG",@progbits,_ZN7ComplexD5Ev,comdat
 680              		.align 2
 681              		.weak	_ZN7ComplexD2Ev
 683              	_ZN7ComplexD2Ev:
 684              	.LFB2436:
  26:test.cpp      **** 	virtual void print()=0;
  27:test.cpp      **** 	virtual sCore add(Visitor v, sCore c)=0;
  28:test.cpp      **** 	virtual sCore _add(Complex c)=0;
  29:test.cpp      **** };
  30:test.cpp      **** 
  31:test.cpp      **** 
  32:test.cpp      **** struct Complex: Core{
  33:test.cpp      **** 	double real;
  34:test.cpp      **** 	double imag;
  35:test.cpp      **** 	Complex(){};
  36:test.cpp      **** 	virtual ~Complex(){};
 685              		.loc 6 36 10
 686              		.cfi_startproc
 687 0000 F30F1EFA 		endbr64	
 688 0004 55       		pushq	%rbp	#
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 6, -16
 691 0005 4889E5   		movq	%rsp, %rbp	#,
 692              		.cfi_def_cfa_register 6
 693 0008 4883EC10 		subq	$16, %rsp	#,
 694 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 695              	.LBB6:
 696              	# test.cpp:36: 	virtual ~Complex(){};
 697              		.loc 6 36 20
 698 0010 488D1500 		leaq	16+_ZTV7Complex(%rip), %rdx	#, _1
 698      000000
 699 0017 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 700 001b 488910   		movq	%rdx, (%rax)	# _1, this_4(D)->D.46476._vptr.Core
 701 001e 488B45F8 		movq	-8(%rbp), %rax	# this, _2
 702 0022 4889C7   		movq	%rax, %rdi	# _2,
 703 0025 E8000000 		call	_ZN4CoreD2Ev	#
 703      00
 704              	.LBE6:
 705              	# test.cpp:36: 	virtual ~Complex(){};
 706              		.loc 6 36 21
 707 002a 90       		nop	
 708 002b C9       		leave	
 709              		.cfi_def_cfa 7, 8
 710 002c C3       		ret	
 711              		.cfi_endproc
 712              	.LFE2436:
 714              		.weak	_ZN7ComplexD1Ev
 715              		.set	_ZN7ComplexD1Ev,_ZN7ComplexD2Ev
 716              		.section	.text._ZN7ComplexD0Ev,"axG",@progbits,_ZN7ComplexD5Ev,comdat
 717              		.align 2
 718              		.weak	_ZN7ComplexD0Ev
 720              	_ZN7ComplexD0Ev:
 721              	.LFB2438:
 722              		.loc 6 36 10
 723              		.cfi_startproc
 724 0000 F30F1EFA 		endbr64	
 725 0004 55       		pushq	%rbp	#
 726              		.cfi_def_cfa_offset 16
 727              		.cfi_offset 6, -16
 728 0005 4889E5   		movq	%rsp, %rbp	#,
 729              		.cfi_def_cfa_register 6
 730 0008 4883EC10 		subq	$16, %rsp	#,
 731 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 732              	# test.cpp:36: 	virtual ~Complex(){};
 733              		.loc 6 36 21
 734 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 735 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 736 0017 E8000000 		call	_ZN7ComplexD1Ev	#
 736      00
 737 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 738 0020 BE180000 		movl	$24, %esi	#,
 738      00
 739 0025 4889C7   		movq	%rax, %rdi	# tmp83,
 740 0028 E8000000 		call	_ZdlPvm@PLT	#
 740      00
 741 002d C9       		leave	
 742              		.cfi_def_cfa 7, 8
 743 002e C3       		ret	
 744              		.cfi_endproc
 745              	.LFE2438:
 747              		.section	.text._ZN7ComplexC2Edd,"axG",@progbits,_ZN7ComplexC5Edd,comdat
 748              		.align 2
 749              		.weak	_ZN7ComplexC2Edd
 751              	_ZN7ComplexC2Edd:
 752              	.LFB2440:
  37:test.cpp      **** 	Complex(double _real, double _imag=0.0){
 753              		.loc 6 37 2
 754              		.cfi_startproc
 755 0000 F30F1EFA 		endbr64	
 756 0004 55       		pushq	%rbp	#
 757              		.cfi_def_cfa_offset 16
 758              		.cfi_offset 6, -16
 759 0005 4889E5   		movq	%rsp, %rbp	#,
 760              		.cfi_def_cfa_register 6
 761 0008 4883EC20 		subq	$32, %rsp	#,
 762 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 763 0010 F20F1145 		movsd	%xmm0, -16(%rbp)	# _real, _real
 763      F0
 764 0015 F20F114D 		movsd	%xmm1, -24(%rbp)	# _imag, _imag
 764      E8
 765              	.LBB7:
 766              	# test.cpp:37: 	Complex(double _real, double _imag=0.0){
 767              		.loc 6 37 41
 768 001a 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 769 001e 4889C7   		movq	%rax, %rdi	# _1,
 770 0021 E8000000 		call	_ZN4CoreC2Ev	#
 770      00
 771 0026 488D1500 		leaq	16+_ZTV7Complex(%rip), %rdx	#, _2
 771      000000
 772 002d 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 773 0031 488910   		movq	%rdx, (%rax)	# _2, this_5(D)->D.46476._vptr.Core
 774              	# test.cpp:38: 		real = _real;
  38:test.cpp      **** 		real = _real;
 775              		.loc 6 38 8
 776 0034 488B45F8 		movq	-8(%rbp), %rax	# this, tmp86
 777 0038 F20F1045 		movsd	-16(%rbp), %xmm0	# _real, tmp87
 777      F0
 778 003d F20F1140 		movsd	%xmm0, 8(%rax)	# tmp87, this_5(D)->real
 778      08
 779              	# test.cpp:39: 		imag = _imag;
  39:test.cpp      **** 		imag = _imag;
 780              		.loc 6 39 8
 781 0042 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 782 0046 F20F1045 		movsd	-24(%rbp), %xmm0	# _imag, tmp89
 782      E8
 783 004b F20F1140 		movsd	%xmm0, 16(%rax)	# tmp89, this_5(D)->imag
 783      10
 784              	.LBE7:
 785              	# test.cpp:40: 	};
  40:test.cpp      **** 	};
 786              		.loc 6 40 2
 787 0050 90       		nop	
 788 0051 C9       		leave	
 789              		.cfi_def_cfa 7, 8
 790 0052 C3       		ret	
 791              		.cfi_endproc
 792              	.LFE2440:
 794              		.weak	_ZN7ComplexC1Edd
 795              		.set	_ZN7ComplexC1Edd,_ZN7ComplexC2Edd
 796              		.section	.text._ZN4CoreC2ERKS_,"axG",@progbits,_ZN4CoreC5ERKS_,comdat
 797              		.align 2
 798              		.weak	_ZN4CoreC2ERKS_
 800              	_ZN4CoreC2ERKS_:
 801              	.LFB2445:
  23:test.cpp      **** 	//Core(){};
 802              		.loc 6 23 8
 803              		.cfi_startproc
 804 0000 F30F1EFA 		endbr64	
 805 0004 55       		pushq	%rbp	#
 806              		.cfi_def_cfa_offset 16
 807              		.cfi_offset 6, -16
 808 0005 4889E5   		movq	%rsp, %rbp	#,
 809              		.cfi_def_cfa_register 6
 810 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 811 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.46497, D.46497
 812              	.LBB8:
 813              	# test.cpp:23: struct Core{
  23:test.cpp      **** 	//Core(){};
 814              		.loc 6 23 8
 815 0010 488D1500 		leaq	16+_ZTV4Core(%rip), %rdx	#, _1
 815      000000
 816 0017 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 817 001b 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Core
 818              	.LBE8:
 819 001e 90       		nop	
 820 001f 5D       		popq	%rbp	#
 821              		.cfi_def_cfa 7, 8
 822 0020 C3       		ret	
 823              		.cfi_endproc
 824              	.LFE2445:
 826              		.weak	_ZN4CoreC1ERKS_
 827              		.set	_ZN4CoreC1ERKS_,_ZN4CoreC2ERKS_
 828              		.section	.text._ZN7ComplexC2ERKS_,"axG",@progbits,_ZN7ComplexC5ERKS_,comdat
 829              		.align 2
 830              		.weak	_ZN7ComplexC2ERKS_
 832              	_ZN7ComplexC2ERKS_:
 833              	.LFB2447:
  32:test.cpp      **** 	double real;
 834              		.loc 6 32 8
 835              		.cfi_startproc
 836 0000 F30F1EFA 		endbr64	
 837 0004 55       		pushq	%rbp	#
 838              		.cfi_def_cfa_offset 16
 839              		.cfi_offset 6, -16
 840 0005 4889E5   		movq	%rsp, %rbp	#,
 841              		.cfi_def_cfa_register 6
 842 0008 4883EC10 		subq	$16, %rsp	#,
 843 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 844 0010 488975F0 		movq	%rsi, -16(%rbp)	# D.47984, D.47984
 845              	.LBB9:
 846              	# test.cpp:32: struct Complex: Core{
  32:test.cpp      **** 	double real;
 847              		.loc 6 32 8
 848 0014 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 849 0018 488B55F0 		movq	-16(%rbp), %rdx	# D.47984, _2
 850 001c 4889D6   		movq	%rdx, %rsi	# _2,
 851 001f 4889C7   		movq	%rax, %rdi	# _1,
 852 0022 E8000000 		call	_ZN4CoreC2ERKS_	#
 852      00
 853 0027 488D1500 		leaq	16+_ZTV7Complex(%rip), %rdx	#, _3
 853      000000
 854 002e 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 855 0032 488910   		movq	%rdx, (%rax)	# _3, this_8(D)->D.46476._vptr.Core
 856 0035 488B45F0 		movq	-16(%rbp), %rax	# D.47984, tmp89
 857 0039 F20F1040 		movsd	8(%rax), %xmm0	# _10(D)->real, _4
 857      08
 858 003e 488B45F8 		movq	-8(%rbp), %rax	# this, tmp90
 859 0042 F20F1140 		movsd	%xmm0, 8(%rax)	# _4, this_8(D)->real
 859      08
 860 0047 488B45F0 		movq	-16(%rbp), %rax	# D.47984, tmp91
 861 004b F20F1040 		movsd	16(%rax), %xmm0	# _10(D)->imag, _5
 861      10
 862 0050 488B45F8 		movq	-8(%rbp), %rax	# this, tmp92
 863 0054 F20F1140 		movsd	%xmm0, 16(%rax)	# _5, this_8(D)->imag
 863      10
 864              	.LBE9:
 865 0059 90       		nop	
 866 005a C9       		leave	
 867              		.cfi_def_cfa 7, 8
 868 005b C3       		ret	
 869              		.cfi_endproc
 870              	.LFE2447:
 872              		.weak	_ZN7ComplexC1ERKS_
 873              		.set	_ZN7ComplexC1ERKS_,_ZN7ComplexC2ERKS_
 874              		.section	.text._ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2ERKS3_,"axG",@progbits,_ZN
 875              		.align 2
 876              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2ERKS3_
 878              	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2ERKS3_:
 879              	.LFB2451:
 513:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 514:/usr/include/c++/9/bits/shared_ptr_base.h ****     static bool _S_eq(const type_info&) noexcept;
 515:/usr/include/c++/9/bits/shared_ptr_base.h ****   };
 516:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 517:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Alloc>
 518:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct _Sp_alloc_shared_tag
 519:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 520:/usr/include/c++/9/bits/shared_ptr_base.h ****       const _Alloc& _M_a;
 521:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 522:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 523:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
 524:/usr/include/c++/9/bits/shared_ptr_base.h ****     class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
 525:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 526:/usr/include/c++/9/bits/shared_ptr_base.h ****       class _Impl : _Sp_ebo_helper<0, _Alloc>
 527:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 528:/usr/include/c++/9/bits/shared_ptr_base.h **** 	typedef _Sp_ebo_helper<0, _Alloc>	_A_base;
 529:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 530:/usr/include/c++/9/bits/shared_ptr_base.h ****       public:
 531:/usr/include/c++/9/bits/shared_ptr_base.h **** 	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 532:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 533:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 534:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 535:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__gnu_cxx::__aligned_buffer<_Tp> _M_storage;
 536:/usr/include/c++/9/bits/shared_ptr_base.h ****       };
 537:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 538:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 539:/usr/include/c++/9/bits/shared_ptr_base.h ****       using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;
 540:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 541:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Alloc parameter is not a reference so doesn't alias anything in __args
 542:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename... _Args>
 543:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 544:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_impl(__a)
 545:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 546:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 547:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // 2070.  allocate_shared should use allocator_traits<A>::construct
 548:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 549:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      std::forward<_Args>(__args)...); // might throw
 550:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 551:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 552:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~_Sp_counted_ptr_inplace() noexcept { }
 553:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 554:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 555:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_dispose() noexcept
 556:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 557:/usr/include/c++/9/bits/shared_ptr_base.h **** 	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 558:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 559:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 560:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Override because the allocator needs to know the dynamic type
 561:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void
 562:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_destroy() noexcept
 563:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 564:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocator_type __a(_M_impl._M_alloc());
 565:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 566:/usr/include/c++/9/bits/shared_ptr_base.h **** 	this->~_Sp_counted_ptr_inplace();
 567:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 568:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 569:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 570:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend class __shared_count<_Lp>; // To be able to call _M_ptr().
 571:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 572:/usr/include/c++/9/bits/shared_ptr_base.h ****       // No longer used, but code compiled against old libstdc++ headers
 573:/usr/include/c++/9/bits/shared_ptr_base.h ****       // might still call it from __shared_ptr ctor to get the pointer out.
 574:/usr/include/c++/9/bits/shared_ptr_base.h ****       virtual void*
 575:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_deleter(const std::type_info& __ti) noexcept override
 576:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 577:/usr/include/c++/9/bits/shared_ptr_base.h **** 	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 578:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// Check for the fake type_info first, so we don't try to access it
 579:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// as a real type_info object. Otherwise, check if it's the real
 580:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// type_info for this class. With RTTI enabled we can check directly,
 581:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// or call a library function to do it.
 582:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 583:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    ||
 584:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 585:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    __ti == typeid(_Sp_make_shared_tag)
 586:/usr/include/c++/9/bits/shared_ptr_base.h **** #else
 587:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_make_shared_tag::_S_eq(__ti)
 588:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
 589:/usr/include/c++/9/bits/shared_ptr_base.h **** 	   )
 590:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return __ptr;
 591:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return nullptr;
 592:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 593:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 594:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 595:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 596:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Impl _M_impl;
 597:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 598:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 599:/usr/include/c++/9/bits/shared_ptr_base.h ****   // The default deleter for shared_ptr<T[]> and shared_ptr<T[N]>.
 600:/usr/include/c++/9/bits/shared_ptr_base.h ****   struct __sp_array_delete
 601:/usr/include/c++/9/bits/shared_ptr_base.h ****   {
 602:/usr/include/c++/9/bits/shared_ptr_base.h ****     template<typename _Yp>
 603:/usr/include/c++/9/bits/shared_ptr_base.h ****       void operator()(_Yp* __p) const { delete[] __p; }
 604:/usr/include/c++/9/bits/shared_ptr_base.h ****   };
 605:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 606:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp>
 607:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_count
 608:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 609:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp>
 610:/usr/include/c++/9/bits/shared_ptr_base.h **** 	struct __not_alloc_shared_tag { using type = void; };
 611:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 612:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp>
 613:/usr/include/c++/9/bits/shared_ptr_base.h **** 	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };
 614:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 615:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 616:/usr/include/c++/9/bits/shared_ptr_base.h ****       constexpr __shared_count() noexcept : _M_pi(0)
 617:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 618:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 619:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Ptr>
 620:/usr/include/c++/9/bits/shared_ptr_base.h ****         explicit
 621:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Ptr __p) : _M_pi(0)
 622:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 623:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __try
 624:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    {
 625:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 626:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    }
 627:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __catch(...)
 628:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    {
 629:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      delete __p;
 630:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      __throw_exception_again;
 631:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    }
 632:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 633:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 634:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Ptr>
 635:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Ptr __p, /* is_array = */ false_type)
 636:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: __shared_count(__p)
 637:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 638:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 639:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Ptr>
 640:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Ptr __p, /* is_array = */ true_type)
 641:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: __shared_count(__p, __sp_array_delete{}, allocator<void>())
 642:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 643:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 644:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Ptr, typename _Deleter,
 645:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename = typename __not_alloc_shared_tag<_Deleter>::type>
 646:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Ptr __p, _Deleter __d)
 647:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: __shared_count(__p, std::move(__d), allocator<void>())
 648:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 649:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 650:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Ptr, typename _Deleter, typename _Alloc,
 651:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename = typename __not_alloc_shared_tag<_Deleter>::type>
 652:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 653:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 654:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
 655:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __try
 656:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    {
 657:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      typename _Sp_cd_type::__allocator_type __a2(__a);
 658:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      auto __guard = std::__allocate_guarded(__a2);
 659:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      _Sp_cd_type* __mem = __guard.get();
 660:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 661:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      _M_pi = __mem;
 662:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      __guard = nullptr;
 663:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    }
 664:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __catch(...)
 665:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    {
 666:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      __d(__p); // Call _Deleter on __p.
 667:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      __throw_exception_again;
 668:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    }
 669:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 670:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 671:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp, typename _Alloc, typename... _Args>
 672:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 673:/usr/include/c++/9/bits/shared_ptr_base.h **** 		       _Args&&... __args)
 674:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 675:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
 676:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 677:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __guard = std::__allocate_guarded(__a2);
 678:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Sp_cp_type* __mem = __guard.get();
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __pi = ::new (__mem)
 680:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 681:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __guard = nullptr;
 682:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi = __pi;
 683:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __p = __pi->_M_ptr();
 684:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 685:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 686:/usr/include/c++/9/bits/shared_ptr_base.h **** #if _GLIBCXX_USE_DEPRECATED
 687:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic push
 688:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 689:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Special case for auto_ptr<_Tp> to provide the strong guarantee.
 690:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp>
 691:/usr/include/c++/9/bits/shared_ptr_base.h ****         explicit
 692:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(std::auto_ptr<_Tp>&& __r);
 693:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic pop
 694:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
 695:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 696:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Special case for unique_ptr<_Tp,_Del> to provide the strong guarantee.
 697:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp, typename _Del>
 698:/usr/include/c++/9/bits/shared_ptr_base.h ****         explicit
 699:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 700:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 701:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 702:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // 2415. Inconsistency between unique_ptr and shared_ptr
 703:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  if (__r.get() == nullptr)
 704:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    return;
 705:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 706:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
 707:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  using _Del2 = typename conditional<is_reference<_Del>::value,
 708:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      reference_wrapper<typename remove_reference<_Del>::type>,
 709:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      _Del>::type;
 710:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  using _Sp_cd_type
 711:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
 712:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  using _Alloc = allocator<_Sp_cd_type>;
 713:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  using _Alloc_traits = allocator_traits<_Alloc>;
 714:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Alloc __a;
 715:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 716:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Alloc_traits::construct(__a, __mem, __r.release(),
 717:/usr/include/c++/9/bits/shared_ptr_base.h **** 				   __r.get_deleter());  // non-throwing
 718:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi = __mem;
 719:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 720:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 721:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Throw bad_weak_ptr when __r._M_get_use_count() == 0.
 722:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit __shared_count(const __weak_count<_Lp>& __r);
 723:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 724:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Does not throw if __r._M_get_use_count() == 0, caller must check.
 725:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
 726:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 727:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~__shared_count() noexcept
 728:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 729:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 730:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_release();
 731:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 732:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 733:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_count(const __shared_count& __r) noexcept
 734:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_pi(__r._M_pi)
 735:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 736:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != 0)
 737:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_add_ref_copy();
 738:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 739:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 740:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_count&
 741:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator=(const __shared_count& __r) noexcept
 742:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 743:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 744:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (__tmp != _M_pi)
 745:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 746:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    if (__tmp != 0)
 747:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      __tmp->_M_add_ref_copy();
 748:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    if (_M_pi != 0)
 749:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      _M_pi->_M_release();
 750:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _M_pi = __tmp;
 751:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  }
 752:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *this;
 753:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 754:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 755:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 756:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_swap(__shared_count& __r) noexcept
 757:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 758:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 759:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__r._M_pi = _M_pi;
 760:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 761:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 762:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 763:/usr/include/c++/9/bits/shared_ptr_base.h ****       long
 764:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_use_count() const noexcept
 765:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }
 766:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 767:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 768:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_unique() const noexcept
 769:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return this->_M_get_use_count() == 1; }
 770:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 771:/usr/include/c++/9/bits/shared_ptr_base.h ****       void*
 772:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_deleter(const std::type_info& __ti) const noexcept
 773:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }
 774:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 775:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 776:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_less(const __shared_count& __rhs) const noexcept
 777:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }
 778:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 779:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 780:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_less(const __weak_count<_Lp>& __rhs) const noexcept
 781:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }
 782:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 783:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Friend function injected into enclosing namespace and found by ADL
 784:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend inline bool
 785:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator==(const __shared_count& __a, const __shared_count& __b) noexcept
 786:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return __a._M_pi == __b._M_pi; }
 787:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 788:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 789:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend class __weak_count<_Lp>;
 790:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 791:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_base<_Lp>*  _M_pi;
 792:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 793:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 794:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 795:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp>
 796:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __weak_count
 797:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 798:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
 799:/usr/include/c++/9/bits/shared_ptr_base.h ****       constexpr __weak_count() noexcept : _M_pi(nullptr)
 800:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 801:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 802:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count(const __shared_count<_Lp>& __r) noexcept
 803:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_pi(__r._M_pi)
 804:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 805:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 806:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_add_ref();
 807:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 808:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 809:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count(const __weak_count& __r) noexcept
 810:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_pi(__r._M_pi)
 811:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 812:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 813:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_add_ref();
 814:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 815:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 816:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count(__weak_count&& __r) noexcept
 817:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_pi(__r._M_pi)
 818:/usr/include/c++/9/bits/shared_ptr_base.h ****       { __r._M_pi = nullptr; }
 819:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 820:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~__weak_count() noexcept
 821:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 822:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 823:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_release();
 824:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 825:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 826:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count&
 827:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator=(const __shared_count<_Lp>& __r) noexcept
 828:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 829:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 830:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (__tmp != nullptr)
 831:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __tmp->_M_weak_add_ref();
 832:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 833:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_release();
 834:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 835:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *this;
 836:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 837:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 838:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count&
 839:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator=(const __weak_count& __r) noexcept
 840:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 841:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 842:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (__tmp != nullptr)
 843:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __tmp->_M_weak_add_ref();
 844:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 845:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_release();
 846:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 847:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *this;
 848:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 849:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 850:/usr/include/c++/9/bits/shared_ptr_base.h ****       __weak_count&
 851:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator=(__weak_count&& __r) noexcept
 852:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 853:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (_M_pi != nullptr)
 854:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_weak_release();
 855:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __r._M_pi;
 856:/usr/include/c++/9/bits/shared_ptr_base.h ****         __r._M_pi = nullptr;
 857:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *this;
 858:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 859:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 860:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
 861:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_swap(__weak_count& __r) noexcept
 862:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 863:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 864:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__r._M_pi = _M_pi;
 865:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 866:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 867:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 868:/usr/include/c++/9/bits/shared_ptr_base.h ****       long
 869:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get_use_count() const noexcept
 870:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 871:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 872:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 873:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_less(const __weak_count& __rhs) const noexcept
 874:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }
 875:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 876:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
 877:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_less(const __shared_count<_Lp>& __rhs) const noexcept
 878:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }
 879:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 880:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Friend function injected into enclosing namespace and found by ADL
 881:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend inline bool
 882:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator==(const __weak_count& __a, const __weak_count& __b) noexcept
 883:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return __a._M_pi == __b._M_pi; }
 884:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 885:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
 886:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend class __shared_count<_Lp>;
 887:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 888:/usr/include/c++/9/bits/shared_ptr_base.h ****       _Sp_counted_base<_Lp>*  _M_pi;
 889:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 890:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 891:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Now that __weak_count is defined we can define this constructor:
 892:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp>
 893:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline
 894:/usr/include/c++/9/bits/shared_ptr_base.h ****     __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 895:/usr/include/c++/9/bits/shared_ptr_base.h ****     : _M_pi(__r._M_pi)
 896:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 897:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (_M_pi != nullptr)
 898:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi->_M_add_ref_lock();
 899:/usr/include/c++/9/bits/shared_ptr_base.h ****       else
 900:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__throw_bad_weak_ptr();
 901:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 902:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 903:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Now that __weak_count is defined we can define this constructor:
 904:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<_Lock_policy _Lp>
 905:/usr/include/c++/9/bits/shared_ptr_base.h ****     inline
 906:/usr/include/c++/9/bits/shared_ptr_base.h ****     __shared_count<_Lp>::
 907:/usr/include/c++/9/bits/shared_ptr_base.h ****     __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
 908:/usr/include/c++/9/bits/shared_ptr_base.h ****     : _M_pi(__r._M_pi)
 909:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 910:/usr/include/c++/9/bits/shared_ptr_base.h ****       if (_M_pi != nullptr)
 911:/usr/include/c++/9/bits/shared_ptr_base.h **** 	if (!_M_pi->_M_add_ref_lock_nothrow())
 912:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi = nullptr;
 913:/usr/include/c++/9/bits/shared_ptr_base.h ****     }
 914:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 915:/usr/include/c++/9/bits/shared_ptr_base.h **** #define __cpp_lib_shared_ptr_arrays 201611L
 916:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 917:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Helper traits for shared_ptr of array:
 918:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 919:/usr/include/c++/9/bits/shared_ptr_base.h ****   // A pointer type Y* is said to be compatible with a pointer type T* when
 920:/usr/include/c++/9/bits/shared_ptr_base.h ****   // either Y* is convertible to T* or Y is U[N] and T is U cv [].
 921:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Yp_ptr, typename _Tp_ptr>
 922:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with
 923:/usr/include/c++/9/bits/shared_ptr_base.h ****     : false_type
 924:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 925:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 926:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Yp, typename _Tp>
 927:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with<_Yp*, _Tp*>
 928:/usr/include/c++/9/bits/shared_ptr_base.h ****     : is_convertible<_Yp*, _Tp*>::type
 929:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 930:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 931:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm>
 932:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
 933:/usr/include/c++/9/bits/shared_ptr_base.h ****     : true_type
 934:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 935:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 936:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm>
 937:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
 938:/usr/include/c++/9/bits/shared_ptr_base.h ****     : true_type
 939:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 940:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 941:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm>
 942:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
 943:/usr/include/c++/9/bits/shared_ptr_base.h ****     : true_type
 944:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 945:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 946:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm>
 947:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
 948:/usr/include/c++/9/bits/shared_ptr_base.h ****     : true_type
 949:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 950:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 951:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Test conversion from Y(*)[N] to U(*)[N] without forming invalid type Y[N].
 952:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm, typename _Yp, typename = void>
 953:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible_arrN
 954:/usr/include/c++/9/bits/shared_ptr_base.h ****     : false_type
 955:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 956:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 957:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm, typename _Yp>
 958:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
 959:/usr/include/c++/9/bits/shared_ptr_base.h ****     : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
 960:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 961:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 962:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Test conversion from Y(*)[] to U(*)[] without forming invalid type Y[].
 963:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, typename _Yp, typename = void>
 964:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible_arr
 965:/usr/include/c++/9/bits/shared_ptr_base.h ****     : false_type
 966:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 967:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 968:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, typename _Yp>
 969:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
 970:/usr/include/c++/9/bits/shared_ptr_base.h ****     : is_convertible<_Yp(*)[], _Up(*)[]>::type
 971:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 972:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 973:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Trait to check if shared_ptr<T> can be constructed from Y*.
 974:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, typename _Yp>
 975:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible;
 976:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 977:/usr/include/c++/9/bits/shared_ptr_base.h ****   // When T is U[N], Y(*)[N] shall be convertible to T*;
 978:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, size_t _Nm, typename _Yp>
 979:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible<_Up[_Nm], _Yp>
 980:/usr/include/c++/9/bits/shared_ptr_base.h ****     : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
 981:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 982:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 983:/usr/include/c++/9/bits/shared_ptr_base.h ****   // when T is U[], Y(*)[] shall be convertible to T*;
 984:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Up, typename _Yp>
 985:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible<_Up[], _Yp>
 986:/usr/include/c++/9/bits/shared_ptr_base.h ****     : __sp_is_constructible_arr<_Up, _Yp>::type
 987:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 988:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 989:/usr/include/c++/9/bits/shared_ptr_base.h ****   // otherwise, Y* shall be convertible to T*.
 990:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, typename _Yp>
 991:/usr/include/c++/9/bits/shared_ptr_base.h ****     struct __sp_is_constructible
 992:/usr/include/c++/9/bits/shared_ptr_base.h ****     : is_convertible<_Yp*, _Tp*>::type
 993:/usr/include/c++/9/bits/shared_ptr_base.h ****     { };
 994:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 995:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 996:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Define operator* and operator-> for shared_ptr<T>.
 997:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp,
 998:/usr/include/c++/9/bits/shared_ptr_base.h **** 	   bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
 999:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_ptr_access
1000:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
1001:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1002:/usr/include/c++/9/bits/shared_ptr_base.h ****       using element_type = _Tp;
1003:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1004:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type&
1005:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator*() const noexcept
1006:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1007:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__glibcxx_assert(_M_get() != nullptr);
1008:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *_M_get();
1009:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1010:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1011:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1012:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator->() const noexcept
1013:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1014:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_get() != nullptr);
1015:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return _M_get();
1016:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1017:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1018:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
1019:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1020:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get() const noexcept
1021:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
1022:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
1023:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1024:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Define operator-> for shared_ptr<cv void>.
1025:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp>
1026:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_ptr_access<_Tp, _Lp, false, true>
1027:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
1028:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1029:/usr/include/c++/9/bits/shared_ptr_base.h ****       using element_type = _Tp;
1030:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1031:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1032:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator->() const noexcept
1033:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1034:/usr/include/c++/9/bits/shared_ptr_base.h **** 	auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
1035:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__ptr != nullptr);
1036:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return __ptr;
1037:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1038:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
1039:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1040:/usr/include/c++/9/bits/shared_ptr_base.h ****   // Define operator[] for shared_ptr<T[]> and shared_ptr<T[N]>.
1041:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp>
1042:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_ptr_access<_Tp, _Lp, true, false>
1043:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
1044:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1045:/usr/include/c++/9/bits/shared_ptr_base.h ****       using element_type = typename remove_extent<_Tp>::type;
1046:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1047:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cplusplus <= 201402L
1048:/usr/include/c++/9/bits/shared_ptr_base.h ****       [[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]]
1049:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type&
1050:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator*() const noexcept
1051:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1052:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__glibcxx_assert(_M_get() != nullptr);
1053:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *_M_get();
1054:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1055:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1056:/usr/include/c++/9/bits/shared_ptr_base.h ****       [[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]]
1057:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1058:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator->() const noexcept
1059:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1060:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_get() != nullptr);
1061:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return _M_get();
1062:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1063:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
1064:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1065:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type&
1066:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator[](ptrdiff_t __i) const
1067:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1068:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__glibcxx_assert(_M_get() != nullptr);
1069:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__glibcxx_assert(!extent<_Tp>::value || __i < extent<_Tp>::value);
1070:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return _M_get()[__i];
1071:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1072:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1073:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
1074:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1075:/usr/include/c++/9/bits/shared_ptr_base.h ****       _M_get() const noexcept
1076:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
1077:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
1078:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1079:/usr/include/c++/9/bits/shared_ptr_base.h ****   template<typename _Tp, _Lock_policy _Lp>
1080:/usr/include/c++/9/bits/shared_ptr_base.h ****     class __shared_ptr
1081:/usr/include/c++/9/bits/shared_ptr_base.h ****     : public __shared_ptr_access<_Tp, _Lp>
1082:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
1083:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1084:/usr/include/c++/9/bits/shared_ptr_base.h ****       using element_type = typename remove_extent<_Tp>::type;
1085:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1086:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
1087:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Constraint for taking ownership of a pointer of type _Yp*:
1088:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1089:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using _SafeConv
1090:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;
1091:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1092:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Constraint for construction from shared_ptr and weak_ptr:
1093:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Res = void>
1094:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using _Compatible = typename
1095:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;
1096:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1097:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Constraint for assignment from shared_ptr and weak_ptr:
1098:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1099:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using _Assignable = _Compatible<_Yp, __shared_ptr&>;
1100:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1101:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Constraint for construction from unique_ptr:
1102:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Del, typename _Res = void,
1103:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
1104:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using _UniqCompatible = typename enable_if<__and_<
1105:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>
1106:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  >::value, _Res>::type;
1107:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1108:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Constraint for assignment from unique_ptr:
1109:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Del>
1110:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;
1111:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1112:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1113:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1114:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cplusplus > 201402L
1115:/usr/include/c++/9/bits/shared_ptr_base.h ****       using weak_type = __weak_ptr<_Tp, _Lp>;
1116:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
1117:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1118:/usr/include/c++/9/bits/shared_ptr_base.h ****       constexpr __shared_ptr() noexcept
1119:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_ptr(0), _M_refcount()
1120:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
1121:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1122:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = _SafeConv<_Yp>>
1123:/usr/include/c++/9/bits/shared_ptr_base.h **** 	explicit
1124:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(_Yp* __p)
1125:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
1126:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1127:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  static_assert( !is_void<_Yp>::value, "incomplete type" );
1128:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  static_assert( sizeof(_Yp) > 0, "incomplete type" );
1129:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_enable_shared_from_this_with(__p);
1130:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1131:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1132:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
1133:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(_Yp* __p, _Deleter __d)
1134:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__p), _M_refcount(__p, std::move(__d))
1135:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1136:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
1137:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      "deleter expression d(p) is well-formed");
1138:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_enable_shared_from_this_with(__p);
1139:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1140:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1141:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Deleter, typename _Alloc,
1142:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename = _SafeConv<_Yp>>
1143:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
1144:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
1145:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1146:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
1147:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      "deleter expression d(p) is well-formed");
1148:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_enable_shared_from_this_with(__p);
1149:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1150:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1151:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Deleter>
1152:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(nullptr_t __p, _Deleter __d)
1153:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(0), _M_refcount(__p, std::move(__d))
1154:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
1155:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1156:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Deleter, typename _Alloc>
1157:/usr/include/c++/9/bits/shared_ptr_base.h ****         __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
1158:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
1159:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
1160:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1161:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1162:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
1163:/usr/include/c++/9/bits/shared_ptr_base.h **** 		     element_type* __p) noexcept
1164:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
1165:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
1166:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1167:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_ptr(const __shared_ptr&) noexcept = default;
 880              		.loc 5 1167 7
 881              		.cfi_startproc
 882 0000 F30F1EFA 		endbr64	
 883 0004 55       		pushq	%rbp	#
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 6, -16
 886 0005 4889E5   		movq	%rsp, %rbp	#,
 887              		.cfi_def_cfa_register 6
 888 0008 4883EC10 		subq	$16, %rsp	#,
 889 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 890 0010 488975F0 		movq	%rsi, -16(%rbp)	# D.47353, D.47353
 891              	.LBB10:
 892              	# /usr/include/c++/9/bits/shared_ptr_base.h:1167:       __shared_ptr(const __shared_ptr&) noexcept 
 893              		.loc 5 1167 7
 894 0014 488B45F0 		movq	-16(%rbp), %rax	# D.47353, tmp86
 895 0018 488B10   		movq	(%rax), %rdx	# _8(D)->_M_ptr, _1
 896 001b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp87
 897 001f 488910   		movq	%rdx, (%rax)	# _1, this_6(D)->_M_ptr
 898 0022 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 899 0026 4883C008 		addq	$8, %rax	#, _2
 900 002a 488B55F0 		movq	-16(%rbp), %rdx	# D.47353, tmp89
 901 002e 4883C208 		addq	$8, %rdx	#, _3
 902 0032 4889D6   		movq	%rdx, %rsi	# _3,
 903 0035 4889C7   		movq	%rax, %rdi	# _2,
 904 0038 E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_	#
 904      00
 905              	.LBE10:
 906 003d 90       		nop	
 907 003e C9       		leave	
 908              		.cfi_def_cfa 7, 8
 909 003f C3       		ret	
 910              		.cfi_endproc
 911              	.LFE2451:
 913              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1ERKS3_
 914              		.set	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1ERKS3_,_ZNSt12__shared_ptrI4CoreLN9_
 915              		.section	.text._ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED2Ev,"axG",@progbits,_ZNSt12
 916              		.align 2
 917              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED2Ev
 919              	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED2Ev:
 920              	.LFB2454:
1168:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
1169:/usr/include/c++/9/bits/shared_ptr_base.h ****       ~__shared_ptr() = default;
 921              		.loc 5 1169 7
 922              		.cfi_startproc
 923 0000 F30F1EFA 		endbr64	
 924 0004 55       		pushq	%rbp	#
 925              		.cfi_def_cfa_offset 16
 926              		.cfi_offset 6, -16
 927 0005 4889E5   		movq	%rsp, %rbp	#,
 928              		.cfi_def_cfa_register 6
 929 0008 4883EC10 		subq	$16, %rsp	#,
 930 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 931              	.LBB11:
 932              	# /usr/include/c++/9/bits/shared_ptr_base.h:1169:       ~__shared_ptr() = default;
 933              		.loc 5 1169 7
 934 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 935 0014 4883C008 		addq	$8, %rax	#, _1
 936 0018 4889C7   		movq	%rax, %rdi	# _1,
 937 001b E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev	#
 937      00
 938              	.LBE11:
 939 0020 90       		nop	
 940 0021 C9       		leave	
 941              		.cfi_def_cfa 7, 8
 942 0022 C3       		ret	
 943              		.cfi_endproc
 944              	.LFE2454:
 946              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED1Ev
 947              		.set	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED1Ev,_ZNSt12__shared_ptrI4CoreLN9__gnu
 948              		.section	.text._ZNSt10shared_ptrI4CoreEC2ERKS1_,"axG",@progbits,_ZNSt10shared_ptrI4CoreEC5ERKS1_,c
 949              		.align 2
 950              		.weak	_ZNSt10shared_ptrI4CoreEC2ERKS1_
 952              	_ZNSt10shared_ptrI4CoreEC2ERKS1_:
 953              	.LFB2456:
 954              		.file 7 "/usr/include/c++/9/bits/shared_ptr.h"
   1:/usr/include/c++/9/bits/shared_ptr.h **** // shared_ptr and weak_ptr implementation -*- C++ -*-
   2:/usr/include/c++/9/bits/shared_ptr.h **** 
   3:/usr/include/c++/9/bits/shared_ptr.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/shared_ptr.h **** //
   5:/usr/include/c++/9/bits/shared_ptr.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/shared_ptr.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/shared_ptr.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/shared_ptr.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/shared_ptr.h **** // any later version.
  10:/usr/include/c++/9/bits/shared_ptr.h **** 
  11:/usr/include/c++/9/bits/shared_ptr.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/shared_ptr.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/shared_ptr.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/shared_ptr.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/shared_ptr.h **** 
  16:/usr/include/c++/9/bits/shared_ptr.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/shared_ptr.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/shared_ptr.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/shared_ptr.h **** 
  20:/usr/include/c++/9/bits/shared_ptr.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/shared_ptr.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/shared_ptr.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/shared_ptr.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/shared_ptr.h **** 
  25:/usr/include/c++/9/bits/shared_ptr.h **** // GCC Note: Based on files from version 1.32.0 of the Boost library.
  26:/usr/include/c++/9/bits/shared_ptr.h **** 
  27:/usr/include/c++/9/bits/shared_ptr.h **** //  shared_count.hpp
  28:/usr/include/c++/9/bits/shared_ptr.h **** //  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
  29:/usr/include/c++/9/bits/shared_ptr.h **** 
  30:/usr/include/c++/9/bits/shared_ptr.h **** //  shared_ptr.hpp
  31:/usr/include/c++/9/bits/shared_ptr.h **** //  Copyright (C) 1998, 1999 Greg Colvin and Beman Dawes.
  32:/usr/include/c++/9/bits/shared_ptr.h **** //  Copyright (C) 2001, 2002, 2003 Peter Dimov
  33:/usr/include/c++/9/bits/shared_ptr.h **** 
  34:/usr/include/c++/9/bits/shared_ptr.h **** //  weak_ptr.hpp
  35:/usr/include/c++/9/bits/shared_ptr.h **** //  Copyright (C) 2001, 2002, 2003 Peter Dimov
  36:/usr/include/c++/9/bits/shared_ptr.h **** 
  37:/usr/include/c++/9/bits/shared_ptr.h **** //  enable_shared_from_this.hpp
  38:/usr/include/c++/9/bits/shared_ptr.h **** //  Copyright (C) 2002 Peter Dimov
  39:/usr/include/c++/9/bits/shared_ptr.h **** 
  40:/usr/include/c++/9/bits/shared_ptr.h **** // Distributed under the Boost Software License, Version 1.0. (See
  41:/usr/include/c++/9/bits/shared_ptr.h **** // accompanying file LICENSE_1_0.txt or copy at
  42:/usr/include/c++/9/bits/shared_ptr.h **** // http://www.boost.org/LICENSE_1_0.txt)
  43:/usr/include/c++/9/bits/shared_ptr.h **** 
  44:/usr/include/c++/9/bits/shared_ptr.h **** /** @file
  45:/usr/include/c++/9/bits/shared_ptr.h ****  *  This is an internal header file, included by other library headers.
  46:/usr/include/c++/9/bits/shared_ptr.h ****  *  Do not attempt to use it directly. @headername{memory}
  47:/usr/include/c++/9/bits/shared_ptr.h ****  */
  48:/usr/include/c++/9/bits/shared_ptr.h **** 
  49:/usr/include/c++/9/bits/shared_ptr.h **** #ifndef _SHARED_PTR_H
  50:/usr/include/c++/9/bits/shared_ptr.h **** #define _SHARED_PTR_H 1
  51:/usr/include/c++/9/bits/shared_ptr.h **** 
  52:/usr/include/c++/9/bits/shared_ptr.h **** #include <bits/shared_ptr_base.h>
  53:/usr/include/c++/9/bits/shared_ptr.h **** 
  54:/usr/include/c++/9/bits/shared_ptr.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/9/bits/shared_ptr.h **** {
  56:/usr/include/c++/9/bits/shared_ptr.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/9/bits/shared_ptr.h **** 
  58:/usr/include/c++/9/bits/shared_ptr.h ****   /**
  59:/usr/include/c++/9/bits/shared_ptr.h ****    * @addtogroup pointer_abstractions
  60:/usr/include/c++/9/bits/shared_ptr.h ****    * @{
  61:/usr/include/c++/9/bits/shared_ptr.h ****    */
  62:/usr/include/c++/9/bits/shared_ptr.h **** 
  63:/usr/include/c++/9/bits/shared_ptr.h ****   /// 20.7.2.2.11 shared_ptr I/O
  64:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
  65:/usr/include/c++/9/bits/shared_ptr.h ****     inline std::basic_ostream<_Ch, _Tr>&
  66:/usr/include/c++/9/bits/shared_ptr.h ****     operator<<(std::basic_ostream<_Ch, _Tr>& __os,
  67:/usr/include/c++/9/bits/shared_ptr.h **** 	       const __shared_ptr<_Tp, _Lp>& __p)
  68:/usr/include/c++/9/bits/shared_ptr.h ****     {
  69:/usr/include/c++/9/bits/shared_ptr.h ****       __os << __p.get();
  70:/usr/include/c++/9/bits/shared_ptr.h ****       return __os;
  71:/usr/include/c++/9/bits/shared_ptr.h ****     }
  72:/usr/include/c++/9/bits/shared_ptr.h **** 
  73:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Del, typename _Tp, _Lock_policy _Lp>
  74:/usr/include/c++/9/bits/shared_ptr.h ****     inline _Del*
  75:/usr/include/c++/9/bits/shared_ptr.h ****     get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
  76:/usr/include/c++/9/bits/shared_ptr.h ****     {
  77:/usr/include/c++/9/bits/shared_ptr.h **** #if __cpp_rtti
  78:/usr/include/c++/9/bits/shared_ptr.h ****       return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
  79:/usr/include/c++/9/bits/shared_ptr.h **** #else
  80:/usr/include/c++/9/bits/shared_ptr.h ****       return 0;
  81:/usr/include/c++/9/bits/shared_ptr.h **** #endif
  82:/usr/include/c++/9/bits/shared_ptr.h ****     }
  83:/usr/include/c++/9/bits/shared_ptr.h **** 
  84:/usr/include/c++/9/bits/shared_ptr.h ****   /// 20.7.2.2.10 shared_ptr get_deleter
  85:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Del, typename _Tp>
  86:/usr/include/c++/9/bits/shared_ptr.h ****     inline _Del*
  87:/usr/include/c++/9/bits/shared_ptr.h ****     get_deleter(const shared_ptr<_Tp>& __p) noexcept
  88:/usr/include/c++/9/bits/shared_ptr.h ****     {
  89:/usr/include/c++/9/bits/shared_ptr.h **** #if __cpp_rtti
  90:/usr/include/c++/9/bits/shared_ptr.h ****       return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
  91:/usr/include/c++/9/bits/shared_ptr.h **** #else
  92:/usr/include/c++/9/bits/shared_ptr.h ****       return 0;
  93:/usr/include/c++/9/bits/shared_ptr.h **** #endif
  94:/usr/include/c++/9/bits/shared_ptr.h ****     }
  95:/usr/include/c++/9/bits/shared_ptr.h **** 
  96:/usr/include/c++/9/bits/shared_ptr.h ****   /**
  97:/usr/include/c++/9/bits/shared_ptr.h ****    *  @brief  A smart pointer with reference-counted copy semantics.
  98:/usr/include/c++/9/bits/shared_ptr.h ****    *
  99:/usr/include/c++/9/bits/shared_ptr.h ****    *  The object pointed to is deleted when the last shared_ptr pointing to
 100:/usr/include/c++/9/bits/shared_ptr.h ****    *  it is destroyed or reset.
 101:/usr/include/c++/9/bits/shared_ptr.h ****   */
 102:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 103:/usr/include/c++/9/bits/shared_ptr.h ****     class shared_ptr : public __shared_ptr<_Tp>
 104:/usr/include/c++/9/bits/shared_ptr.h ****     {
 105:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename... _Args>
 106:/usr/include/c++/9/bits/shared_ptr.h **** 	using _Constructible = typename enable_if<
 107:/usr/include/c++/9/bits/shared_ptr.h **** 	  is_constructible<__shared_ptr<_Tp>, _Args...>::value
 108:/usr/include/c++/9/bits/shared_ptr.h **** 	>::type;
 109:/usr/include/c++/9/bits/shared_ptr.h **** 
 110:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Arg>
 111:/usr/include/c++/9/bits/shared_ptr.h **** 	using _Assignable = typename enable_if<
 112:/usr/include/c++/9/bits/shared_ptr.h **** 	  is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 113:/usr/include/c++/9/bits/shared_ptr.h **** 	>::type;
 114:/usr/include/c++/9/bits/shared_ptr.h **** 
 115:/usr/include/c++/9/bits/shared_ptr.h ****     public:
 116:/usr/include/c++/9/bits/shared_ptr.h **** 
 117:/usr/include/c++/9/bits/shared_ptr.h ****       using element_type = typename __shared_ptr<_Tp>::element_type;
 118:/usr/include/c++/9/bits/shared_ptr.h **** 
 119:/usr/include/c++/9/bits/shared_ptr.h **** #if __cplusplus > 201402L
 120:/usr/include/c++/9/bits/shared_ptr.h **** # define __cpp_lib_shared_ptr_weak_type 201606
 121:/usr/include/c++/9/bits/shared_ptr.h ****       using weak_type = weak_ptr<_Tp>;
 122:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 123:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 124:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct an empty %shared_ptr.
 125:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count()==0 && get()==0
 126:/usr/include/c++/9/bits/shared_ptr.h ****        */
 127:/usr/include/c++/9/bits/shared_ptr.h ****       constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 128:/usr/include/c++/9/bits/shared_ptr.h **** 
 129:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr(const shared_ptr&) noexcept = default;
 955              		.loc 7 129 7
 956              		.cfi_startproc
 957 0000 F30F1EFA 		endbr64	
 958 0004 55       		pushq	%rbp	#
 959              		.cfi_def_cfa_offset 16
 960              		.cfi_offset 6, -16
 961 0005 4889E5   		movq	%rsp, %rbp	#,
 962              		.cfi_def_cfa_register 6
 963 0008 4883EC10 		subq	$16, %rsp	#,
 964 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 965 0010 488975F0 		movq	%rsi, -16(%rbp)	# D.47964, D.47964
 966              	.LBB12:
 967              	# /usr/include/c++/9/bits/shared_ptr.h:129:       shared_ptr(const shared_ptr&) noexcept = default;
 968              		.loc 7 129 7
 969 0014 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 970 0018 488B55F0 		movq	-16(%rbp), %rdx	# D.47964, _2
 971 001c 4889D6   		movq	%rdx, %rsi	# _2,
 972 001f 4889C7   		movq	%rax, %rdi	# _1,
 973 0022 E8000000 		call	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2ERKS3_	#
 973      00
 974              	.LBE12:
 975 0027 90       		nop	
 976 0028 C9       		leave	
 977              		.cfi_def_cfa 7, 8
 978 0029 C3       		ret	
 979              		.cfi_endproc
 980              	.LFE2456:
 982              		.weak	_ZNSt10shared_ptrI4CoreEC1ERKS1_
 983              		.set	_ZNSt10shared_ptrI4CoreEC1ERKS1_,_ZNSt10shared_ptrI4CoreEC2ERKS1_
 984              		.section	.text._ZNSt10shared_ptrI4CoreED2Ev,"axG",@progbits,_ZNSt10shared_ptrI4CoreED5Ev,comdat
 985              		.align 2
 986              		.weak	_ZNSt10shared_ptrI4CoreED2Ev
 988              	_ZNSt10shared_ptrI4CoreED2Ev:
 989              	.LFB2459:
 103:/usr/include/c++/9/bits/shared_ptr.h ****     {
 990              		.loc 7 103 11
 991              		.cfi_startproc
 992 0000 F30F1EFA 		endbr64	
 993 0004 55       		pushq	%rbp	#
 994              		.cfi_def_cfa_offset 16
 995              		.cfi_offset 6, -16
 996 0005 4889E5   		movq	%rsp, %rbp	#,
 997              		.cfi_def_cfa_register 6
 998 0008 4883EC10 		subq	$16, %rsp	#,
 999 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1000              	.LBB13:
 1001              	# /usr/include/c++/9/bits/shared_ptr.h:103:     class shared_ptr : public __shared_ptr<_Tp>
 103:/usr/include/c++/9/bits/shared_ptr.h ****     {
 1002              		.loc 7 103 11
 1003 0010 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 1004 0014 4889C7   		movq	%rax, %rdi	# _1,
 1005 0017 E8000000 		call	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EED2Ev	#
 1005      00
 1006              	.LBE13:
 1007 001c 90       		nop	
 1008 001d C9       		leave	
 1009              		.cfi_def_cfa 7, 8
 1010 001e C3       		ret	
 1011              		.cfi_endproc
 1012              	.LFE2459:
 1014              		.weak	_ZNSt10shared_ptrI4CoreED1Ev
 1015              		.set	_ZNSt10shared_ptrI4CoreED1Ev,_ZNSt10shared_ptrI4CoreED2Ev
 1016              		.section	.text._ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE,"axG",@progbits,_ZN7Complex3addE7Visi
 1017              		.align 2
 1018              		.weak	_ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE
 1020              	_ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE:
 1021              	.LFB2442:
  41:test.cpp      **** 	sCore add(Visitor v, sCore c) override{
 1022              		.loc 6 41 8
 1023              		.cfi_startproc
 1024              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1025              		.cfi_lsda 0x1b,.LLSDA2442
 1026 0000 F30F1EFA 		endbr64	
 1027 0004 55       		pushq	%rbp	#
 1028              		.cfi_def_cfa_offset 16
 1029              		.cfi_offset 6, -16
 1030 0005 4889E5   		movq	%rsp, %rbp	#,
 1031              		.cfi_def_cfa_register 6
 1032 0008 53       		pushq	%rbx	#
 1033 0009 4883EC58 		subq	$88, %rsp	#,
 1034              		.cfi_offset 3, -24
 1035 000d 48897DB8 		movq	%rdi, -72(%rbp)	# .result_ptr, .result_ptr
 1036 0011 488975B0 		movq	%rsi, -80(%rbp)	# this, this
 1037 0015 488955A8 		movq	%rdx, -88(%rbp)	# v, v
 1038 0019 48894DA0 		movq	%rcx, -96(%rbp)	# c, c
 1039              	# test.cpp:41: 	sCore add(Visitor v, sCore c) override{
 1040              		.loc 6 41 8
 1041 001d 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp99
 1041      25280000 
 1041      00
 1042 0026 488945E8 		movq	%rax, -24(%rbp)	# tmp99, D.54874
 1043 002a 31C0     		xorl	%eax, %eax	# tmp99
 1044              	# test.cpp:42: 		return v.add(*this, c);
  42:test.cpp      **** 		return v.add(*this, c);
 1045              		.loc 6 42 24
 1046 002c 488B55A0 		movq	-96(%rbp), %rdx	# c, tmp83
 1047 0030 488D45C0 		leaq	-64(%rbp), %rax	#, tmp84
 1048 0034 4889D6   		movq	%rdx, %rsi	# tmp83,
 1049 0037 4889C7   		movq	%rax, %rdi	# tmp84,
 1050 003a E8000000 		call	_ZNSt10shared_ptrI4CoreEC1ERKS1_	#
 1050      00
 1051 003f 488B55B0 		movq	-80(%rbp), %rdx	# this, tmp85
 1052 0043 488D45D0 		leaq	-48(%rbp), %rax	#, tmp86
 1053 0047 4889D6   		movq	%rdx, %rsi	# tmp85,
 1054 004a 4889C7   		movq	%rax, %rdi	# tmp86,
 1055 004d E8000000 		call	_ZN7ComplexC1ERKS_	#
 1055      00
 1056 0052 488B45B8 		movq	-72(%rbp), %rax	# <retval>, tmp87
 1057 0056 488D4DC0 		leaq	-64(%rbp), %rcx	#, tmp88
 1058 005a 488D55D0 		leaq	-48(%rbp), %rdx	#, tmp89
 1059 005e 488B75A8 		movq	-88(%rbp), %rsi	# v, tmp90
 1060 0062 4889C7   		movq	%rax, %rdi	# tmp87,
 1061              	.LEHB0:
 1062 0065 E8000000 		call	_ZN7Visitor3addI7ComplexEESt10shared_ptrI4CoreET_S4_	#
 1062      00
 1063              	.LEHE0:
 1064 006a 488D45D0 		leaq	-48(%rbp), %rax	#, tmp91
 1065 006e 4889C7   		movq	%rax, %rdi	# tmp91,
 1066 0071 E8000000 		call	_ZN7ComplexD1Ev	#
 1066      00
 1067 0076 488D45C0 		leaq	-64(%rbp), %rax	#, tmp92
 1068 007a 4889C7   		movq	%rax, %rdi	# tmp92,
 1069 007d E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1069      00
 1070              	# test.cpp:43: 	}
  43:test.cpp      **** 	}
 1071              		.loc 6 43 2
 1072 0082 488B45E8 		movq	-24(%rbp), %rax	# D.54874, tmp100
 1073 0086 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp100
 1073      25280000 
 1073      00
 1074 008f 7431     		je	.L45	#,
 1075 0091 EB2A     		jmp	.L47	#
 1076              	.L46:
 1077 0093 F30F1EFA 		endbr64	
 1078 0097 4889C3   		movq	%rax, %rbx	#, tmp95
 1079              	# test.cpp:42: 		return v.add(*this, c);
  42:test.cpp      **** 		return v.add(*this, c);
 1080              		.loc 6 42 24
 1081 009a 488D45D0 		leaq	-48(%rbp), %rax	#, tmp93
 1082 009e 4889C7   		movq	%rax, %rdi	# tmp93,
 1083 00a1 E8000000 		call	_ZN7ComplexD1Ev	#
 1083      00
 1084 00a6 488D45C0 		leaq	-64(%rbp), %rax	#, tmp98
 1085 00aa 4889C7   		movq	%rax, %rdi	# tmp98,
 1086 00ad E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1086      00
 1087 00b2 4889D8   		movq	%rbx, %rax	# tmp94, D.54873
 1088 00b5 4889C7   		movq	%rax, %rdi	# D.54873,
 1089              	.LEHB1:
 1090 00b8 E8000000 		call	_Unwind_Resume@PLT	#
 1090      00
 1091              	.LEHE1:
 1092              	.L47:
 1093              	# test.cpp:43: 	}
 1094              		.loc 6 43 2
 1095 00bd E8000000 		call	__stack_chk_fail@PLT	#
 1095      00
 1096              	.L45:
 1097 00c2 488B45B8 		movq	-72(%rbp), %rax	# <retval>,
 1098 00c6 4883C458 		addq	$88, %rsp	#,
 1099 00ca 5B       		popq	%rbx	#
 1100 00cb 5D       		popq	%rbp	#
 1101              		.cfi_def_cfa 7, 8
 1102 00cc C3       		ret	
 1103              		.cfi_endproc
 1104              	.LFE2442:
 1105              		.globl	__gxx_personality_v0
 1106              		.section	.gcc_except_table._ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE,"aG",@progbits,_ZN7Comple
 1107              	.LLSDA2442:
 1108 0000 FF       		.byte	0xff
 1109 0001 FF       		.byte	0xff
 1110 0002 01       		.byte	0x1
 1111 0003 0A       		.uleb128 .LLSDACSE2442-.LLSDACSB2442
 1112              	.LLSDACSB2442:
 1113 0004 65       		.uleb128 .LEHB0-.LFB2442
 1114 0005 05       		.uleb128 .LEHE0-.LEHB0
 1115 0006 9301     		.uleb128 .L46-.LFB2442
 1116 0008 00       		.uleb128 0
 1117 0009 B801     		.uleb128 .LEHB1-.LFB2442
 1118 000b 05       		.uleb128 .LEHE1-.LEHB1
 1119 000c 00       		.uleb128 0
 1120 000d 00       		.uleb128 0
 1121              	.LLSDACSE2442:
 1122              		.section	.text._ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE,"axG",@progbits,_ZN7Complex3addE7Visi
 1124              		.section	.text._ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED2Ev,"axG",@progbits,_ZNS
 1125              		.align 2
 1126              		.weak	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED2Ev
 1128              	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED2Ev:
 1129              	.LFB2464:
 1130              		.loc 5 1169 7
 1131              		.cfi_startproc
 1132 0000 F30F1EFA 		endbr64	
 1133 0004 55       		pushq	%rbp	#
 1134              		.cfi_def_cfa_offset 16
 1135              		.cfi_offset 6, -16
 1136 0005 4889E5   		movq	%rsp, %rbp	#,
 1137              		.cfi_def_cfa_register 6
 1138 0008 4883EC10 		subq	$16, %rsp	#,
 1139 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1140              	.LBB14:
 1141              	# /usr/include/c++/9/bits/shared_ptr_base.h:1169:       ~__shared_ptr() = default;
 1142              		.loc 5 1169 7
 1143 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 1144 0014 4883C008 		addq	$8, %rax	#, _1
 1145 0018 4889C7   		movq	%rax, %rdi	# _1,
 1146 001b E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev	#
 1146      00
 1147              	.LBE14:
 1148 0020 90       		nop	
 1149 0021 C9       		leave	
 1150              		.cfi_def_cfa 7, 8
 1151 0022 C3       		ret	
 1152              		.cfi_endproc
 1153              	.LFE2464:
 1155              		.weak	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED1Ev
 1156              		.set	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED1Ev,_ZNSt12__shared_ptrI7ComplexLN
 1157              		.section	.text._ZNSt10shared_ptrI7ComplexED2Ev,"axG",@progbits,_ZNSt10shared_ptrI7ComplexED5Ev,com
 1158              		.align 2
 1159              		.weak	_ZNSt10shared_ptrI7ComplexED2Ev
 1161              	_ZNSt10shared_ptrI7ComplexED2Ev:
 1162              	.LFB2466:
 103:/usr/include/c++/9/bits/shared_ptr.h ****     {
 1163              		.loc 7 103 11
 1164              		.cfi_startproc
 1165 0000 F30F1EFA 		endbr64	
 1166 0004 55       		pushq	%rbp	#
 1167              		.cfi_def_cfa_offset 16
 1168              		.cfi_offset 6, -16
 1169 0005 4889E5   		movq	%rsp, %rbp	#,
 1170              		.cfi_def_cfa_register 6
 1171 0008 4883EC10 		subq	$16, %rsp	#,
 1172 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1173              	.LBB15:
 1174              	# /usr/include/c++/9/bits/shared_ptr.h:103:     class shared_ptr : public __shared_ptr<_Tp>
 103:/usr/include/c++/9/bits/shared_ptr.h ****     {
 1175              		.loc 7 103 11
 1176 0010 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 1177 0014 4889C7   		movq	%rax, %rdi	# _1,
 1178 0017 E8000000 		call	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EED2Ev	#
 1178      00
 1179              	.LBE15:
 1180 001c 90       		nop	
 1181 001d C9       		leave	
 1182              		.cfi_def_cfa 7, 8
 1183 001e C3       		ret	
 1184              		.cfi_endproc
 1185              	.LFE2466:
 1187              		.weak	_ZNSt10shared_ptrI7ComplexED1Ev
 1188              		.set	_ZNSt10shared_ptrI7ComplexED1Ev,_ZNSt10shared_ptrI7ComplexED2Ev
 1189              		.section	.text._ZN7Complex4_addES_,"axG",@progbits,_ZN7Complex4_addES_,comdat
 1190              		.align 2
 1191              		.weak	_ZN7Complex4_addES_
 1193              	_ZN7Complex4_addES_:
 1194              	.LFB2461:
  44:test.cpp      **** 	sCore _add(Complex c) override {
 1195              		.loc 6 44 8
 1196              		.cfi_startproc
 1197 0000 F30F1EFA 		endbr64	
 1198 0004 55       		pushq	%rbp	#
 1199              		.cfi_def_cfa_offset 16
 1200              		.cfi_offset 6, -16
 1201 0005 4889E5   		movq	%rsp, %rbp	#,
 1202              		.cfi_def_cfa_register 6
 1203 0008 4883EC50 		subq	$80, %rsp	#,
 1204 000c 48897DC8 		movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
 1205 0010 488975C0 		movq	%rsi, -64(%rbp)	# this, this
 1206 0014 488955B8 		movq	%rdx, -72(%rbp)	# c, c
 1207              	# test.cpp:44: 	sCore _add(Complex c) override {
 1208              		.loc 6 44 8
 1209 0018 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp98
 1209      25280000 
 1209      00
 1210 0021 488945F8 		movq	%rax, -8(%rbp)	# tmp98, D.54878
 1211 0025 31C0     		xorl	%eax, %eax	# tmp98
 1212              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
  45:test.cpp      **** 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1213              		.loc 6 45 49
 1214 0027 488B45C0 		movq	-64(%rbp), %rax	# this, tmp88
 1215 002b F20F1048 		movsd	16(%rax), %xmm1	# this_8(D)->imag, _1
 1215      10
 1216              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1217              		.loc 6 45 56
 1218 0030 488B45B8 		movq	-72(%rbp), %rax	# c, tmp89
 1219 0034 F20F1040 		movsd	16(%rax), %xmm0	# c_9(D)->imag, _2
 1219      10
 1220              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1221              		.loc 6 45 53
 1222 0039 F20F58C1 		addsd	%xmm1, %xmm0	# _1, _3
 1223 003d F20F1145 		movsd	%xmm0, -40(%rbp)	# _3, D.48067
 1223      D8
 1224              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1225              		.loc 6 45 36
 1226 0042 488B45C0 		movq	-64(%rbp), %rax	# this, tmp90
 1227 0046 F20F1048 		movsd	8(%rax), %xmm1	# this_8(D)->real, _4
 1227      08
 1228              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1229              		.loc 6 45 43
 1230 004b 488B45B8 		movq	-72(%rbp), %rax	# c, tmp91
 1231 004f F20F1040 		movsd	8(%rax), %xmm0	# c_9(D)->real, _5
 1231      08
 1232              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1233              		.loc 6 45 40
 1234 0054 F20F58C1 		addsd	%xmm1, %xmm0	# _4, _6
 1235 0058 F20F1145 		movsd	%xmm0, -48(%rbp)	# _6, D.48066
 1235      D0
 1236              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1237              		.loc 6 45 35
 1238 005d 488D45E0 		leaq	-32(%rbp), %rax	#, tmp92
 1239 0061 488D55D8 		leaq	-40(%rbp), %rdx	#, tmp93
 1240 0065 488D4DD0 		leaq	-48(%rbp), %rcx	#, tmp94
 1241 0069 4889CE   		movq	%rcx, %rsi	# tmp94,
 1242 006c 4889C7   		movq	%rax, %rdi	# tmp92,
 1243 006f E8000000 		call	_ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_	#
 1243      00
 1244              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1245              		.loc 6 45 60
 1246 0074 488D55E0 		leaq	-32(%rbp), %rdx	#, tmp95
 1247 0078 488B45C8 		movq	-56(%rbp), %rax	# <retval>, tmp96
 1248 007c 4889D6   		movq	%rdx, %rsi	# tmp95,
 1249 007f 4889C7   		movq	%rax, %rdi	# tmp96,
 1250 0082 E8000000 		call	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEEOS_IT_E	#
 1250      00
 1251              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1252              		.loc 6 45 35
 1253 0087 488D45E0 		leaq	-32(%rbp), %rax	#, tmp97
 1254 008b 4889C7   		movq	%rax, %rdi	# tmp97,
 1255 008e E8000000 		call	_ZNSt10shared_ptrI7ComplexED1Ev	#
 1255      00
 1256              	# test.cpp:45: 		return std::make_shared<Complex>(real+c.real, imag+c.imag);
 1257              		.loc 6 45 60
 1258 0093 90       		nop	
 1259              	# test.cpp:46: 	}
  46:test.cpp      **** 	}
 1260              		.loc 6 46 2
 1261 0094 488B45F8 		movq	-8(%rbp), %rax	# D.54878, tmp99
 1262 0098 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp99
 1262      25280000 
 1262      00
 1263 00a1 7405     		je	.L52	#,
 1264 00a3 E8000000 		call	__stack_chk_fail@PLT	#
 1264      00
 1265              	.L52:
 1266 00a8 488B45C8 		movq	-56(%rbp), %rax	# <retval>,
 1267 00ac C9       		leave	
 1268              		.cfi_def_cfa 7, 8
 1269 00ad C3       		ret	
 1270              		.cfi_endproc
 1271              	.LFE2461:
 1273              		.section	.rodata
 1274              	.LC0:
 1275 000a 2C2000   		.string	", "
 1276              	.LC1:
 1277 000d 69290A00 		.string	"i)\n"
 1278              		.section	.text._ZN7Complex5printEv,"axG",@progbits,_ZN7Complex5printEv,comdat
 1279              		.align 2
 1280              		.weak	_ZN7Complex5printEv
 1282              	_ZN7Complex5printEv:
 1283              	.LFB2468:
  47:test.cpp      **** 	//sCore add(Visitor v, Complex c) override{
  48:test.cpp      **** 	//	return v.add(*this, c);
  49:test.cpp      **** 	//}
  50:test.cpp      **** 	void print() override{
 1284              		.loc 6 50 7
 1285              		.cfi_startproc
 1286 0000 F30F1EFA 		endbr64	
 1287 0004 55       		pushq	%rbp	#
 1288              		.cfi_def_cfa_offset 16
 1289              		.cfi_offset 6, -16
 1290 0005 4889E5   		movq	%rsp, %rbp	#,
 1291              		.cfi_def_cfa_register 6
 1292 0008 4883EC10 		subq	$16, %rsp	#,
 1293 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1294              	# test.cpp:51: 		std::cout << '(' << real << ", " << imag << "i)\n";
  51:test.cpp      **** 		std::cout << '(' << real << ", " << imag << "i)\n";
 1295              		.loc 6 51 16
 1296 0010 BE280000 		movl	$40, %esi	#,
 1296      00
 1297 0015 488D3D00 		leaq	_ZSt4cout(%rip), %rdi	#,
 1297      000000
 1298 001c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@PLT	#
 1298      00
 1299 0021 4889C2   		movq	%rax, %rdx	#, _1
 1300              	# test.cpp:51: 		std::cout << '(' << real << ", " << imag << "i)\n";
 1301              		.loc 6 51 23
 1302 0024 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 1303 0028 488B4008 		movq	8(%rax), %rax	# this_10(D)->real, _2
 1304 002c 66480F6E 		movq	%rax, %xmm0	# _2,
 1304      C0
 1305 0031 4889D7   		movq	%rdx, %rdi	# _1,
 1306 0034 E8000000 		call	_ZNSolsEd@PLT	#
 1306      00
 1307              	# test.cpp:51: 		std::cout << '(' << real << ", " << imag << "i)\n";
 1308              		.loc 6 51 31
 1309 0039 488D3500 		leaq	.LC0(%rip), %rsi	#,
 1309      000000
 1310 0040 4889C7   		movq	%rax, %rdi	# _3,
 1311 0043 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1311      00
 1312 0048 4889C2   		movq	%rax, %rdx	#, _4
 1313              	# test.cpp:51: 		std::cout << '(' << real << ", " << imag << "i)\n";
 1314              		.loc 6 51 39
 1315 004b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp89
 1316 004f 488B4010 		movq	16(%rax), %rax	# this_10(D)->imag, _5
 1317 0053 66480F6E 		movq	%rax, %xmm0	# _5,
 1317      C0
 1318 0058 4889D7   		movq	%rdx, %rdi	# _4,
 1319 005b E8000000 		call	_ZNSolsEd@PLT	#
 1319      00
 1320              	# test.cpp:51: 		std::cout << '(' << real << ", " << imag << "i)\n";
 1321              		.loc 6 51 47
 1322 0060 488D3500 		leaq	.LC1(%rip), %rsi	#,
 1322      000000
 1323 0067 4889C7   		movq	%rax, %rdi	# _6,
 1324 006a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT	#
 1324      00
 1325              	# test.cpp:52: 	};
  52:test.cpp      **** 	};
 1326              		.loc 6 52 2
 1327 006f 90       		nop	
 1328 0070 C9       		leave	
 1329              		.cfi_def_cfa 7, 8
 1330 0071 C3       		ret	
 1331              		.cfi_endproc
 1332              	.LFE2468:
 1334              		.section	.text._ZN7VisitorC2ERKS_,"axG",@progbits,_ZN7VisitorC5ERKS_,comdat
 1335              		.align 2
 1336              		.weak	_ZN7VisitorC2ERKS_
 1338              	_ZN7VisitorC2ERKS_:
 1339              	.LFB2472:
  13:test.cpp      **** 	Visitor(){}
 1340              		.loc 6 13 8
 1341              		.cfi_startproc
 1342 0000 F30F1EFA 		endbr64	
 1343 0004 55       		pushq	%rbp	#
 1344              		.cfi_def_cfa_offset 16
 1345              		.cfi_offset 6, -16
 1346 0005 4889E5   		movq	%rsp, %rbp	#,
 1347              		.cfi_def_cfa_register 6
 1348 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1349 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.49299, D.49299
 1350              	.LBB16:
 1351              	# test.cpp:13: struct Visitor{
  13:test.cpp      **** 	Visitor(){}
 1352              		.loc 6 13 8
 1353 0010 488D1500 		leaq	16+_ZTV7Visitor(%rip), %rdx	#, _1
 1353      000000
 1354 0017 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 1355 001b 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr.Visitor
 1356              	.LBE16:
 1357 001e 90       		nop	
 1358 001f 5D       		popq	%rbp	#
 1359              		.cfi_def_cfa 7, 8
 1360 0020 C3       		ret	
 1361              		.cfi_endproc
 1362              	.LFE2472:
 1364              		.weak	_ZN7VisitorC1ERKS_
 1365              		.set	_ZN7VisitorC1ERKS_,_ZN7VisitorC2ERKS_
 1366              		.text
 1367              		.globl	main
 1369              	main:
 1370              	.LFB2470:
  53:test.cpp      **** };
  54:test.cpp      **** 
  55:test.cpp      **** template<typename T>
  56:test.cpp      **** sCore Visitor::add(T t, sCore c2){
  57:test.cpp      **** 	return c2->_add(t);
  58:test.cpp      **** };
  59:test.cpp      **** 
  60:test.cpp      **** int main(){
 1371              		.loc 6 60 11
 1372              		.cfi_startproc
 1373              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1374              		.cfi_lsda 0x1b,.LLSDA2470
 1375 001f F30F1EFA 		endbr64	
 1376 0023 55       		pushq	%rbp	#
 1377              		.cfi_def_cfa_offset 16
 1378              		.cfi_offset 6, -16
 1379 0024 4889E5   		movq	%rsp, %rbp	#,
 1380              		.cfi_def_cfa_register 6
 1381 0027 4154     		pushq	%r12	#
 1382 0029 53       		pushq	%rbx	#
 1383 002a 4883EC60 		subq	$96, %rsp	#,
 1384              		.cfi_offset 12, -24
 1385              		.cfi_offset 3, -32
 1386              	# test.cpp:60: int main(){
 1387              		.loc 6 60 11
 1388 002e 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp148
 1388      25280000 
 1388      00
 1389 0037 488945E8 		movq	%rax, -24(%rbp)	# tmp148, D.54885
 1390 003b 31C0     		xorl	%eax, %eax	# tmp148
 1391              	# test.cpp:62: 	Visitor v;
  61:test.cpp      **** 	//std::cout << "START\n";
  62:test.cpp      **** 	Visitor v;
 1392              		.loc 6 62 10
 1393 003d 488D4590 		leaq	-112(%rbp), %rax	#, tmp101
 1394 0041 4889C7   		movq	%rax, %rdi	# tmp101,
 1395 0044 E8000000 		call	_ZN7VisitorC1Ev	#
 1395      00
 1396              	# test.cpp:66: 	sComp a=std::make_shared<Complex>(3.0, 5.0);
  63:test.cpp      **** 	//sV sv{v};
  64:test.cpp      **** 	//Complex a(3.0, 5.0);
  65:test.cpp      **** 
  66:test.cpp      **** 	sComp a=std::make_shared<Complex>(3.0, 5.0);
 1397              		.loc 6 66 41
 1398 0049 F20F1005 		movsd	.LC2(%rip), %xmm0	#, tmp102
 1398      00000000 
 1399 0051 F20F1145 		movsd	%xmm0, -48(%rbp)	# tmp102, D.49302
 1399      D0
 1400              	# test.cpp:66: 	sComp a=std::make_shared<Complex>(3.0, 5.0);
 1401              		.loc 6 66 36
 1402 0056 F20F1005 		movsd	.LC3(%rip), %xmm0	#, tmp103
 1402      00000000 
 1403 005e F20F1145 		movsd	%xmm0, -64(%rbp)	# tmp103, D.49301
 1403      C0
 1404              	# test.cpp:66: 	sComp a=std::make_shared<Complex>(3.0, 5.0);
 1405              		.loc 6 66 44
 1406 0063 488D45A0 		leaq	-96(%rbp), %rax	#, tmp104
 1407 0067 488D55D0 		leaq	-48(%rbp), %rdx	#, tmp105
 1408 006b 488D4DC0 		leaq	-64(%rbp), %rcx	#, tmp106
 1409 006f 4889CE   		movq	%rcx, %rsi	# tmp106,
 1410 0072 4889C7   		movq	%rax, %rdi	# tmp104,
 1411              	.LEHB2:
 1412 0075 E8000000 		call	_ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_	#
 1412      00
 1413              	.LEHE2:
 1414              	# test.cpp:67: 	sComp b=std::make_shared<Complex>(7.0, 11.0);
  67:test.cpp      **** 	sComp b=std::make_shared<Complex>(7.0, 11.0);
 1415              		.loc 6 67 41 discriminator 1
 1416 007a F20F1005 		movsd	.LC4(%rip), %xmm0	#, tmp107
 1416      00000000 
 1417 0082 F20F1145 		movsd	%xmm0, -48(%rbp)	# tmp107, D.49339
 1417      D0
 1418              	# test.cpp:67: 	sComp b=std::make_shared<Complex>(7.0, 11.0);
 1419              		.loc 6 67 36 discriminator 1
 1420 0087 F20F1005 		movsd	.LC5(%rip), %xmm0	#, tmp108
 1420      00000000 
 1421 008f F20F1145 		movsd	%xmm0, -64(%rbp)	# tmp108, D.49338
 1421      C0
 1422              	# test.cpp:67: 	sComp b=std::make_shared<Complex>(7.0, 11.0);
 1423              		.loc 6 67 45 discriminator 1
 1424 0094 488D45B0 		leaq	-80(%rbp), %rax	#, tmp109
 1425 0098 488D55D0 		leaq	-48(%rbp), %rdx	#, tmp110
 1426 009c 488D4DC0 		leaq	-64(%rbp), %rcx	#, tmp111
 1427 00a0 4889CE   		movq	%rcx, %rsi	# tmp111,
 1428 00a3 4889C7   		movq	%rax, %rdi	# tmp109,
 1429              	.LEHB3:
 1430 00a6 E8000000 		call	_ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_	#
 1430      00
 1431              	.LEHE3:
 1432              	# test.cpp:70: 	sCore x=a->add(v, b);
  68:test.cpp      **** 	//sCore c1=a;
  69:test.cpp      **** 	//sCore c2=b;
  70:test.cpp      **** 	sCore x=a->add(v, b);
 1433              		.loc 6 70 11 discriminator 1
 1434 00ab 488D45A0 		leaq	-96(%rbp), %rax	#, tmp112
 1435 00af 4889C7   		movq	%rax, %rdi	# tmp112,
 1436 00b2 E8000000 		call	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv	#
 1436      00
 1437 00b7 4889C3   		movq	%rax, %rbx	#, _30
 1438              	# test.cpp:70: 	sCore x=a->add(v, b);
 1439              		.loc 6 70 21 discriminator 1
 1440 00ba 488B03   		movq	(%rbx), %rax	# _30->D.46476._vptr.Core, _1
 1441 00bd 4883C018 		addq	$24, %rax	#, _2
 1442 00c1 4C8B20   		movq	(%rax), %r12	# *_2, _3
 1443 00c4 488D55B0 		leaq	-80(%rbp), %rdx	#, tmp113
 1444 00c8 488D45D0 		leaq	-48(%rbp), %rax	#, tmp114
 1445 00cc 4889D6   		movq	%rdx, %rsi	# tmp113,
 1446 00cf 4889C7   		movq	%rax, %rdi	# tmp114,
 1447 00d2 E8000000 		call	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEERKS_IT_E	#
 1447      00
 1448 00d7 488D5590 		leaq	-112(%rbp), %rdx	#, tmp115
 1449 00db 488D4598 		leaq	-104(%rbp), %rax	#, tmp116
 1450 00df 4889D6   		movq	%rdx, %rsi	# tmp115,
 1451 00e2 4889C7   		movq	%rax, %rdi	# tmp116,
 1452 00e5 E8000000 		call	_ZN7VisitorC1ERKS_	#
 1452      00
 1453 00ea 488D45C0 		leaq	-64(%rbp), %rax	#, tmp117
 1454 00ee 488D4DD0 		leaq	-48(%rbp), %rcx	#, tmp118
 1455 00f2 488D5598 		leaq	-104(%rbp), %rdx	#, tmp119
 1456 00f6 4889DE   		movq	%rbx, %rsi	# _30,
 1457 00f9 4889C7   		movq	%rax, %rdi	# tmp117,
 1458              	.LEHB4:
 1459 00fc 41FFD4   		call	*%r12	# _3
 1460              	.LVL0:
 1461              	.LEHE4:
 1462 00ff 488D4598 		leaq	-104(%rbp), %rax	#, tmp120
 1463 0103 4889C7   		movq	%rax, %rdi	# tmp120,
 1464 0106 E8000000 		call	_ZN7VisitorD1Ev	#
 1464      00
 1465 010b 488D45D0 		leaq	-48(%rbp), %rax	#, tmp121
 1466 010f 4889C7   		movq	%rax, %rdi	# tmp121,
 1467 0112 E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1467      00
 1468              	# test.cpp:71: 	a->print();
  71:test.cpp      **** 	a->print();
 1469              		.loc 6 71 3
 1470 0117 488D45A0 		leaq	-96(%rbp), %rax	#, tmp122
 1471 011b 4889C7   		movq	%rax, %rdi	# tmp122,
 1472 011e E8000000 		call	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv	#
 1472      00
 1473              	# test.cpp:71: 	a->print();
 1474              		.loc 6 71 11
 1475 0123 488B10   		movq	(%rax), %rdx	# _39->D.46476._vptr.Core, _4
 1476 0126 4883C210 		addq	$16, %rdx	#, _5
 1477 012a 488B12   		movq	(%rdx), %rdx	# *_5, _6
 1478              	# test.cpp:71: 	a->print();
 1479              		.loc 6 71 10
 1480 012d 4889C7   		movq	%rax, %rdi	# _39,
 1481              	.LEHB5:
 1482 0130 FFD2     		call	*%rdx	# _6
 1483              	.LVL1:
 1484              	# test.cpp:72: 	b->print();
  72:test.cpp      **** 	b->print();
 1485              		.loc 6 72 3
 1486 0132 488D45B0 		leaq	-80(%rbp), %rax	#, tmp123
 1487 0136 4889C7   		movq	%rax, %rdi	# tmp123,
 1488 0139 E8000000 		call	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv	#
 1488      00
 1489              	# test.cpp:72: 	b->print();
 1490              		.loc 6 72 11
 1491 013e 488B10   		movq	(%rax), %rdx	# _42->D.46476._vptr.Core, _7
 1492 0141 4883C210 		addq	$16, %rdx	#, _8
 1493 0145 488B12   		movq	(%rdx), %rdx	# *_8, _9
 1494              	# test.cpp:72: 	b->print();
 1495              		.loc 6 72 10
 1496 0148 4889C7   		movq	%rax, %rdi	# _42,
 1497 014b FFD2     		call	*%rdx	# _9
 1498              	.LVL2:
 1499              	# test.cpp:73: 	x->print();
  73:test.cpp      **** 	x->print();
 1500              		.loc 6 73 3
 1501 014d 488D45C0 		leaq	-64(%rbp), %rax	#, tmp124
 1502 0151 4889C7   		movq	%rax, %rdi	# tmp124,
 1503 0154 E8000000 		call	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv	#
 1503      00
 1504              	# test.cpp:73: 	x->print();
 1505              		.loc 6 73 11
 1506 0159 488B10   		movq	(%rax), %rdx	# _45->_vptr.Core, _10
 1507 015c 4883C210 		addq	$16, %rdx	#, _11
 1508 0160 488B12   		movq	(%rdx), %rdx	# *_11, _12
 1509              	# test.cpp:73: 	x->print();
 1510              		.loc 6 73 10
 1511 0163 4889C7   		movq	%rax, %rdi	# _45,
 1512 0166 FFD2     		call	*%rdx	# _12
 1513              	.LVL3:
 1514              	.LEHE5:
 1515              	# test.cpp:74: 	return 0;
  74:test.cpp      **** 	return 0;
 1516              		.loc 6 74 9
 1517 0168 BB000000 		movl	$0, %ebx	#, _47
 1517      00
 1518              	# test.cpp:70: 	sCore x=a->add(v, b);
  70:test.cpp      **** 	a->print();
 1519              		.loc 6 70 21
 1520 016d 488D45C0 		leaq	-64(%rbp), %rax	#, tmp125
 1521 0171 4889C7   		movq	%rax, %rdi	# tmp125,
 1522 0174 E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1522      00
 1523              	# test.cpp:67: 	sComp b=std::make_shared<Complex>(7.0, 11.0);
  67:test.cpp      **** 	//sCore c1=a;
 1524              		.loc 6 67 45
 1525 0179 488D45B0 		leaq	-80(%rbp), %rax	#, tmp126
 1526 017d 4889C7   		movq	%rax, %rdi	# tmp126,
 1527 0180 E8000000 		call	_ZNSt10shared_ptrI7ComplexED1Ev	#
 1527      00
 1528              	# test.cpp:66: 	sComp a=std::make_shared<Complex>(3.0, 5.0);
  66:test.cpp      **** 	sComp b=std::make_shared<Complex>(7.0, 11.0);
 1529              		.loc 6 66 44
 1530 0185 488D45A0 		leaq	-96(%rbp), %rax	#, tmp127
 1531 0189 4889C7   		movq	%rax, %rdi	# tmp127,
 1532 018c E8000000 		call	_ZNSt10shared_ptrI7ComplexED1Ev	#
 1532      00
 1533              	# test.cpp:62: 	Visitor v;
  62:test.cpp      **** 	//sV sv{v};
 1534              		.loc 6 62 10
 1535 0191 488D4590 		leaq	-112(%rbp), %rax	#, tmp128
 1536 0195 4889C7   		movq	%rax, %rdi	# tmp128,
 1537 0198 E8000000 		call	_ZN7VisitorD1Ev	#
 1537      00
 1538 019d 89D8     		movl	%ebx, %eax	# _47, <retval>
 1539              	# test.cpp:75: }
  75:test.cpp      **** }
 1540              		.loc 6 75 1
 1541 019f 488B75E8 		movq	-24(%rbp), %rsi	# D.54885, tmp149
 1542 01a3 64483334 		xorq	%fs:40, %rsi	# MEM[(<address-space-1> long unsigned int *)40B], tmp149
 1542      25280000 
 1542      00
 1543 01ac 747C     		je	.L62	#,
 1544 01ae EB75     		jmp	.L67	#
 1545              	.L65:
 1546 01b0 F30F1EFA 		endbr64	
 1547 01b4 4889C3   		movq	%rax, %rbx	#, tmp132
 1548 01b7 488D4598 		leaq	-104(%rbp), %rax	#, tmp130
 1549 01bb 4889C7   		movq	%rax, %rdi	# tmp130,
 1550 01be E8000000 		call	_ZN7VisitorD1Ev	#
 1550      00
 1551 01c3 488D45D0 		leaq	-48(%rbp), %rax	#, tmp135
 1552 01c7 4889C7   		movq	%rax, %rdi	# tmp135,
 1553 01ca E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1553      00
 1554 01cf EB13     		jmp	.L58	#
 1555              	.L66:
 1556 01d1 F30F1EFA 		endbr64	
 1557 01d5 4889C3   		movq	%rax, %rbx	#, tmp139
 1558              	# test.cpp:70: 	sCore x=a->add(v, b);
  70:test.cpp      **** 	a->print();
 1559              		.loc 6 70 21
 1560 01d8 488D45C0 		leaq	-64(%rbp), %rax	#, tmp138
 1561 01dc 4889C7   		movq	%rax, %rdi	# tmp138,
 1562 01df E8000000 		call	_ZNSt10shared_ptrI4CoreED1Ev	#
 1562      00
 1563              	.L58:
 1564              	# test.cpp:67: 	sComp b=std::make_shared<Complex>(7.0, 11.0);
  67:test.cpp      **** 	//sCore c1=a;
 1565              		.loc 6 67 45
 1566 01e4 488D45B0 		leaq	-80(%rbp), %rax	#, tmp141
 1567 01e8 4889C7   		movq	%rax, %rdi	# tmp141,
 1568 01eb E8000000 		call	_ZNSt10shared_ptrI7ComplexED1Ev	#
 1568      00
 1569 01f0 EB07     		jmp	.L60	#
 1570              	.L64:
 1571 01f2 F30F1EFA 		endbr64	
 1572 01f6 4889C3   		movq	%rax, %rbx	#, tmp142
 1573              	.L60:
 1574              	# test.cpp:66: 	sComp a=std::make_shared<Complex>(3.0, 5.0);
  66:test.cpp      **** 	sComp b=std::make_shared<Complex>(7.0, 11.0);
 1575              		.loc 6 66 44
 1576 01f9 488D45A0 		leaq	-96(%rbp), %rax	#, tmp144
 1577 01fd 4889C7   		movq	%rax, %rdi	# tmp144,
 1578 0200 E8000000 		call	_ZNSt10shared_ptrI7ComplexED1Ev	#
 1578      00
 1579 0205 EB07     		jmp	.L61	#
 1580              	.L63:
 1581 0207 F30F1EFA 		endbr64	
 1582 020b 4889C3   		movq	%rax, %rbx	#, tmp145
 1583              	.L61:
 1584              	# test.cpp:62: 	Visitor v;
  62:test.cpp      **** 	//sV sv{v};
 1585              		.loc 6 62 10
 1586 020e 488D4590 		leaq	-112(%rbp), %rax	#, tmp147
 1587 0212 4889C7   		movq	%rax, %rdi	# tmp147,
 1588 0215 E8000000 		call	_ZN7VisitorD1Ev	#
 1588      00
 1589 021a 4889D8   		movq	%rbx, %rax	# tmp145, D.54883
 1590 021d 4889C7   		movq	%rax, %rdi	# D.54883,
 1591              	.LEHB6:
 1592 0220 E8000000 		call	_Unwind_Resume@PLT	#
 1592      00
 1593              	.LEHE6:
 1594              	.L67:
 1595              	# test.cpp:75: }
 1596              		.loc 6 75 1
 1597 0225 E8000000 		call	__stack_chk_fail@PLT	#
 1597      00
 1598              	.L62:
 1599 022a 4883C460 		addq	$96, %rsp	#,
 1600 022e 5B       		popq	%rbx	#
 1601 022f 415C     		popq	%r12	#
 1602 0231 5D       		popq	%rbp	#
 1603              		.cfi_def_cfa 7, 8
 1604 0232 C3       		ret	
 1605              		.cfi_endproc
 1606              	.LFE2470:
 1607              		.section	.gcc_except_table,"a",@progbits
 1608              	.LLSDA2470:
 1609 0000 FF       		.byte	0xff
 1610 0001 FF       		.byte	0xff
 1611 0002 01       		.byte	0x1
 1612 0003 1C       		.uleb128 .LLSDACSE2470-.LLSDACSB2470
 1613              	.LLSDACSB2470:
 1614 0004 56       		.uleb128 .LEHB2-.LFB2470
 1615 0005 05       		.uleb128 .LEHE2-.LEHB2
 1616 0006 E803     		.uleb128 .L63-.LFB2470
 1617 0008 00       		.uleb128 0
 1618 0009 8701     		.uleb128 .LEHB3-.LFB2470
 1619 000b 05       		.uleb128 .LEHE3-.LEHB3
 1620 000c D303     		.uleb128 .L64-.LFB2470
 1621 000e 00       		.uleb128 0
 1622 000f DD01     		.uleb128 .LEHB4-.LFB2470
 1623 0011 03       		.uleb128 .LEHE4-.LEHB4
 1624 0012 9103     		.uleb128 .L65-.LFB2470
 1625 0014 00       		.uleb128 0
 1626 0015 9102     		.uleb128 .LEHB5-.LFB2470
 1627 0017 38       		.uleb128 .LEHE5-.LEHB5
 1628 0018 B203     		.uleb128 .L66-.LFB2470
 1629 001a 00       		.uleb128 0
 1630 001b 8104     		.uleb128 .LEHB6-.LFB2470
 1631 001d 05       		.uleb128 .LEHE6-.LEHB6
 1632 001e 00       		.uleb128 0
 1633 001f 00       		.uleb128 0
 1634              	.LLSDACSE2470:
 1635              		.text
 1637              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_,"axG",@progbits,_ZNSt1
 1638              		.align 2
 1639              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_
 1641              	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_:
 1642              	.LFB2713:
 733:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_pi(__r._M_pi)
 1643              		.loc 5 733 7
 1644              		.cfi_startproc
 1645 0000 F30F1EFA 		endbr64	
 1646 0004 55       		pushq	%rbp	#
 1647              		.cfi_def_cfa_offset 16
 1648              		.cfi_offset 6, -16
 1649 0005 4889E5   		movq	%rsp, %rbp	#,
 1650              		.cfi_def_cfa_register 6
 1651 0008 4883EC10 		subq	$16, %rsp	#,
 1652 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1653 0010 488975F0 		movq	%rsi, -16(%rbp)	# __r, __r
 1654              	.LBB17:
 1655              	# /usr/include/c++/9/bits/shared_ptr_base.h:734:       : _M_pi(__r._M_pi)
 734:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 1656              		.loc 5 734 19
 1657 0014 488B45F0 		movq	-16(%rbp), %rax	# __r, tmp85
 1658 0018 488B10   		movq	(%rax), %rdx	# __r_8(D)->_M_pi, _1
 1659              	# /usr/include/c++/9/bits/shared_ptr_base.h:734:       : _M_pi(__r._M_pi)
 734:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 1660              		.loc 5 734 24
 1661 001b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp86
 1662 001f 488910   		movq	%rdx, (%rax)	# _1, this_6(D)->_M_pi
 1663              	# /usr/include/c++/9/bits/shared_ptr_base.h:736: 	if (_M_pi != 0)
 736:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_add_ref_copy();
 1664              		.loc 5 736 6
 1665 0022 488B45F8 		movq	-8(%rbp), %rax	# this, tmp87
 1666 0026 488B00   		movq	(%rax), %rax	# this_6(D)->_M_pi, _2
 1667              	# /usr/include/c++/9/bits/shared_ptr_base.h:736: 	if (_M_pi != 0)
 736:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_add_ref_copy();
 1668              		.loc 5 736 2
 1669 0029 4885C0   		testq	%rax, %rax	# _2
 1670 002c 740F     		je	.L70	#,
 1671              	# /usr/include/c++/9/bits/shared_ptr_base.h:737: 	  _M_pi->_M_add_ref_copy();
 737:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 1672              		.loc 5 737 4
 1673 002e 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 1674 0032 488B00   		movq	(%rax), %rax	# this_6(D)->_M_pi, _3
 1675 0035 4889C7   		movq	%rax, %rdi	# _3,
 1676 0038 E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv	#
 1676      00
 1677              	.L70:
 1678              	.LBE17:
 1679              	# /usr/include/c++/9/bits/shared_ptr_base.h:738:       }
 738:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 1680              		.loc 5 738 7
 1681 003d 90       		nop	
 1682 003e C9       		leave	
 1683              		.cfi_def_cfa 7, 8
 1684 003f C3       		ret	
 1685              		.cfi_endproc
 1686              	.LFE2713:
 1688              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_
 1689              		.set	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_,_ZNSt14__shared_countILN9__gnu_c
 1690              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev,"axG",@progbits,_ZNSt14__s
 1691              		.align 2
 1692              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev
 1694              	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev:
 1695              	.LFB2716:
 727:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 1696              		.loc 5 727 7
 1697              		.cfi_startproc
 1698 0000 F30F1EFA 		endbr64	
 1699 0004 55       		pushq	%rbp	#
 1700              		.cfi_def_cfa_offset 16
 1701              		.cfi_offset 6, -16
 1702 0005 4889E5   		movq	%rsp, %rbp	#,
 1703              		.cfi_def_cfa_register 6
 1704 0008 4883EC10 		subq	$16, %rsp	#,
 1705 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 1706              	.LBB18:
 1707              	# /usr/include/c++/9/bits/shared_ptr_base.h:729: 	if (_M_pi != nullptr)
 729:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_release();
 1708              		.loc 5 729 6
 1709 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 1710 0014 488B00   		movq	(%rax), %rax	# this_5(D)->_M_pi, _1
 1711              	# /usr/include/c++/9/bits/shared_ptr_base.h:729: 	if (_M_pi != nullptr)
 729:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi->_M_release();
 1712              		.loc 5 729 2
 1713 0017 4885C0   		testq	%rax, %rax	# _1
 1714 001a 740F     		je	.L73	#,
 1715              	# /usr/include/c++/9/bits/shared_ptr_base.h:730: 	  _M_pi->_M_release();
 730:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 1716              		.loc 5 730 4
 1717 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 1718 0020 488B00   		movq	(%rax), %rax	# this_5(D)->_M_pi, _2
 1719 0023 4889C7   		movq	%rax, %rdi	# _2,
 1720 0026 E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	#
 1720      00
 1721              	.L73:
 1722              	.LBE18:
 1723              	# /usr/include/c++/9/bits/shared_ptr_base.h:731:       }
 731:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 1724              		.loc 5 731 7
 1725 002b 90       		nop	
 1726 002c C9       		leave	
 1727              		.cfi_def_cfa 7, 8
 1728 002d C3       		ret	
 1729              		.cfi_endproc
 1730              	.LFE2716:
 1732              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev
 1733              		.set	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev,_ZNSt14__shared_countILN9__gnu_cxx12
 1734              		.section	.text._ZN7Visitor3addI7ComplexEESt10shared_ptrI4CoreET_S4_,"axG",@progbits,_ZN7Visitor3ad
 1735              		.align 2
 1736              		.weak	_ZN7Visitor3addI7ComplexEESt10shared_ptrI4CoreET_S4_
 1738              	_ZN7Visitor3addI7ComplexEESt10shared_ptrI4CoreET_S4_:
 1739              	.LFB2718:
  56:test.cpp      **** 	return c2->_add(t);
 1740              		.loc 6 56 7
 1741              		.cfi_startproc
 1742              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1743              		.cfi_lsda 0x1b,.LLSDA2718
 1744 0000 F30F1EFA 		endbr64	
 1745 0004 55       		pushq	%rbp	#
 1746              		.cfi_def_cfa_offset 16
 1747              		.cfi_offset 6, -16
 1748 0005 4889E5   		movq	%rsp, %rbp	#,
 1749              		.cfi_def_cfa_register 6
 1750 0008 4154     		pushq	%r12	#
 1751 000a 53       		pushq	%rbx	#
 1752 000b 4883EC40 		subq	$64, %rsp	#,
 1753              		.cfi_offset 12, -24
 1754              		.cfi_offset 3, -32
 1755 000f 48897DC8 		movq	%rdi, -56(%rbp)	# .result_ptr, .result_ptr
 1756 0013 488975C0 		movq	%rsi, -64(%rbp)	# this, this
 1757 0017 488955B8 		movq	%rdx, -72(%rbp)	# t, t
 1758 001b 48894DB0 		movq	%rcx, -80(%rbp)	# c2, c2
 1759              	# test.cpp:56: sCore Visitor::add(T t, sCore c2){
  56:test.cpp      **** 	return c2->_add(t);
 1760              		.loc 6 56 7
 1761 001f 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp95
 1761      25280000 
 1761      00
 1762 0028 488945E8 		movq	%rax, -24(%rbp)	# tmp95, D.54890
 1763 002c 31C0     		xorl	%eax, %eax	# tmp95
 1764              	# test.cpp:57: 	return c2->_add(t);
  57:test.cpp      **** };
 1765              		.loc 6 57 13
 1766 002e 488B45B0 		movq	-80(%rbp), %rax	# c2, tmp87
 1767 0032 4889C7   		movq	%rax, %rdi	# tmp87,
 1768 0035 E8000000 		call	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv	#
 1768      00
 1769 003a 4889C3   		movq	%rax, %rbx	#, _7
 1770              	# test.cpp:57: 	return c2->_add(t);
  57:test.cpp      **** };
 1771              		.loc 6 57 19
 1772 003d 488B03   		movq	(%rbx), %rax	# _7->_vptr.Core, _1
 1773 0040 4883C020 		addq	$32, %rax	#, _2
 1774 0044 4C8B20   		movq	(%rax), %r12	# *_2, _3
 1775 0047 488B55B8 		movq	-72(%rbp), %rdx	# t, tmp88
 1776 004b 488D45D0 		leaq	-48(%rbp), %rax	#, tmp89
 1777 004f 4889D6   		movq	%rdx, %rsi	# tmp88,
 1778 0052 4889C7   		movq	%rax, %rdi	# tmp89,
 1779 0055 E8000000 		call	_ZN7ComplexC1ERKS_	#
 1779      00
 1780 005a 488B45C8 		movq	-56(%rbp), %rax	# <retval>, tmp90
 1781 005e 488D55D0 		leaq	-48(%rbp), %rdx	#, tmp91
 1782 0062 4889DE   		movq	%rbx, %rsi	# _7,
 1783 0065 4889C7   		movq	%rax, %rdi	# tmp90,
 1784              	.LEHB7:
 1785 0068 41FFD4   		call	*%r12	# _3
 1786              	.LVL4:
 1787              	.LEHE7:
 1788 006b 488D45D0 		leaq	-48(%rbp), %rax	#, tmp92
 1789 006f 4889C7   		movq	%rax, %rdi	# tmp92,
 1790 0072 E8000000 		call	_ZN7ComplexD1Ev	#
 1790      00
 1791              	# test.cpp:58: };
  58:test.cpp      **** 
 1792              		.loc 6 58 1
 1793 0077 488B45E8 		movq	-24(%rbp), %rax	# D.54890, tmp96
 1794 007b 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp96
 1794      25280000 
 1794      00
 1795 0084 7425     		je	.L77	#,
 1796 0086 EB1E     		jmp	.L79	#
 1797              	.L78:
 1798 0088 F30F1EFA 		endbr64	
 1799 008c 4889C3   		movq	%rax, %rbx	#, tmp94
 1800              	# test.cpp:57: 	return c2->_add(t);
  57:test.cpp      **** };
 1801              		.loc 6 57 19
 1802 008f 488D45D0 		leaq	-48(%rbp), %rax	#, tmp93
 1803 0093 4889C7   		movq	%rax, %rdi	# tmp93,
 1804 0096 E8000000 		call	_ZN7ComplexD1Ev	#
 1804      00
 1805 009b 4889D8   		movq	%rbx, %rax	# tmp94, D.54889
 1806 009e 4889C7   		movq	%rax, %rdi	# D.54889,
 1807              	.LEHB8:
 1808 00a1 E8000000 		call	_Unwind_Resume@PLT	#
 1808      00
 1809              	.LEHE8:
 1810              	.L79:
 1811              	# test.cpp:58: };
  58:test.cpp      **** 
 1812              		.loc 6 58 1
 1813 00a6 E8000000 		call	__stack_chk_fail@PLT	#
 1813      00
 1814              	.L77:
 1815 00ab 488B45C8 		movq	-56(%rbp), %rax	# <retval>,
 1816 00af 4883C440 		addq	$64, %rsp	#,
 1817 00b3 5B       		popq	%rbx	#
 1818 00b4 415C     		popq	%r12	#
 1819 00b6 5D       		popq	%rbp	#
 1820              		.cfi_def_cfa 7, 8
 1821 00b7 C3       		ret	
 1822              		.cfi_endproc
 1823              	.LFE2718:
 1824              		.section	.gcc_except_table
 1825              	.LLSDA2718:
 1826 0020 FF       		.byte	0xff
 1827 0021 FF       		.byte	0xff
 1828 0022 01       		.byte	0x1
 1829 0023 0A       		.uleb128 .LLSDACSE2718-.LLSDACSB2718
 1830              	.LLSDACSB2718:
 1831 0024 68       		.uleb128 .LEHB7-.LFB2718
 1832 0025 03       		.uleb128 .LEHE7-.LEHB7
 1833 0026 8801     		.uleb128 .L78-.LFB2718
 1834 0028 00       		.uleb128 0
 1835 0029 A101     		.uleb128 .LEHB8-.LFB2718
 1836 002b 05       		.uleb128 .LEHE8-.LEHB8
 1837 002c 00       		.uleb128 0
 1838 002d 00       		.uleb128 0
 1839              	.LLSDACSE2718:
 1840              		.section	.text._ZN7Visitor3addI7ComplexEESt10shared_ptrI4CoreET_S4_,"axG",@progbits,_ZN7Visitor3ad
 1842              		.section	.text._ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_,"axG",@progbits,_ZSt11make_
 1843              		.weak	_ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_
 1845              	_ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_:
 1846              	.LFB2722:
 130:/usr/include/c++/9/bits/shared_ptr.h **** 
 131:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 132:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct a %shared_ptr that owns the pointer @a __p.
 133:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A pointer that is convertible to element_type*.
 134:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 1 && get() == __p
 135:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  std::bad_alloc, in which case @c delete @a __p is called.
 136:/usr/include/c++/9/bits/shared_ptr.h ****        */
 137:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<_Yp*>>
 138:/usr/include/c++/9/bits/shared_ptr.h **** 	explicit
 139:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
 140:/usr/include/c++/9/bits/shared_ptr.h **** 
 141:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 142:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct a %shared_ptr that owns the pointer @a __p
 143:/usr/include/c++/9/bits/shared_ptr.h ****        *          and the deleter @a __d.
 144:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A pointer.
 145:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __d  A deleter.
 146:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 1 && get() == __p
 147:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  std::bad_alloc, in which case @a __d(__p) is called.
 148:/usr/include/c++/9/bits/shared_ptr.h ****        *
 149:/usr/include/c++/9/bits/shared_ptr.h ****        *  Requirements: _Deleter's copy constructor and destructor must
 150:/usr/include/c++/9/bits/shared_ptr.h ****        *  not throw
 151:/usr/include/c++/9/bits/shared_ptr.h ****        *
 152:/usr/include/c++/9/bits/shared_ptr.h ****        *  __shared_ptr will release __p by calling __d(__p)
 153:/usr/include/c++/9/bits/shared_ptr.h ****        */
 154:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Deleter,
 155:/usr/include/c++/9/bits/shared_ptr.h **** 	       typename = _Constructible<_Yp*, _Deleter>>
 156:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(_Yp* __p, _Deleter __d)
 157:/usr/include/c++/9/bits/shared_ptr.h ****         : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 158:/usr/include/c++/9/bits/shared_ptr.h **** 
 159:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 160:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct a %shared_ptr that owns a null pointer
 161:/usr/include/c++/9/bits/shared_ptr.h ****        *          and the deleter @a __d.
 162:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A null pointer constant.
 163:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __d  A deleter.
 164:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 1 && get() == __p
 165:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  std::bad_alloc, in which case @a __d(__p) is called.
 166:/usr/include/c++/9/bits/shared_ptr.h ****        *
 167:/usr/include/c++/9/bits/shared_ptr.h ****        *  Requirements: _Deleter's copy constructor and destructor must
 168:/usr/include/c++/9/bits/shared_ptr.h ****        *  not throw
 169:/usr/include/c++/9/bits/shared_ptr.h ****        *
 170:/usr/include/c++/9/bits/shared_ptr.h ****        *  The last owner will call __d(__p)
 171:/usr/include/c++/9/bits/shared_ptr.h ****        */
 172:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Deleter>
 173:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(nullptr_t __p, _Deleter __d)
 174:/usr/include/c++/9/bits/shared_ptr.h ****         : __shared_ptr<_Tp>(__p, std::move(__d)) { }
 175:/usr/include/c++/9/bits/shared_ptr.h **** 
 176:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 177:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct a %shared_ptr that owns the pointer @a __p
 178:/usr/include/c++/9/bits/shared_ptr.h ****        *          and the deleter @a __d.
 179:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A pointer.
 180:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __d  A deleter.
 181:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __a  An allocator.
 182:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 1 && get() == __p
 183:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  std::bad_alloc, in which case @a __d(__p) is called.
 184:/usr/include/c++/9/bits/shared_ptr.h ****        *
 185:/usr/include/c++/9/bits/shared_ptr.h ****        *  Requirements: _Deleter's copy constructor and destructor must
 186:/usr/include/c++/9/bits/shared_ptr.h ****        *  not throw _Alloc's copy constructor and destructor must not
 187:/usr/include/c++/9/bits/shared_ptr.h ****        *  throw.
 188:/usr/include/c++/9/bits/shared_ptr.h ****        *
 189:/usr/include/c++/9/bits/shared_ptr.h ****        *  __shared_ptr will release __p by calling __d(__p)
 190:/usr/include/c++/9/bits/shared_ptr.h ****        */
 191:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Deleter, typename _Alloc,
 192:/usr/include/c++/9/bits/shared_ptr.h **** 	       typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 193:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 194:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
 195:/usr/include/c++/9/bits/shared_ptr.h **** 
 196:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 197:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct a %shared_ptr that owns a null pointer
 198:/usr/include/c++/9/bits/shared_ptr.h ****        *          and the deleter @a __d.
 199:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A null pointer constant.
 200:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __d  A deleter.
 201:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __a  An allocator.
 202:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 1 && get() == __p
 203:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  std::bad_alloc, in which case @a __d(__p) is called.
 204:/usr/include/c++/9/bits/shared_ptr.h ****        *
 205:/usr/include/c++/9/bits/shared_ptr.h ****        *  Requirements: _Deleter's copy constructor and destructor must
 206:/usr/include/c++/9/bits/shared_ptr.h ****        *  not throw _Alloc's copy constructor and destructor must not
 207:/usr/include/c++/9/bits/shared_ptr.h ****        *  throw.
 208:/usr/include/c++/9/bits/shared_ptr.h ****        *
 209:/usr/include/c++/9/bits/shared_ptr.h ****        *  The last owner will call __d(__p)
 210:/usr/include/c++/9/bits/shared_ptr.h ****        */
 211:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Deleter, typename _Alloc>
 212:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 213:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
 214:/usr/include/c++/9/bits/shared_ptr.h **** 
 215:/usr/include/c++/9/bits/shared_ptr.h ****       // Aliasing constructor
 216:/usr/include/c++/9/bits/shared_ptr.h **** 
 217:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 218:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Constructs a %shared_ptr instance that stores @a __p
 219:/usr/include/c++/9/bits/shared_ptr.h ****        *          and shares ownership with @a __r.
 220:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __r  A %shared_ptr.
 221:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __p  A pointer that will remain valid while @a *__r is valid.
 222:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   get() == __p && use_count() == __r.use_count()
 223:/usr/include/c++/9/bits/shared_ptr.h ****        *
 224:/usr/include/c++/9/bits/shared_ptr.h ****        *  This can be used to construct a @c shared_ptr to a sub-object
 225:/usr/include/c++/9/bits/shared_ptr.h ****        *  of an object managed by an existing @c shared_ptr.
 226:/usr/include/c++/9/bits/shared_ptr.h ****        *
 227:/usr/include/c++/9/bits/shared_ptr.h ****        * @code
 228:/usr/include/c++/9/bits/shared_ptr.h ****        * shared_ptr< pair<int,int> > pii(new pair<int,int>());
 229:/usr/include/c++/9/bits/shared_ptr.h ****        * shared_ptr<int> pi(pii, &pii->first);
 230:/usr/include/c++/9/bits/shared_ptr.h ****        * assert(pii.use_count() == 2);
 231:/usr/include/c++/9/bits/shared_ptr.h ****        * @endcode
 232:/usr/include/c++/9/bits/shared_ptr.h ****        */
 233:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 234:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 235:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__r, __p) { }
 236:/usr/include/c++/9/bits/shared_ptr.h **** 
 237:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 238:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  If @a __r is empty, constructs an empty %shared_ptr;
 239:/usr/include/c++/9/bits/shared_ptr.h ****        *          otherwise construct a %shared_ptr that shares ownership
 240:/usr/include/c++/9/bits/shared_ptr.h ****        *          with @a __r.
 241:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __r  A %shared_ptr.
 242:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   get() == __r.get() && use_count() == __r.use_count()
 243:/usr/include/c++/9/bits/shared_ptr.h ****        */
 244:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp,
 245:/usr/include/c++/9/bits/shared_ptr.h **** 	       typename = _Constructible<const shared_ptr<_Yp>&>>
 246:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 247:/usr/include/c++/9/bits/shared_ptr.h ****         : __shared_ptr<_Tp>(__r) { }
 248:/usr/include/c++/9/bits/shared_ptr.h **** 
 249:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 250:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Move-constructs a %shared_ptr instance from @a __r.
 251:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __r  A %shared_ptr rvalue.
 252:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   *this contains the old value of @a __r, @a __r is empty.
 253:/usr/include/c++/9/bits/shared_ptr.h ****        */
 254:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr(shared_ptr&& __r) noexcept
 255:/usr/include/c++/9/bits/shared_ptr.h ****       : __shared_ptr<_Tp>(std::move(__r)) { }
 256:/usr/include/c++/9/bits/shared_ptr.h **** 
 257:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 258:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Move-constructs a %shared_ptr instance from @a __r.
 259:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __r  A %shared_ptr rvalue.
 260:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   *this contains the old value of @a __r, @a __r is empty.
 261:/usr/include/c++/9/bits/shared_ptr.h ****        */
 262:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 263:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 264:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(std::move(__r)) { }
 265:/usr/include/c++/9/bits/shared_ptr.h **** 
 266:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 267:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Constructs a %shared_ptr that shares ownership with @a __r
 268:/usr/include/c++/9/bits/shared_ptr.h ****        *          and stores a copy of the pointer stored in @a __r.
 269:/usr/include/c++/9/bits/shared_ptr.h ****        *  @param  __r  A weak_ptr.
 270:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == __r.use_count()
 271:/usr/include/c++/9/bits/shared_ptr.h ****        *  @throw  bad_weak_ptr when __r.expired(),
 272:/usr/include/c++/9/bits/shared_ptr.h ****        *          in which case the constructor has no effect.
 273:/usr/include/c++/9/bits/shared_ptr.h ****        */
 274:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 275:/usr/include/c++/9/bits/shared_ptr.h **** 	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 276:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__r) { }
 277:/usr/include/c++/9/bits/shared_ptr.h **** 
 278:/usr/include/c++/9/bits/shared_ptr.h **** #if _GLIBCXX_USE_DEPRECATED
 279:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic push
 280:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 281:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 282:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(auto_ptr<_Yp>&& __r);
 283:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic pop
 284:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 285:/usr/include/c++/9/bits/shared_ptr.h **** 
 286:/usr/include/c++/9/bits/shared_ptr.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:/usr/include/c++/9/bits/shared_ptr.h ****       // 2399. shared_ptr's constructor from unique_ptr should be constrained
 288:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Del,
 289:/usr/include/c++/9/bits/shared_ptr.h **** 	       typename = _Constructible<unique_ptr<_Yp, _Del>>>
 290:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 291:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(std::move(__r)) { }
 292:/usr/include/c++/9/bits/shared_ptr.h **** 
 293:/usr/include/c++/9/bits/shared_ptr.h **** #if __cplusplus <= 201402L && _GLIBCXX_USE_DEPRECATED
 294:/usr/include/c++/9/bits/shared_ptr.h ****       // This non-standard constructor exists to support conversions that
 295:/usr/include/c++/9/bits/shared_ptr.h ****       // were possible in C++11 and C++14 but are ill-formed in C++17.
 296:/usr/include/c++/9/bits/shared_ptr.h ****       // If an exception is thrown this constructor has no effect.
 297:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Del,
 298:/usr/include/c++/9/bits/shared_ptr.h **** 		_Constructible<unique_ptr<_Yp, _Del>, __sp_array_delete>* = 0>
 299:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 300:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }
 301:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 302:/usr/include/c++/9/bits/shared_ptr.h **** 
 303:/usr/include/c++/9/bits/shared_ptr.h ****       /**
 304:/usr/include/c++/9/bits/shared_ptr.h ****        *  @brief  Construct an empty %shared_ptr.
 305:/usr/include/c++/9/bits/shared_ptr.h ****        *  @post   use_count() == 0 && get() == nullptr
 306:/usr/include/c++/9/bits/shared_ptr.h ****        */
 307:/usr/include/c++/9/bits/shared_ptr.h ****       constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 308:/usr/include/c++/9/bits/shared_ptr.h **** 
 309:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr& operator=(const shared_ptr&) noexcept = default;
 310:/usr/include/c++/9/bits/shared_ptr.h **** 
 311:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 312:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<const shared_ptr<_Yp>&>
 313:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(const shared_ptr<_Yp>& __r) noexcept
 314:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 315:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__shared_ptr<_Tp>::operator=(__r);
 316:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 317:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 318:/usr/include/c++/9/bits/shared_ptr.h **** 
 319:/usr/include/c++/9/bits/shared_ptr.h **** #if _GLIBCXX_USE_DEPRECATED
 320:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic push
 321:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 322:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 323:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<auto_ptr<_Yp>>
 324:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(auto_ptr<_Yp>&& __r)
 325:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 326:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
 327:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 328:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 329:/usr/include/c++/9/bits/shared_ptr.h **** #pragma GCC diagnostic pop
 330:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 331:/usr/include/c++/9/bits/shared_ptr.h **** 
 332:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr&
 333:/usr/include/c++/9/bits/shared_ptr.h ****       operator=(shared_ptr&& __r) noexcept
 334:/usr/include/c++/9/bits/shared_ptr.h ****       {
 335:/usr/include/c++/9/bits/shared_ptr.h **** 	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 336:/usr/include/c++/9/bits/shared_ptr.h **** 	return *this;
 337:/usr/include/c++/9/bits/shared_ptr.h ****       }
 338:/usr/include/c++/9/bits/shared_ptr.h **** 
 339:/usr/include/c++/9/bits/shared_ptr.h ****       template<class _Yp>
 340:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<shared_ptr<_Yp>>
 341:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(shared_ptr<_Yp>&& __r) noexcept
 342:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 343:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
 344:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 345:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 346:/usr/include/c++/9/bits/shared_ptr.h **** 
 347:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Del>
 348:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<unique_ptr<_Yp, _Del>>
 349:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(unique_ptr<_Yp, _Del>&& __r)
 350:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 351:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__shared_ptr<_Tp>::operator=(std::move(__r));
 352:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 353:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 354:/usr/include/c++/9/bits/shared_ptr.h **** 
 355:/usr/include/c++/9/bits/shared_ptr.h ****     private:
 356:/usr/include/c++/9/bits/shared_ptr.h ****       // This constructor is non-standard, it is used by allocate_shared.
 357:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Alloc, typename... _Args>
 358:/usr/include/c++/9/bits/shared_ptr.h **** 	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 359:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 360:/usr/include/c++/9/bits/shared_ptr.h **** 	{ }
 361:/usr/include/c++/9/bits/shared_ptr.h **** 
 362:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename _Alloc, typename... _Args>
 363:/usr/include/c++/9/bits/shared_ptr.h **** 	friend shared_ptr<_Yp>
 364:/usr/include/c++/9/bits/shared_ptr.h **** 	allocate_shared(const _Alloc& __a, _Args&&... __args);
 365:/usr/include/c++/9/bits/shared_ptr.h **** 
 366:/usr/include/c++/9/bits/shared_ptr.h ****       // This constructor is non-standard, it is used by weak_ptr::lock().
 367:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
 368:/usr/include/c++/9/bits/shared_ptr.h ****       : __shared_ptr<_Tp>(__r, std::nothrow) { }
 369:/usr/include/c++/9/bits/shared_ptr.h **** 
 370:/usr/include/c++/9/bits/shared_ptr.h ****       friend class weak_ptr<_Tp>;
 371:/usr/include/c++/9/bits/shared_ptr.h ****     };
 372:/usr/include/c++/9/bits/shared_ptr.h **** 
 373:/usr/include/c++/9/bits/shared_ptr.h **** #if __cpp_deduction_guides >= 201606
 374:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 375:/usr/include/c++/9/bits/shared_ptr.h ****     shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;
 376:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Del>
 377:/usr/include/c++/9/bits/shared_ptr.h ****     shared_ptr(unique_ptr<_Tp, _Del>) ->  shared_ptr<_Tp>;
 378:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 379:/usr/include/c++/9/bits/shared_ptr.h **** 
 380:/usr/include/c++/9/bits/shared_ptr.h ****   // 20.7.2.2.7 shared_ptr comparisons
 381:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 382:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 383:/usr/include/c++/9/bits/shared_ptr.h ****     operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 384:/usr/include/c++/9/bits/shared_ptr.h ****     { return __a.get() == __b.get(); }
 385:/usr/include/c++/9/bits/shared_ptr.h **** 
 386:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 387:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 388:/usr/include/c++/9/bits/shared_ptr.h ****     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 389:/usr/include/c++/9/bits/shared_ptr.h ****     { return !__a; }
 390:/usr/include/c++/9/bits/shared_ptr.h **** 
 391:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 392:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 393:/usr/include/c++/9/bits/shared_ptr.h ****     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 394:/usr/include/c++/9/bits/shared_ptr.h ****     { return !__a; }
 395:/usr/include/c++/9/bits/shared_ptr.h **** 
 396:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 397:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 398:/usr/include/c++/9/bits/shared_ptr.h ****     operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 399:/usr/include/c++/9/bits/shared_ptr.h ****     { return __a.get() != __b.get(); }
 400:/usr/include/c++/9/bits/shared_ptr.h **** 
 401:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 402:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 403:/usr/include/c++/9/bits/shared_ptr.h ****     operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 404:/usr/include/c++/9/bits/shared_ptr.h ****     { return (bool)__a; }
 405:/usr/include/c++/9/bits/shared_ptr.h **** 
 406:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 407:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 408:/usr/include/c++/9/bits/shared_ptr.h ****     operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 409:/usr/include/c++/9/bits/shared_ptr.h ****     { return (bool)__a; }
 410:/usr/include/c++/9/bits/shared_ptr.h **** 
 411:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 412:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 413:/usr/include/c++/9/bits/shared_ptr.h ****     operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 414:/usr/include/c++/9/bits/shared_ptr.h ****     {
 415:/usr/include/c++/9/bits/shared_ptr.h ****       using _Tp_elt = typename shared_ptr<_Tp>::element_type;
 416:/usr/include/c++/9/bits/shared_ptr.h ****       using _Up_elt = typename shared_ptr<_Up>::element_type;
 417:/usr/include/c++/9/bits/shared_ptr.h ****       using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
 418:/usr/include/c++/9/bits/shared_ptr.h ****       return less<_Vp>()(__a.get(), __b.get());
 419:/usr/include/c++/9/bits/shared_ptr.h ****     }
 420:/usr/include/c++/9/bits/shared_ptr.h **** 
 421:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 422:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 423:/usr/include/c++/9/bits/shared_ptr.h ****     operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 424:/usr/include/c++/9/bits/shared_ptr.h ****     {
 425:/usr/include/c++/9/bits/shared_ptr.h ****       using _Tp_elt = typename shared_ptr<_Tp>::element_type;
 426:/usr/include/c++/9/bits/shared_ptr.h ****       return less<_Tp_elt*>()(__a.get(), nullptr);
 427:/usr/include/c++/9/bits/shared_ptr.h ****     }
 428:/usr/include/c++/9/bits/shared_ptr.h **** 
 429:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 430:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 431:/usr/include/c++/9/bits/shared_ptr.h ****     operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 432:/usr/include/c++/9/bits/shared_ptr.h ****     {
 433:/usr/include/c++/9/bits/shared_ptr.h ****       using _Tp_elt = typename shared_ptr<_Tp>::element_type;
 434:/usr/include/c++/9/bits/shared_ptr.h ****       return less<_Tp_elt*>()(nullptr, __a.get());
 435:/usr/include/c++/9/bits/shared_ptr.h ****     }
 436:/usr/include/c++/9/bits/shared_ptr.h **** 
 437:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 438:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 439:/usr/include/c++/9/bits/shared_ptr.h ****     operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 440:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(__b < __a); }
 441:/usr/include/c++/9/bits/shared_ptr.h **** 
 442:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 443:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 444:/usr/include/c++/9/bits/shared_ptr.h ****     operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 445:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(nullptr < __a); }
 446:/usr/include/c++/9/bits/shared_ptr.h **** 
 447:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 448:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 449:/usr/include/c++/9/bits/shared_ptr.h ****     operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 450:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(__a < nullptr); }
 451:/usr/include/c++/9/bits/shared_ptr.h **** 
 452:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 453:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 454:/usr/include/c++/9/bits/shared_ptr.h ****     operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 455:/usr/include/c++/9/bits/shared_ptr.h ****     { return (__b < __a); }
 456:/usr/include/c++/9/bits/shared_ptr.h **** 
 457:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 458:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 459:/usr/include/c++/9/bits/shared_ptr.h ****     operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 460:/usr/include/c++/9/bits/shared_ptr.h ****     { return nullptr < __a; }
 461:/usr/include/c++/9/bits/shared_ptr.h **** 
 462:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 463:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 464:/usr/include/c++/9/bits/shared_ptr.h ****     operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 465:/usr/include/c++/9/bits/shared_ptr.h ****     { return __a < nullptr; }
 466:/usr/include/c++/9/bits/shared_ptr.h **** 
 467:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 468:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 469:/usr/include/c++/9/bits/shared_ptr.h ****     operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 470:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(__a < __b); }
 471:/usr/include/c++/9/bits/shared_ptr.h **** 
 472:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 473:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 474:/usr/include/c++/9/bits/shared_ptr.h ****     operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
 475:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(__a < nullptr); }
 476:/usr/include/c++/9/bits/shared_ptr.h **** 
 477:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 478:/usr/include/c++/9/bits/shared_ptr.h ****     _GLIBCXX_NODISCARD inline bool
 479:/usr/include/c++/9/bits/shared_ptr.h ****     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
 480:/usr/include/c++/9/bits/shared_ptr.h ****     { return !(nullptr < __a); }
 481:/usr/include/c++/9/bits/shared_ptr.h **** 
 482:/usr/include/c++/9/bits/shared_ptr.h ****   // 20.7.2.2.8 shared_ptr specialized algorithms.
 483:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 484:/usr/include/c++/9/bits/shared_ptr.h ****     inline void
 485:/usr/include/c++/9/bits/shared_ptr.h ****     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
 486:/usr/include/c++/9/bits/shared_ptr.h ****     { __a.swap(__b); }
 487:/usr/include/c++/9/bits/shared_ptr.h **** 
 488:/usr/include/c++/9/bits/shared_ptr.h ****   // 20.7.2.2.9 shared_ptr casts.
 489:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 490:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 491:/usr/include/c++/9/bits/shared_ptr.h ****     static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
 492:/usr/include/c++/9/bits/shared_ptr.h ****     {
 493:/usr/include/c++/9/bits/shared_ptr.h ****       using _Sp = shared_ptr<_Tp>;
 494:/usr/include/c++/9/bits/shared_ptr.h ****       return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
 495:/usr/include/c++/9/bits/shared_ptr.h ****     }
 496:/usr/include/c++/9/bits/shared_ptr.h **** 
 497:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 498:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 499:/usr/include/c++/9/bits/shared_ptr.h ****     const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
 500:/usr/include/c++/9/bits/shared_ptr.h ****     {
 501:/usr/include/c++/9/bits/shared_ptr.h ****       using _Sp = shared_ptr<_Tp>;
 502:/usr/include/c++/9/bits/shared_ptr.h ****       return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
 503:/usr/include/c++/9/bits/shared_ptr.h ****     }
 504:/usr/include/c++/9/bits/shared_ptr.h **** 
 505:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 506:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 507:/usr/include/c++/9/bits/shared_ptr.h ****     dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
 508:/usr/include/c++/9/bits/shared_ptr.h ****     {
 509:/usr/include/c++/9/bits/shared_ptr.h ****       using _Sp = shared_ptr<_Tp>;
 510:/usr/include/c++/9/bits/shared_ptr.h ****       if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 511:/usr/include/c++/9/bits/shared_ptr.h **** 	return _Sp(__r, __p);
 512:/usr/include/c++/9/bits/shared_ptr.h ****       return _Sp();
 513:/usr/include/c++/9/bits/shared_ptr.h ****     }
 514:/usr/include/c++/9/bits/shared_ptr.h **** 
 515:/usr/include/c++/9/bits/shared_ptr.h **** #if __cplusplus > 201402L
 516:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Up>
 517:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 518:/usr/include/c++/9/bits/shared_ptr.h ****     reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept
 519:/usr/include/c++/9/bits/shared_ptr.h ****     {
 520:/usr/include/c++/9/bits/shared_ptr.h ****       using _Sp = shared_ptr<_Tp>;
 521:/usr/include/c++/9/bits/shared_ptr.h ****       return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));
 522:/usr/include/c++/9/bits/shared_ptr.h ****     }
 523:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 524:/usr/include/c++/9/bits/shared_ptr.h **** 
 525:/usr/include/c++/9/bits/shared_ptr.h ****   /**
 526:/usr/include/c++/9/bits/shared_ptr.h ****    *  @brief  A smart pointer with weak semantics.
 527:/usr/include/c++/9/bits/shared_ptr.h ****    *
 528:/usr/include/c++/9/bits/shared_ptr.h ****    *  With forwarding constructors and assignment operators.
 529:/usr/include/c++/9/bits/shared_ptr.h ****    */
 530:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 531:/usr/include/c++/9/bits/shared_ptr.h ****     class weak_ptr : public __weak_ptr<_Tp>
 532:/usr/include/c++/9/bits/shared_ptr.h ****     {
 533:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Arg>
 534:/usr/include/c++/9/bits/shared_ptr.h **** 	using _Constructible = typename enable_if<
 535:/usr/include/c++/9/bits/shared_ptr.h **** 	  is_constructible<__weak_ptr<_Tp>, _Arg>::value
 536:/usr/include/c++/9/bits/shared_ptr.h **** 	>::type;
 537:/usr/include/c++/9/bits/shared_ptr.h **** 
 538:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Arg>
 539:/usr/include/c++/9/bits/shared_ptr.h **** 	using _Assignable = typename enable_if<
 540:/usr/include/c++/9/bits/shared_ptr.h **** 	  is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 541:/usr/include/c++/9/bits/shared_ptr.h **** 	>::type;
 542:/usr/include/c++/9/bits/shared_ptr.h **** 
 543:/usr/include/c++/9/bits/shared_ptr.h ****     public:
 544:/usr/include/c++/9/bits/shared_ptr.h ****       constexpr weak_ptr() noexcept = default;
 545:/usr/include/c++/9/bits/shared_ptr.h **** 
 546:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp,
 547:/usr/include/c++/9/bits/shared_ptr.h **** 	       typename = _Constructible<const shared_ptr<_Yp>&>>
 548:/usr/include/c++/9/bits/shared_ptr.h **** 	weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 549:/usr/include/c++/9/bits/shared_ptr.h **** 	: __weak_ptr<_Tp>(__r) { }
 550:/usr/include/c++/9/bits/shared_ptr.h **** 
 551:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr(const weak_ptr&) noexcept = default;
 552:/usr/include/c++/9/bits/shared_ptr.h **** 
 553:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 554:/usr/include/c++/9/bits/shared_ptr.h **** 	weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 555:/usr/include/c++/9/bits/shared_ptr.h **** 	: __weak_ptr<_Tp>(__r) { }
 556:/usr/include/c++/9/bits/shared_ptr.h **** 
 557:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr(weak_ptr&&) noexcept = default;
 558:/usr/include/c++/9/bits/shared_ptr.h **** 
 559:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 560:/usr/include/c++/9/bits/shared_ptr.h **** 	weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 561:/usr/include/c++/9/bits/shared_ptr.h **** 	: __weak_ptr<_Tp>(std::move(__r)) { }
 562:/usr/include/c++/9/bits/shared_ptr.h **** 
 563:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr&
 564:/usr/include/c++/9/bits/shared_ptr.h ****       operator=(const weak_ptr& __r) noexcept = default;
 565:/usr/include/c++/9/bits/shared_ptr.h **** 
 566:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 567:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<const weak_ptr<_Yp>&>
 568:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(const weak_ptr<_Yp>& __r) noexcept
 569:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 570:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__weak_ptr<_Tp>::operator=(__r);
 571:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 572:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 573:/usr/include/c++/9/bits/shared_ptr.h **** 
 574:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 575:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<const shared_ptr<_Yp>&>
 576:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(const shared_ptr<_Yp>& __r) noexcept
 577:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 578:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__weak_ptr<_Tp>::operator=(__r);
 579:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 580:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 581:/usr/include/c++/9/bits/shared_ptr.h **** 
 582:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr&
 583:/usr/include/c++/9/bits/shared_ptr.h ****       operator=(weak_ptr&& __r) noexcept = default;
 584:/usr/include/c++/9/bits/shared_ptr.h **** 
 585:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Yp>
 586:/usr/include/c++/9/bits/shared_ptr.h **** 	_Assignable<weak_ptr<_Yp>>
 587:/usr/include/c++/9/bits/shared_ptr.h **** 	operator=(weak_ptr<_Yp>&& __r) noexcept
 588:/usr/include/c++/9/bits/shared_ptr.h **** 	{
 589:/usr/include/c++/9/bits/shared_ptr.h **** 	  this->__weak_ptr<_Tp>::operator=(std::move(__r));
 590:/usr/include/c++/9/bits/shared_ptr.h **** 	  return *this;
 591:/usr/include/c++/9/bits/shared_ptr.h **** 	}
 592:/usr/include/c++/9/bits/shared_ptr.h **** 
 593:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr<_Tp>
 594:/usr/include/c++/9/bits/shared_ptr.h ****       lock() const noexcept
 595:/usr/include/c++/9/bits/shared_ptr.h ****       { return shared_ptr<_Tp>(*this, std::nothrow); }
 596:/usr/include/c++/9/bits/shared_ptr.h ****     };
 597:/usr/include/c++/9/bits/shared_ptr.h **** 
 598:/usr/include/c++/9/bits/shared_ptr.h **** #if __cpp_deduction_guides >= 201606
 599:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 600:/usr/include/c++/9/bits/shared_ptr.h ****     weak_ptr(shared_ptr<_Tp>) ->  weak_ptr<_Tp>;
 601:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 602:/usr/include/c++/9/bits/shared_ptr.h **** 
 603:/usr/include/c++/9/bits/shared_ptr.h ****   // 20.7.2.3.6 weak_ptr specialized algorithms.
 604:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 605:/usr/include/c++/9/bits/shared_ptr.h ****     inline void
 606:/usr/include/c++/9/bits/shared_ptr.h ****     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
 607:/usr/include/c++/9/bits/shared_ptr.h ****     { __a.swap(__b); }
 608:/usr/include/c++/9/bits/shared_ptr.h **** 
 609:/usr/include/c++/9/bits/shared_ptr.h **** 
 610:/usr/include/c++/9/bits/shared_ptr.h ****   /// Primary template owner_less
 611:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp = void>
 612:/usr/include/c++/9/bits/shared_ptr.h ****     struct owner_less;
 613:/usr/include/c++/9/bits/shared_ptr.h **** 
 614:/usr/include/c++/9/bits/shared_ptr.h ****   /// Void specialization of owner_less
 615:/usr/include/c++/9/bits/shared_ptr.h ****   template<>
 616:/usr/include/c++/9/bits/shared_ptr.h ****     struct owner_less<void> : _Sp_owner_less<void, void>
 617:/usr/include/c++/9/bits/shared_ptr.h ****     { };
 618:/usr/include/c++/9/bits/shared_ptr.h **** 
 619:/usr/include/c++/9/bits/shared_ptr.h ****   /// Partial specialization of owner_less for shared_ptr.
 620:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 621:/usr/include/c++/9/bits/shared_ptr.h ****     struct owner_less<shared_ptr<_Tp>>
 622:/usr/include/c++/9/bits/shared_ptr.h ****     : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
 623:/usr/include/c++/9/bits/shared_ptr.h ****     { };
 624:/usr/include/c++/9/bits/shared_ptr.h **** 
 625:/usr/include/c++/9/bits/shared_ptr.h ****   /// Partial specialization of owner_less for weak_ptr.
 626:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 627:/usr/include/c++/9/bits/shared_ptr.h ****     struct owner_less<weak_ptr<_Tp>>
 628:/usr/include/c++/9/bits/shared_ptr.h ****     : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
 629:/usr/include/c++/9/bits/shared_ptr.h ****     { };
 630:/usr/include/c++/9/bits/shared_ptr.h **** 
 631:/usr/include/c++/9/bits/shared_ptr.h ****   /**
 632:/usr/include/c++/9/bits/shared_ptr.h ****    *  @brief Base class allowing use of member function shared_from_this.
 633:/usr/include/c++/9/bits/shared_ptr.h ****    */
 634:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp>
 635:/usr/include/c++/9/bits/shared_ptr.h ****     class enable_shared_from_this
 636:/usr/include/c++/9/bits/shared_ptr.h ****     {
 637:/usr/include/c++/9/bits/shared_ptr.h ****     protected:
 638:/usr/include/c++/9/bits/shared_ptr.h ****       constexpr enable_shared_from_this() noexcept { }
 639:/usr/include/c++/9/bits/shared_ptr.h **** 
 640:/usr/include/c++/9/bits/shared_ptr.h ****       enable_shared_from_this(const enable_shared_from_this&) noexcept { }
 641:/usr/include/c++/9/bits/shared_ptr.h **** 
 642:/usr/include/c++/9/bits/shared_ptr.h ****       enable_shared_from_this&
 643:/usr/include/c++/9/bits/shared_ptr.h ****       operator=(const enable_shared_from_this&) noexcept
 644:/usr/include/c++/9/bits/shared_ptr.h ****       { return *this; }
 645:/usr/include/c++/9/bits/shared_ptr.h **** 
 646:/usr/include/c++/9/bits/shared_ptr.h ****       ~enable_shared_from_this() { }
 647:/usr/include/c++/9/bits/shared_ptr.h **** 
 648:/usr/include/c++/9/bits/shared_ptr.h ****     public:
 649:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr<_Tp>
 650:/usr/include/c++/9/bits/shared_ptr.h ****       shared_from_this()
 651:/usr/include/c++/9/bits/shared_ptr.h ****       { return shared_ptr<_Tp>(this->_M_weak_this); }
 652:/usr/include/c++/9/bits/shared_ptr.h **** 
 653:/usr/include/c++/9/bits/shared_ptr.h ****       shared_ptr<const _Tp>
 654:/usr/include/c++/9/bits/shared_ptr.h ****       shared_from_this() const
 655:/usr/include/c++/9/bits/shared_ptr.h ****       { return shared_ptr<const _Tp>(this->_M_weak_this); }
 656:/usr/include/c++/9/bits/shared_ptr.h **** 
 657:/usr/include/c++/9/bits/shared_ptr.h **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
 658:/usr/include/c++/9/bits/shared_ptr.h **** #define __cpp_lib_enable_shared_from_this 201603
 659:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr<_Tp>
 660:/usr/include/c++/9/bits/shared_ptr.h ****       weak_from_this() noexcept
 661:/usr/include/c++/9/bits/shared_ptr.h ****       { return this->_M_weak_this; }
 662:/usr/include/c++/9/bits/shared_ptr.h **** 
 663:/usr/include/c++/9/bits/shared_ptr.h ****       weak_ptr<const _Tp>
 664:/usr/include/c++/9/bits/shared_ptr.h ****       weak_from_this() const noexcept
 665:/usr/include/c++/9/bits/shared_ptr.h ****       { return this->_M_weak_this; }
 666:/usr/include/c++/9/bits/shared_ptr.h **** #endif
 667:/usr/include/c++/9/bits/shared_ptr.h **** 
 668:/usr/include/c++/9/bits/shared_ptr.h ****     private:
 669:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename _Tp1>
 670:/usr/include/c++/9/bits/shared_ptr.h **** 	void
 671:/usr/include/c++/9/bits/shared_ptr.h **** 	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 672:/usr/include/c++/9/bits/shared_ptr.h **** 	{ _M_weak_this._M_assign(__p, __n); }
 673:/usr/include/c++/9/bits/shared_ptr.h **** 
 674:/usr/include/c++/9/bits/shared_ptr.h ****       // Found by ADL when this is an associated class.
 675:/usr/include/c++/9/bits/shared_ptr.h ****       friend const enable_shared_from_this*
 676:/usr/include/c++/9/bits/shared_ptr.h ****       __enable_shared_from_this_base(const __shared_count<>&,
 677:/usr/include/c++/9/bits/shared_ptr.h **** 				     const enable_shared_from_this* __p)
 678:/usr/include/c++/9/bits/shared_ptr.h ****       { return __p; }
 679:/usr/include/c++/9/bits/shared_ptr.h **** 
 680:/usr/include/c++/9/bits/shared_ptr.h ****       template<typename, _Lock_policy>
 681:/usr/include/c++/9/bits/shared_ptr.h **** 	friend class __shared_ptr;
 682:/usr/include/c++/9/bits/shared_ptr.h **** 
 683:/usr/include/c++/9/bits/shared_ptr.h ****       mutable weak_ptr<_Tp>  _M_weak_this;
 684:/usr/include/c++/9/bits/shared_ptr.h ****     };
 685:/usr/include/c++/9/bits/shared_ptr.h **** 
 686:/usr/include/c++/9/bits/shared_ptr.h ****   /**
 687:/usr/include/c++/9/bits/shared_ptr.h ****    *  @brief  Create an object that is owned by a shared_ptr.
 688:/usr/include/c++/9/bits/shared_ptr.h ****    *  @param  __a     An allocator.
 689:/usr/include/c++/9/bits/shared_ptr.h ****    *  @param  __args  Arguments for the @a _Tp object's constructor.
 690:/usr/include/c++/9/bits/shared_ptr.h ****    *  @return A shared_ptr that owns the newly created object.
 691:/usr/include/c++/9/bits/shared_ptr.h ****    *  @throw  An exception thrown from @a _Alloc::allocate or from the
 692:/usr/include/c++/9/bits/shared_ptr.h ****    *          constructor of @a _Tp.
 693:/usr/include/c++/9/bits/shared_ptr.h ****    *
 694:/usr/include/c++/9/bits/shared_ptr.h ****    *  A copy of @a __a will be used to allocate memory for the shared_ptr
 695:/usr/include/c++/9/bits/shared_ptr.h ****    *  and the new object.
 696:/usr/include/c++/9/bits/shared_ptr.h ****    */
 697:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename _Alloc, typename... _Args>
 698:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 699:/usr/include/c++/9/bits/shared_ptr.h ****     allocate_shared(const _Alloc& __a, _Args&&... __args)
 700:/usr/include/c++/9/bits/shared_ptr.h ****     {
 701:/usr/include/c++/9/bits/shared_ptr.h ****       return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
 702:/usr/include/c++/9/bits/shared_ptr.h **** 			     std::forward<_Args>(__args)...);
 703:/usr/include/c++/9/bits/shared_ptr.h ****     }
 704:/usr/include/c++/9/bits/shared_ptr.h **** 
 705:/usr/include/c++/9/bits/shared_ptr.h ****   /**
 706:/usr/include/c++/9/bits/shared_ptr.h ****    *  @brief  Create an object that is owned by a shared_ptr.
 707:/usr/include/c++/9/bits/shared_ptr.h ****    *  @param  __args  Arguments for the @a _Tp object's constructor.
 708:/usr/include/c++/9/bits/shared_ptr.h ****    *  @return A shared_ptr that owns the newly created object.
 709:/usr/include/c++/9/bits/shared_ptr.h ****    *  @throw  std::bad_alloc, or an exception thrown from the
 710:/usr/include/c++/9/bits/shared_ptr.h ****    *          constructor of @a _Tp.
 711:/usr/include/c++/9/bits/shared_ptr.h ****    */
 712:/usr/include/c++/9/bits/shared_ptr.h ****   template<typename _Tp, typename... _Args>
 713:/usr/include/c++/9/bits/shared_ptr.h ****     inline shared_ptr<_Tp>
 714:/usr/include/c++/9/bits/shared_ptr.h ****     make_shared(_Args&&... __args)
 1847              		.loc 7 714 5
 1848              		.cfi_startproc
 1849              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1850              		.cfi_lsda 0x1b,.LLSDA2722
 1851 0000 F30F1EFA 		endbr64	
 1852 0004 55       		pushq	%rbp	#
 1853              		.cfi_def_cfa_offset 16
 1854              		.cfi_offset 6, -16
 1855 0005 4889E5   		movq	%rsp, %rbp	#,
 1856              		.cfi_def_cfa_register 6
 1857 0008 4154     		pushq	%r12	#
 1858 000a 53       		pushq	%rbx	#
 1859 000b 4883EC30 		subq	$48, %rsp	#,
 1860              		.cfi_offset 12, -24
 1861              		.cfi_offset 3, -32
 1862 000f 48897DD8 		movq	%rdi, -40(%rbp)	# .result_ptr, .result_ptr
 1863 0013 488975D0 		movq	%rsi, -48(%rbp)	# __args#0, __args#0
 1864 0017 488955C8 		movq	%rdx, -56(%rbp)	# __args#1, __args#1
 1865              	# /usr/include/c++/9/bits/shared_ptr.h:714:     make_shared(_Args&&... __args)
 1866              		.loc 7 714 5
 1867 001b 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp93
 1867      25280000 
 1867      00
 1868 0024 488945E8 		movq	%rax, -24(%rbp)	# tmp93, D.54894
 1869 0028 31C0     		xorl	%eax, %eax	# tmp93
 1870              	# /usr/include/c++/9/bits/shared_ptr.h:718: 				       std::forward<_Args>(__args)...);
 715:/usr/include/c++/9/bits/shared_ptr.h ****     {
 716:/usr/include/c++/9/bits/shared_ptr.h ****       typedef typename std::remove_cv<_Tp>::type _Tp_nc;
 717:/usr/include/c++/9/bits/shared_ptr.h ****       return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
 718:/usr/include/c++/9/bits/shared_ptr.h **** 				       std::forward<_Args>(__args)...);
 1871              		.loc 7 718 42
 1872 002a 488B45C8 		movq	-56(%rbp), %rax	# __args#1, tmp85
 1873 002e 4889C7   		movq	%rax, %rdi	# tmp85,
 1874 0031 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 1874      00
 1875 0036 4989C4   		movq	%rax, %r12	#, _1
 1876 0039 488B45D0 		movq	-48(%rbp), %rax	# __args#0, tmp86
 1877 003d 4889C7   		movq	%rax, %rdi	# tmp86,
 1878 0040 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 1878      00
 1879 0045 4889C3   		movq	%rax, %rbx	#, _2
 1880 0048 488D45E7 		leaq	-25(%rbp), %rax	#, tmp87
 1881 004c 4889C7   		movq	%rax, %rdi	# tmp87,
 1882 004f E8000000 		call	_ZNSaI7ComplexEC1Ev	#
 1882      00
 1883 0054 488B45D8 		movq	-40(%rbp), %rax	# <retval>, tmp88
 1884 0058 488D75E7 		leaq	-25(%rbp), %rsi	#, tmp89
 1885 005c 4C89E1   		movq	%r12, %rcx	# _1,
 1886 005f 4889DA   		movq	%rbx, %rdx	# _2,
 1887 0062 4889C7   		movq	%rax, %rdi	# tmp88,
 1888              	.LEHB9:
 1889 0065 E8000000 		call	_ZSt15allocate_sharedI7ComplexSaIS0_EJddEESt10shared_ptrIT_ERKT0_DpOT1_	#
 1889      00
 1890              	.LEHE9:
 1891 006a 488D45E7 		leaq	-25(%rbp), %rax	#, tmp90
 1892 006e 4889C7   		movq	%rax, %rdi	# tmp90,
 1893 0071 E8000000 		call	_ZNSaI7ComplexED1Ev	#
 1893      00
 1894              	# /usr/include/c++/9/bits/shared_ptr.h:719:     }
 719:/usr/include/c++/9/bits/shared_ptr.h ****     }
 1895              		.loc 7 719 5
 1896 0076 488B45E8 		movq	-24(%rbp), %rax	# D.54894, tmp94
 1897 007a 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp94
 1897      25280000 
 1897      00
 1898 0083 7425     		je	.L83	#,
 1899 0085 EB1E     		jmp	.L85	#
 1900              	.L84:
 1901 0087 F30F1EFA 		endbr64	
 1902 008b 4889C3   		movq	%rax, %rbx	#, tmp92
 1903              	# /usr/include/c++/9/bits/shared_ptr.h:718: 				       std::forward<_Args>(__args)...);
 718:/usr/include/c++/9/bits/shared_ptr.h ****     }
 1904              		.loc 7 718 42
 1905 008e 488D45E7 		leaq	-25(%rbp), %rax	#, tmp91
 1906 0092 4889C7   		movq	%rax, %rdi	# tmp91,
 1907 0095 E8000000 		call	_ZNSaI7ComplexED1Ev	#
 1907      00
 1908 009a 4889D8   		movq	%rbx, %rax	# tmp92, D.54893
 1909 009d 4889C7   		movq	%rax, %rdi	# D.54893,
 1910              	.LEHB10:
 1911 00a0 E8000000 		call	_Unwind_Resume@PLT	#
 1911      00
 1912              	.LEHE10:
 1913              	.L85:
 1914              	# /usr/include/c++/9/bits/shared_ptr.h:719:     }
 1915              		.loc 7 719 5
 1916 00a5 E8000000 		call	__stack_chk_fail@PLT	#
 1916      00
 1917              	.L83:
 1918 00aa 488B45D8 		movq	-40(%rbp), %rax	# <retval>,
 1919 00ae 4883C430 		addq	$48, %rsp	#,
 1920 00b2 5B       		popq	%rbx	#
 1921 00b3 415C     		popq	%r12	#
 1922 00b5 5D       		popq	%rbp	#
 1923              		.cfi_def_cfa 7, 8
 1924 00b6 C3       		ret	
 1925              		.cfi_endproc
 1926              	.LFE2722:
 1927              		.section	.gcc_except_table
 1928              	.LLSDA2722:
 1929 002e FF       		.byte	0xff
 1930 002f FF       		.byte	0xff
 1931 0030 01       		.byte	0x1
 1932 0031 0A       		.uleb128 .LLSDACSE2722-.LLSDACSB2722
 1933              	.LLSDACSB2722:
 1934 0032 65       		.uleb128 .LEHB9-.LFB2722
 1935 0033 05       		.uleb128 .LEHE9-.LEHB9
 1936 0034 8701     		.uleb128 .L84-.LFB2722
 1937 0036 00       		.uleb128 0
 1938 0037 A001     		.uleb128 .LEHB10-.LFB2722
 1939 0039 05       		.uleb128 .LEHE10-.LEHB10
 1940 003a 00       		.uleb128 0
 1941 003b 00       		.uleb128 0
 1942              	.LLSDACSE2722:
 1943              		.section	.text._ZSt11make_sharedI7ComplexJddEESt10shared_ptrIT_EDpOT0_,"axG",@progbits,_ZSt11make_
 1945              		.section	.text._ZNSt10shared_ptrI4CoreEC2I7ComplexvEEOS_IT_E,"axG",@progbits,_ZNSt10shared_ptrI4Co
 1946              		.align 2
 1947              		.weak	_ZNSt10shared_ptrI4CoreEC2I7ComplexvEEOS_IT_E
 1949              	_ZNSt10shared_ptrI4CoreEC2I7ComplexvEEOS_IT_E:
 1950              	.LFB2724:
 263:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(std::move(__r)) { }
 1951              		.loc 7 263 2
 1952              		.cfi_startproc
 1953 0000 F30F1EFA 		endbr64	
 1954 0004 55       		pushq	%rbp	#
 1955              		.cfi_def_cfa_offset 16
 1956              		.cfi_offset 6, -16
 1957 0005 4889E5   		movq	%rsp, %rbp	#,
 1958              		.cfi_def_cfa_register 6
 1959 0008 53       		pushq	%rbx	#
 1960 0009 4883EC18 		subq	$24, %rsp	#,
 1961              		.cfi_offset 3, -24
 1962 000d 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 1963 0011 488975E0 		movq	%rsi, -32(%rbp)	# __r, __r
 1964              	.LBB19:
 1965              	# /usr/include/c++/9/bits/shared_ptr.h:264: 	: __shared_ptr<_Tp>(std::move(__r)) { }
 264:/usr/include/c++/9/bits/shared_ptr.h **** 
 1966              		.loc 7 264 36
 1967 0015 488B5DE8 		movq	-24(%rbp), %rbx	# this, _1
 1968              	# /usr/include/c++/9/bits/shared_ptr.h:264: 	: __shared_ptr<_Tp>(std::move(__r)) { }
 264:/usr/include/c++/9/bits/shared_ptr.h **** 
 1969              		.loc 7 264 31
 1970 0019 488B45E0 		movq	-32(%rbp), %rax	# __r, tmp86
 1971 001d 4889C7   		movq	%rax, %rdi	# tmp86,
 1972 0020 E8000000 		call	_ZSt4moveIRSt10shared_ptrI7ComplexEEONSt16remove_referenceIT_E4typeEOS5_	#
 1972      00
 1973              	# /usr/include/c++/9/bits/shared_ptr.h:264: 	: __shared_ptr<_Tp>(std::move(__r)) { }
 264:/usr/include/c++/9/bits/shared_ptr.h **** 
 1974              		.loc 7 264 36
 1975 0025 4889C6   		movq	%rax, %rsi	# _3,
 1976 0028 4889DF   		movq	%rbx, %rdi	# _1,
 1977 002b E8000000 		call	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEEOS_IT_LS2_2EE	#
 1977      00
 1978              	.LBE19:
 1979              	# /usr/include/c++/9/bits/shared_ptr.h:264: 	: __shared_ptr<_Tp>(std::move(__r)) { }
 264:/usr/include/c++/9/bits/shared_ptr.h **** 
 1980              		.loc 7 264 40
 1981 0030 90       		nop	
 1982 0031 4883C418 		addq	$24, %rsp	#,
 1983 0035 5B       		popq	%rbx	#
 1984 0036 5D       		popq	%rbp	#
 1985              		.cfi_def_cfa 7, 8
 1986 0037 C3       		ret	
 1987              		.cfi_endproc
 1988              	.LFE2724:
 1990              		.weak	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEEOS_IT_E
 1991              		.set	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEEOS_IT_E,_ZNSt10shared_ptrI4CoreEC2I7ComplexvEEOS_IT_E
 1992              		.section	.text._ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv,"axG
 1993              		.align 2
 1994              		.weak	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv
 1996              	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv:
 1997              	.LFB2732:
1012:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 1998              		.loc 5 1012 7
 1999              		.cfi_startproc
 2000 0000 F30F1EFA 		endbr64	
 2001 0004 55       		pushq	%rbp	#
 2002              		.cfi_def_cfa_offset 16
 2003              		.cfi_offset 6, -16
 2004 0005 4889E5   		movq	%rsp, %rbp	#,
 2005              		.cfi_def_cfa_register 6
 2006 0008 4883EC10 		subq	$16, %rsp	#,
 2007 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2008              	# /usr/include/c++/9/bits/shared_ptr_base.h:1015: 	return _M_get();
1015:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 2009              		.loc 5 1015 16
 2010 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2011 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 2012 0017 E8000000 		call	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv	#
 2012      00
 2013              	# /usr/include/c++/9/bits/shared_ptr_base.h:1016:       }
1016:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2014              		.loc 5 1016 7
 2015 001c C9       		leave	
 2016              		.cfi_def_cfa 7, 8
 2017 001d C3       		ret	
 2018              		.cfi_endproc
 2019              	.LFE2732:
 2021              		.section	.text._ZNSt10shared_ptrI4CoreEC2I7ComplexvEERKS_IT_E,"axG",@progbits,_ZNSt10shared_ptrI4C
 2022              		.align 2
 2023              		.weak	_ZNSt10shared_ptrI4CoreEC2I7ComplexvEERKS_IT_E
 2025              	_ZNSt10shared_ptrI4CoreEC2I7ComplexvEERKS_IT_E:
 2026              	.LFB2734:
 246:/usr/include/c++/9/bits/shared_ptr.h ****         : __shared_ptr<_Tp>(__r) { }
 2027              		.loc 7 246 2
 2028              		.cfi_startproc
 2029 0000 F30F1EFA 		endbr64	
 2030 0004 55       		pushq	%rbp	#
 2031              		.cfi_def_cfa_offset 16
 2032              		.cfi_offset 6, -16
 2033 0005 4889E5   		movq	%rsp, %rbp	#,
 2034              		.cfi_def_cfa_register 6
 2035 0008 4883EC10 		subq	$16, %rsp	#,
 2036 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2037 0010 488975F0 		movq	%rsi, -16(%rbp)	# __r, __r
 2038              	.LBB20:
 2039              	# /usr/include/c++/9/bits/shared_ptr.h:247:         : __shared_ptr<_Tp>(__r) { }
 247:/usr/include/c++/9/bits/shared_ptr.h **** 
 2040              		.loc 7 247 32
 2041 0014 488B45F8 		movq	-8(%rbp), %rax	# this, _1
 2042 0018 488B55F0 		movq	-16(%rbp), %rdx	# __r, _2
 2043 001c 4889D6   		movq	%rdx, %rsi	# _2,
 2044 001f 4889C7   		movq	%rax, %rdi	# _1,
 2045 0022 E8000000 		call	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEERKS_IT_LS2_2EE	#
 2045      00
 2046              	.LBE20:
 2047              	# /usr/include/c++/9/bits/shared_ptr.h:247:         : __shared_ptr<_Tp>(__r) { }
 247:/usr/include/c++/9/bits/shared_ptr.h **** 
 2048              		.loc 7 247 36
 2049 0027 90       		nop	
 2050 0028 C9       		leave	
 2051              		.cfi_def_cfa 7, 8
 2052 0029 C3       		ret	
 2053              		.cfi_endproc
 2054              	.LFE2734:
 2056              		.weak	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEERKS_IT_E
 2057              		.set	_ZNSt10shared_ptrI4CoreEC1I7ComplexvEERKS_IT_E,_ZNSt10shared_ptrI4CoreEC2I7ComplexvEERKS_IT_E
 2058              		.section	.text._ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv,"axG",@
 2059              		.align 2
 2060              		.weak	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv
 2062              	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EEptEv:
 2063              	.LFB2736:
1012:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 2064              		.loc 5 1012 7
 2065              		.cfi_startproc
 2066 0000 F30F1EFA 		endbr64	
 2067 0004 55       		pushq	%rbp	#
 2068              		.cfi_def_cfa_offset 16
 2069              		.cfi_offset 6, -16
 2070 0005 4889E5   		movq	%rsp, %rbp	#,
 2071              		.cfi_def_cfa_register 6
 2072 0008 4883EC10 		subq	$16, %rsp	#,
 2073 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2074              	# /usr/include/c++/9/bits/shared_ptr_base.h:1015: 	return _M_get();
1015:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 2075              		.loc 5 1015 16
 2076 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2077 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 2078 0017 E8000000 		call	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv	#
 2078      00
 2079              	# /usr/include/c++/9/bits/shared_ptr_base.h:1016:       }
1016:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2080              		.loc 5 1016 7
 2081 001c C9       		leave	
 2082              		.cfi_def_cfa 7, 8
 2083 001d C3       		ret	
 2084              		.cfi_endproc
 2085              	.LFE2736:
 2087              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv,"axG",@pr
 2088              		.align 2
 2089              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv
 2091              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv:
 2092              	.LFB2849:
 138:/usr/include/c++/9/bits/shared_ptr_base.h ****       { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
 2093              		.loc 5 138 7
 2094              		.cfi_startproc
 2095 0000 F30F1EFA 		endbr64	
 2096 0004 55       		pushq	%rbp	#
 2097              		.cfi_def_cfa_offset 16
 2098              		.cfi_offset 6, -16
 2099 0005 4889E5   		movq	%rsp, %rbp	#,
 2100              		.cfi_def_cfa_register 6
 2101 0008 4883EC08 		subq	$8, %rsp	#,
 2102 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2103              	# /usr/include/c++/9/bits/shared_ptr_base.h:139:       { __gnu_cxx::__atomic_add_dispatch(&_M_use_c
 139:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2104              		.loc 5 139 41
 2105 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 2106 0014 4883C008 		addq	$8, %rax	#, _1
 2107 0018 BE010000 		movl	$1, %esi	#,
 2107      00
 2108 001d 4889C7   		movq	%rax, %rdi	# _1,
 2109 0020 E8000000 		call	_ZN9__gnu_cxxL21__atomic_add_dispatchEPii	#
 2109      00
 2110              	# /usr/include/c++/9/bits/shared_ptr_base.h:139:       { __gnu_cxx::__atomic_add_dispatch(&_M_use_c
 139:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2111              		.loc 5 139 61
 2112 0025 90       		nop	
 2113 0026 C9       		leave	
 2114              		.cfi_def_cfa 7, 8
 2115 0027 C3       		ret	
 2116              		.cfi_endproc
 2117              	.LFE2849:
 2119              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv,"axG",@progbit
 2120              		.align 2
 2121              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
 2123              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv:
 2124              	.LFB2850:
 148:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 2125              		.loc 5 148 7
 2126              		.cfi_startproc
 2127 0000 F30F1EFA 		endbr64	
 2128 0004 55       		pushq	%rbp	#
 2129              		.cfi_def_cfa_offset 16
 2130              		.cfi_offset 6, -16
 2131 0005 4889E5   		movq	%rsp, %rbp	#,
 2132              		.cfi_def_cfa_register 6
 2133 0008 4883EC10 		subq	$16, %rsp	#,
 2134 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2135              	# /usr/include/c++/9/bits/shared_ptr_base.h:152: 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_us
 152:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 2136              		.loc 5 152 44
 2137 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp94
 2138 0014 4883C008 		addq	$8, %rax	#, _1
 2139 0018 BEFFFFFF 		movl	$-1, %esi	#,
 2139      FF
 2140 001d 4889C7   		movq	%rax, %rdi	# _1,
 2141 0020 E8000000 		call	_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii	#
 2141      00
 2142              	# /usr/include/c++/9/bits/shared_ptr_base.h:152: 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_us
 152:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 2143              		.loc 5 152 64
 2144 0025 83F801   		cmpl	$1, %eax	#, _2
 2145 0028 0F94C0   		sete	%al	#, retval.6_15
 2146              	# /usr/include/c++/9/bits/shared_ptr_base.h:152: 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_us
 152:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  {
 2147              		.loc 5 152 2
 2148 002b 84C0     		testb	%al, %al	# retval.6_15
 2149 002d 744D     		je	.L95	#,
 2150              	# /usr/include/c++/9/bits/shared_ptr_base.h:155: 	    _M_dispose();
 155:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    // There must be a memory barrier between dispose() and destroy()
 2151              		.loc 5 155 6
 2152 002f 488B45F8 		movq	-8(%rbp), %rax	# this, tmp95
 2153 0033 488B00   		movq	(%rax), %rax	# this_12(D)->_vptr._Sp_counted_base, _3
 2154 0036 4883C010 		addq	$16, %rax	#, _4
 2155 003a 488B10   		movq	(%rax), %rdx	# *_4, _5
 2156 003d 488B45F8 		movq	-8(%rbp), %rax	# this, tmp96
 2157 0041 4889C7   		movq	%rax, %rdi	# tmp96,
 2158 0044 FFD2     		call	*%rdx	# _5
 2159              	.LVL5:
 2160              	# /usr/include/c++/9/bits/shared_ptr_base.h:167: 	    if (__gnu_cxx::__exchange_and_add_dispatch(&_
 167:/usr/include/c++/9/bits/shared_ptr_base.h **** 						       -1) == 1)
 2161              		.loc 5 167 48
 2162 0046 488B45F8 		movq	-8(%rbp), %rax	# this, tmp97
 2163 004a 4883C00C 		addq	$12, %rax	#, _6
 2164 004e BEFFFFFF 		movl	$-1, %esi	#,
 2164      FF
 2165 0053 4889C7   		movq	%rax, %rdi	# _6,
 2166 0056 E8000000 		call	_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii	#
 2166      00
 2167              	# /usr/include/c++/9/bits/shared_ptr_base.h:168: 						       -1) == 1)
 168:/usr/include/c++/9/bits/shared_ptr_base.h ****               {
 2168              		.loc 5 168 18
 2169 005b 83F801   		cmpl	$1, %eax	#, _7
 2170 005e 0F94C0   		sete	%al	#, retval.7_18
 2171              	# /usr/include/c++/9/bits/shared_ptr_base.h:167: 	    if (__gnu_cxx::__exchange_and_add_dispatch(&_
 167:/usr/include/c++/9/bits/shared_ptr_base.h **** 						       -1) == 1)
 2172              		.loc 5 167 6
 2173 0061 84C0     		testb	%al, %al	# retval.7_18
 2174 0063 7417     		je	.L95	#,
 2175              	# /usr/include/c++/9/bits/shared_ptr_base.h:171: 	        _M_destroy();
 171:/usr/include/c++/9/bits/shared_ptr_base.h ****               }
 2176              		.loc 5 171 10
 2177 0065 488B45F8 		movq	-8(%rbp), %rax	# this, tmp98
 2178 0069 488B00   		movq	(%rax), %rax	# this_12(D)->_vptr._Sp_counted_base, _8
 2179 006c 4883C018 		addq	$24, %rax	#, _9
 2180 0070 488B10   		movq	(%rax), %rdx	# *_9, _10
 2181 0073 488B45F8 		movq	-8(%rbp), %rax	# this, tmp99
 2182 0077 4889C7   		movq	%rax, %rdi	# tmp99,
 2183 007a FFD2     		call	*%rdx	# _10
 2184              	.LVL6:
 2185              	.L95:
 2186              	# /usr/include/c++/9/bits/shared_ptr_base.h:174:       }
 174:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2187              		.loc 5 174 7
 2188 007c 90       		nop	
 2189 007d C9       		leave	
 2190              		.cfi_def_cfa 7, 8
 2191 007e C3       		ret	
 2192              		.cfi_endproc
 2193              	.LFE2850:
 2195              		.section	.text._ZNSaI7ComplexEC2Ev,"axG",@progbits,_ZNSaI7ComplexEC5Ev,comdat
 2196              		.align 2
 2197              		.weak	_ZNSaI7ComplexEC2Ev
 2199              	_ZNSaI7ComplexEC2Ev:
 2200              	.LFB2856:
 2201              		.file 8 "/usr/include/c++/9/bits/allocator.h"
   1:/usr/include/c++/9/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/9/bits/allocator.h **** 
   3:/usr/include/c++/9/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/allocator.h **** //
   5:/usr/include/c++/9/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/allocator.h **** // any later version.
  10:/usr/include/c++/9/bits/allocator.h **** 
  11:/usr/include/c++/9/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/allocator.h **** 
  16:/usr/include/c++/9/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/allocator.h **** 
  20:/usr/include/c++/9/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/allocator.h **** 
  25:/usr/include/c++/9/bits/allocator.h **** /*
  26:/usr/include/c++/9/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/9/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/9/bits/allocator.h ****  *
  29:/usr/include/c++/9/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/9/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/9/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/9/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/9/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/9/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/9/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/9/bits/allocator.h ****  */
  37:/usr/include/c++/9/bits/allocator.h **** 
  38:/usr/include/c++/9/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/9/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/9/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/9/bits/allocator.h ****  */
  42:/usr/include/c++/9/bits/allocator.h **** 
  43:/usr/include/c++/9/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/9/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/9/bits/allocator.h **** 
  46:/usr/include/c++/9/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/9/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/9/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/9/bits/allocator.h **** #endif
  51:/usr/include/c++/9/bits/allocator.h **** 
  52:/usr/include/c++/9/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/9/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/usr/include/c++/9/bits/allocator.h **** #endif
  56:/usr/include/c++/9/bits/allocator.h **** 
  57:/usr/include/c++/9/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/allocator.h **** {
  59:/usr/include/c++/9/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/allocator.h **** 
  61:/usr/include/c++/9/bits/allocator.h ****   /**
  62:/usr/include/c++/9/bits/allocator.h ****    *  @addtogroup allocators
  63:/usr/include/c++/9/bits/allocator.h ****    *  @{
  64:/usr/include/c++/9/bits/allocator.h ****    */
  65:/usr/include/c++/9/bits/allocator.h **** 
  66:/usr/include/c++/9/bits/allocator.h ****   /// allocator<void> specialization.
  67:/usr/include/c++/9/bits/allocator.h ****   template<>
  68:/usr/include/c++/9/bits/allocator.h ****     class allocator<void>
  69:/usr/include/c++/9/bits/allocator.h ****     {
  70:/usr/include/c++/9/bits/allocator.h ****     public:
  71:/usr/include/c++/9/bits/allocator.h ****       typedef size_t      size_type;
  72:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/usr/include/c++/9/bits/allocator.h ****       typedef void*       pointer;
  74:/usr/include/c++/9/bits/allocator.h ****       typedef const void* const_pointer;
  75:/usr/include/c++/9/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/c++/9/bits/allocator.h **** 
  77:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
  78:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
  79:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/usr/include/c++/9/bits/allocator.h **** 
  81:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/usr/include/c++/9/bits/allocator.h **** 
  86:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/usr/include/c++/9/bits/allocator.h **** 
  88:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/usr/include/c++/9/bits/allocator.h **** 	void
  90:/usr/include/c++/9/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/usr/include/c++/9/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  92:/usr/include/c++/9/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  93:/usr/include/c++/9/bits/allocator.h **** 
  94:/usr/include/c++/9/bits/allocator.h ****       template<typename _Up>
  95:/usr/include/c++/9/bits/allocator.h **** 	void
  96:/usr/include/c++/9/bits/allocator.h **** 	destroy(_Up* __p)
  97:/usr/include/c++/9/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
  98:/usr/include/c++/9/bits/allocator.h **** 	{ __p->~_Up(); }
  99:/usr/include/c++/9/bits/allocator.h **** #endif
 100:/usr/include/c++/9/bits/allocator.h ****     };
 101:/usr/include/c++/9/bits/allocator.h **** 
 102:/usr/include/c++/9/bits/allocator.h ****   /**
 103:/usr/include/c++/9/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 104:/usr/include/c++/9/bits/allocator.h ****    *
 105:/usr/include/c++/9/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 106:/usr/include/c++/9/bits/allocator.h ****    *  for further details.
 107:/usr/include/c++/9/bits/allocator.h ****    *
 108:/usr/include/c++/9/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 109:/usr/include/c++/9/bits/allocator.h ****    */
 110:/usr/include/c++/9/bits/allocator.h ****   template<typename _Tp>
 111:/usr/include/c++/9/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 112:/usr/include/c++/9/bits/allocator.h ****     {
 113:/usr/include/c++/9/bits/allocator.h ****    public:
 114:/usr/include/c++/9/bits/allocator.h ****       typedef size_t     size_type;
 115:/usr/include/c++/9/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 116:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp*       pointer;
 117:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp* const_pointer;
 118:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp&       reference;
 119:/usr/include/c++/9/bits/allocator.h ****       typedef const _Tp& const_reference;
 120:/usr/include/c++/9/bits/allocator.h ****       typedef _Tp        value_type;
 121:/usr/include/c++/9/bits/allocator.h **** 
 122:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 123:/usr/include/c++/9/bits/allocator.h **** 	struct rebind
 124:/usr/include/c++/9/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 125:/usr/include/c++/9/bits/allocator.h **** 
 126:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 127:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/usr/include/c++/9/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 129:/usr/include/c++/9/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 130:/usr/include/c++/9/bits/allocator.h **** 
 131:/usr/include/c++/9/bits/allocator.h ****       typedef true_type is_always_equal;
 132:/usr/include/c++/9/bits/allocator.h **** #endif
 133:/usr/include/c++/9/bits/allocator.h **** 
 134:/usr/include/c++/9/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:/usr/include/c++/9/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 136:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 137:/usr/include/c++/9/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 2202              		.loc 8 137 7
 2203              		.cfi_startproc
 2204 0000 F30F1EFA 		endbr64	
 2205 0004 55       		pushq	%rbp	#
 2206              		.cfi_def_cfa_offset 16
 2207              		.cfi_offset 6, -16
 2208 0005 4889E5   		movq	%rsp, %rbp	#,
 2209              		.cfi_def_cfa_register 6
 2210 0008 4883EC10 		subq	$16, %rsp	#,
 2211 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2212              	.LBB21:
 2213              	# /usr/include/c++/9/bits/allocator.h:137:       allocator() _GLIBCXX_NOTHROW { }
 2214              		.loc 8 137 36
 2215 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 2216 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 2217 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2Ev	#
 2217      00
 2218              	.LBE21:
 2219              	# /usr/include/c++/9/bits/allocator.h:137:       allocator() _GLIBCXX_NOTHROW { }
 2220              		.loc 8 137 38
 2221 001c 90       		nop	
 2222 001d C9       		leave	
 2223              		.cfi_def_cfa 7, 8
 2224 001e C3       		ret	
 2225              		.cfi_endproc
 2226              	.LFE2856:
 2228              		.weak	_ZNSaI7ComplexEC1Ev
 2229              		.set	_ZNSaI7ComplexEC1Ev,_ZNSaI7ComplexEC2Ev
 2230              		.section	.text._ZNSaI7ComplexED2Ev,"axG",@progbits,_ZNSaI7ComplexED5Ev,comdat
 2231              		.align 2
 2232              		.weak	_ZNSaI7ComplexED2Ev
 2234              	_ZNSaI7ComplexED2Ev:
 2235              	.LFB2859:
 138:/usr/include/c++/9/bits/allocator.h **** 
 139:/usr/include/c++/9/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 140:/usr/include/c++/9/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 141:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 142:/usr/include/c++/9/bits/allocator.h **** 
 143:/usr/include/c++/9/bits/allocator.h **** #if __cplusplus >= 201103L
 144:/usr/include/c++/9/bits/allocator.h ****       // Avoid implicit deprecation.
 145:/usr/include/c++/9/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 146:/usr/include/c++/9/bits/allocator.h **** #endif
 147:/usr/include/c++/9/bits/allocator.h **** 
 148:/usr/include/c++/9/bits/allocator.h ****       template<typename _Tp1>
 149:/usr/include/c++/9/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 150:/usr/include/c++/9/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 151:/usr/include/c++/9/bits/allocator.h **** 
 152:/usr/include/c++/9/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 2236              		.loc 8 152 7
 2237              		.cfi_startproc
 2238 0000 F30F1EFA 		endbr64	
 2239 0004 55       		pushq	%rbp	#
 2240              		.cfi_def_cfa_offset 16
 2241              		.cfi_offset 6, -16
 2242 0005 4889E5   		movq	%rsp, %rbp	#,
 2243              		.cfi_def_cfa_register 6
 2244 0008 4883EC10 		subq	$16, %rsp	#,
 2245 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2246              	.LBB22:
 2247              	# /usr/include/c++/9/bits/allocator.h:152:       ~allocator() _GLIBCXX_NOTHROW { }
 2248              		.loc 8 152 39
 2249 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 2250 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 2251 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI7ComplexED2Ev	#
 2251      00
 2252              	.LBE22:
 2253 001c 90       		nop	
 2254 001d C9       		leave	
 2255              		.cfi_def_cfa 7, 8
 2256 001e C3       		ret	
 2257              		.cfi_endproc
 2258              	.LFE2859:
 2260              		.weak	_ZNSaI7ComplexED1Ev
 2261              		.set	_ZNSaI7ComplexED1Ev,_ZNSaI7ComplexED2Ev
 2262              		.section	.text._ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE,"axG",@progbits,_ZSt7forwardIdE
 2263              		.weak	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE
 2265              	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE:
 2266              	.LFB2861:
 2267              		.file 9 "/usr/include/c++/9/bits/move.h"
   1:/usr/include/c++/9/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/9/bits/move.h **** 
   3:/usr/include/c++/9/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/move.h **** //
   5:/usr/include/c++/9/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/move.h **** // any later version.
  10:/usr/include/c++/9/bits/move.h **** 
  11:/usr/include/c++/9/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/move.h **** 
  16:/usr/include/c++/9/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/move.h **** 
  20:/usr/include/c++/9/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/move.h **** 
  25:/usr/include/c++/9/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/9/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/9/bits/move.h ****  */
  29:/usr/include/c++/9/bits/move.h **** 
  30:/usr/include/c++/9/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/9/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/9/bits/move.h **** 
  33:/usr/include/c++/9/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/9/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/9/bits/move.h **** 
  36:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/9/bits/move.h **** {
  38:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/9/bits/move.h **** 
  40:/usr/include/c++/9/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/9/bits/move.h ****   /**
  42:/usr/include/c++/9/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/9/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/9/bits/move.h ****    */
  45:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/9/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/9/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/9/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/include/c++/9/bits/move.h **** 
  50:/usr/include/c++/9/bits/move.h **** #if __cplusplus >= 201103L
  51:/usr/include/c++/9/bits/move.h **** 
  52:/usr/include/c++/9/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/usr/include/c++/9/bits/move.h **** } // namespace
  54:/usr/include/c++/9/bits/move.h **** 
  55:/usr/include/c++/9/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/usr/include/c++/9/bits/move.h **** 
  57:/usr/include/c++/9/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/usr/include/c++/9/bits/move.h **** {
  59:/usr/include/c++/9/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/usr/include/c++/9/bits/move.h **** 
  61:/usr/include/c++/9/bits/move.h ****   /**
  62:/usr/include/c++/9/bits/move.h ****    *  @addtogroup utilities
  63:/usr/include/c++/9/bits/move.h ****    *  @{
  64:/usr/include/c++/9/bits/move.h ****    */
  65:/usr/include/c++/9/bits/move.h **** 
  66:/usr/include/c++/9/bits/move.h ****   /**
  67:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/usr/include/c++/9/bits/move.h ****    *
  70:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/usr/include/c++/9/bits/move.h ****    */
  72:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  73:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  74:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 2268              		.loc 9 74 5
 2269              		.cfi_startproc
 2270 0000 F30F1EFA 		endbr64	
 2271 0004 55       		pushq	%rbp	#
 2272              		.cfi_def_cfa_offset 16
 2273              		.cfi_offset 6, -16
 2274 0005 4889E5   		movq	%rsp, %rbp	#,
 2275              		.cfi_def_cfa_register 6
 2276 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __t, __t
 2277              	# /usr/include/c++/9/bits/move.h:75:     { return static_cast<_Tp&&>(__t); }
  75:/usr/include/c++/9/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2278              		.loc 9 75 36
 2279 000c 488B45F8 		movq	-8(%rbp), %rax	# __t, _2
 2280              	# /usr/include/c++/9/bits/move.h:75:     { return static_cast<_Tp&&>(__t); }
 2281              		.loc 9 75 39
 2282 0010 5D       		popq	%rbp	#
 2283              		.cfi_def_cfa 7, 8
 2284 0011 C3       		ret	
 2285              		.cfi_endproc
 2286              	.LFE2861:
 2288              		.section	.text._ZSt15allocate_sharedI7ComplexSaIS0_EJddEESt10shared_ptrIT_ERKT0_DpOT1_,"axG",@prog
 2289              		.weak	_ZSt15allocate_sharedI7ComplexSaIS0_EJddEESt10shared_ptrIT_ERKT0_DpOT1_
 2291              	_ZSt15allocate_sharedI7ComplexSaIS0_EJddEESt10shared_ptrIT_ERKT0_DpOT1_:
 2292              	.LFB2862:
 699:/usr/include/c++/9/bits/shared_ptr.h ****     {
 2293              		.loc 7 699 5
 2294              		.cfi_startproc
 2295 0000 F30F1EFA 		endbr64	
 2296 0004 55       		pushq	%rbp	#
 2297              		.cfi_def_cfa_offset 16
 2298              		.cfi_offset 6, -16
 2299 0005 4889E5   		movq	%rsp, %rbp	#,
 2300              		.cfi_def_cfa_register 6
 2301 0008 53       		pushq	%rbx	#
 2302 0009 4883EC28 		subq	$40, %rsp	#,
 2303              		.cfi_offset 3, -24
 2304 000d 48897DE8 		movq	%rdi, -24(%rbp)	# .result_ptr, .result_ptr
 2305 0011 488975E0 		movq	%rsi, -32(%rbp)	# __a, __a
 2306 0015 488955D8 		movq	%rdx, -40(%rbp)	# __args#0, __args#0
 2307 0019 48894DD0 		movq	%rcx, -48(%rbp)	# __args#1, __args#1
 2308              	# /usr/include/c++/9/bits/shared_ptr.h:702: 			     std::forward<_Args>(__args)...);
 702:/usr/include/c++/9/bits/shared_ptr.h ****     }
 2309              		.loc 7 702 39
 2310 001d 488B45D0 		movq	-48(%rbp), %rax	# __args#1, tmp85
 2311 0021 4889C7   		movq	%rax, %rdi	# tmp85,
 2312 0024 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2312      00
 2313 0029 4889C3   		movq	%rax, %rbx	#, _1
 2314 002c 488B45D8 		movq	-40(%rbp), %rax	# __args#0, tmp86
 2315 0030 4889C7   		movq	%rax, %rdi	# tmp86,
 2316 0033 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2316      00
 2317 0038 4889C2   		movq	%rax, %rdx	#, _2
 2318 003b 488B75E0 		movq	-32(%rbp), %rsi	# __a, D.54617
 2319 003f 488B45E8 		movq	-24(%rbp), %rax	# <retval>, tmp87
 2320 0043 4889D9   		movq	%rbx, %rcx	# _1,
 2321 0046 4889C7   		movq	%rax, %rdi	# tmp87,
 2322 0049 E8000000 		call	_ZNSt10shared_ptrI7ComplexEC1ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_	#
 2322      00
 2323              	# /usr/include/c++/9/bits/shared_ptr.h:703:     }
 703:/usr/include/c++/9/bits/shared_ptr.h **** 
 2324              		.loc 7 703 5
 2325 004e 488B45E8 		movq	-24(%rbp), %rax	# <retval>,
 2326 0052 4883C428 		addq	$40, %rsp	#,
 2327 0056 5B       		popq	%rbx	#
 2328 0057 5D       		popq	%rbp	#
 2329              		.cfi_def_cfa 7, 8
 2330 0058 C3       		ret	
 2331              		.cfi_endproc
 2332              	.LFE2862:
 2334              		.section	.text._ZSt4moveIRSt10shared_ptrI7ComplexEEONSt16remove_referenceIT_E4typeEOS5_,"axG",@pro
 2335              		.weak	_ZSt4moveIRSt10shared_ptrI7ComplexEEONSt16remove_referenceIT_E4typeEOS5_
 2337              	_ZSt4moveIRSt10shared_ptrI7ComplexEEONSt16remove_referenceIT_E4typeEOS5_:
 2338              	.LFB2863:
  76:/usr/include/c++/9/bits/move.h **** 
  77:/usr/include/c++/9/bits/move.h ****   /**
  78:/usr/include/c++/9/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/usr/include/c++/9/bits/move.h ****    *
  81:/usr/include/c++/9/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/usr/include/c++/9/bits/move.h ****    */
  83:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  84:/usr/include/c++/9/bits/move.h ****     constexpr _Tp&&
  85:/usr/include/c++/9/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/usr/include/c++/9/bits/move.h ****     {
  87:/usr/include/c++/9/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/usr/include/c++/9/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/usr/include/c++/9/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/usr/include/c++/9/bits/move.h ****     }
  91:/usr/include/c++/9/bits/move.h **** 
  92:/usr/include/c++/9/bits/move.h ****   /**
  93:/usr/include/c++/9/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/usr/include/c++/9/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/usr/include/c++/9/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/usr/include/c++/9/bits/move.h ****   */
  97:/usr/include/c++/9/bits/move.h ****   template<typename _Tp>
  98:/usr/include/c++/9/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/usr/include/c++/9/bits/move.h ****     move(_Tp&& __t) noexcept
 2339              		.loc 9 99 5
 2340              		.cfi_startproc
 2341 0000 F30F1EFA 		endbr64	
 2342 0004 55       		pushq	%rbp	#
 2343              		.cfi_def_cfa_offset 16
 2344              		.cfi_offset 6, -16
 2345 0005 4889E5   		movq	%rsp, %rbp	#,
 2346              		.cfi_def_cfa_register 6
 2347 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __t, __t
 2348              	# /usr/include/c++/9/bits/move.h:100:     { return static_cast<typename std::remove_reference<_Tp>:
 100:/usr/include/c++/9/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 2349              		.loc 9 100 74
 2350 000c 488B45F8 		movq	-8(%rbp), %rax	# __t, _2
 2351              	# /usr/include/c++/9/bits/move.h:100:     { return static_cast<typename std::remove_reference<_Tp>:
 2352              		.loc 9 100 77
 2353 0010 5D       		popq	%rbp	#
 2354              		.cfi_def_cfa 7, 8
 2355 0011 C3       		ret	
 2356              		.cfi_endproc
 2357              	.LFE2863:
 2359              		.section	.text._ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEEOS_IT_LS2_2EE,
 2360              		.align 2
 2361              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEEOS_IT_LS2_2EE
 2363              	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEEOS_IT_LS2_2EE:
 2364              	.LFB2865:
1170:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1171:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = _Compatible<_Yp>>
1172:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
1173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
1174:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
1175:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1176:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_ptr(__shared_ptr&& __r) noexcept
1177:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_ptr(__r._M_ptr), _M_refcount()
1178:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1179:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_refcount._M_swap(__r._M_refcount);
1180:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__r._M_ptr = 0;
1181:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1182:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1183:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = _Compatible<_Yp>>
1184:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 2365              		.loc 5 1184 2
 2366              		.cfi_startproc
 2367 0000 F30F1EFA 		endbr64	
 2368 0004 55       		pushq	%rbp	#
 2369              		.cfi_def_cfa_offset 16
 2370              		.cfi_offset 6, -16
 2371 0005 4889E5   		movq	%rsp, %rbp	#,
 2372              		.cfi_def_cfa_register 6
 2373 0008 4883EC10 		subq	$16, %rsp	#,
 2374 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2375 0010 488975F0 		movq	%rsi, -16(%rbp)	# __r, __r
 2376              	.LBB23:
 2377              	# /usr/include/c++/9/bits/shared_ptr_base.h:1185: 	: _M_ptr(__r._M_ptr), _M_refcount()
1185:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__r._M_ptr), _M_refcount()
 2378              		.loc 5 1185 15
 2379 0014 488B45F0 		movq	-16(%rbp), %rax	# __r, tmp87
 2380 0018 488B10   		movq	(%rax), %rdx	# __r_9(D)->_M_ptr, _1
 2381              	# /usr/include/c++/9/bits/shared_ptr_base.h:1185: 	: _M_ptr(__r._M_ptr), _M_refcount()
 2382              		.loc 5 1185 36
 2383 001b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 2384 001f 488910   		movq	%rdx, (%rax)	# _1, this_7(D)->_M_ptr
 2385 0022 488B45F8 		movq	-8(%rbp), %rax	# this, tmp89
 2386 0026 4883C008 		addq	$8, %rax	#, _2
 2387 002a 4889C7   		movq	%rax, %rdi	# _2,
 2388 002d E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev	#
 2388      00
 2389              	# /usr/include/c++/9/bits/shared_ptr_base.h:1187: 	  _M_refcount._M_swap(__r._M_refcount);
1186:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1187:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_refcount._M_swap(__r._M_refcount);
 2390              		.loc 5 1187 4
 2391 0032 488B45F8 		movq	-8(%rbp), %rax	# this, tmp90
 2392 0036 4883C008 		addq	$8, %rax	#, _3
 2393              	# /usr/include/c++/9/bits/shared_ptr_base.h:1187: 	  _M_refcount._M_swap(__r._M_refcount);
 2394              		.loc 5 1187 28
 2395 003a 488B55F0 		movq	-16(%rbp), %rdx	# __r, tmp91
 2396 003e 4883C208 		addq	$8, %rdx	#, _4
 2397              	# /usr/include/c++/9/bits/shared_ptr_base.h:1187: 	  _M_refcount._M_swap(__r._M_refcount);
 2398              		.loc 5 1187 4
 2399 0042 4889D6   		movq	%rdx, %rsi	# _4,
 2400 0045 4889C7   		movq	%rax, %rdi	# _3,
 2401 0048 E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_	#
 2401      00
 2402              	# /usr/include/c++/9/bits/shared_ptr_base.h:1188: 	  __r._M_ptr = 0;
1188:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __r._M_ptr = 0;
 2403              		.loc 5 1188 4
 2404 004d 488B45F0 		movq	-16(%rbp), %rax	# __r, tmp92
 2405 0051 48C70000 		movq	$0, (%rax)	#, __r_9(D)->_M_ptr
 2405      000000
 2406              	.LBE23:
 2407              	# /usr/include/c++/9/bits/shared_ptr_base.h:1189: 	}
1189:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 2408              		.loc 5 1189 2
 2409 0058 90       		nop	
 2410 0059 C9       		leave	
 2411              		.cfi_def_cfa 7, 8
 2412 005a C3       		ret	
 2413              		.cfi_endproc
 2414              	.LFE2865:
 2416              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexvEEOS_IT_LS2_2EE
 2417              		.set	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexvEEOS_IT_LS2_2EE,_ZNSt12__s
 2418              		.section	.text._ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv
 2419              		.align 2
 2420              		.weak	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv
 2422              	_ZNKSt19__shared_ptr_accessI7ComplexLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv:
 2423              	.LFB2871:
1020:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 2424              		.loc 5 1020 7
 2425              		.cfi_startproc
 2426 0000 F30F1EFA 		endbr64	
 2427 0004 55       		pushq	%rbp	#
 2428              		.cfi_def_cfa_offset 16
 2429              		.cfi_offset 6, -16
 2430 0005 4889E5   		movq	%rsp, %rbp	#,
 2431              		.cfi_def_cfa_register 6
 2432 0008 4883EC10 		subq	$16, %rsp	#,
 2433 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2434              	# /usr/include/c++/9/bits/shared_ptr_base.h:1021:       { return static_cast<const __shared_ptr<_Tp
1021:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 2435              		.loc 5 1021 70
 2436 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2437 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 2438 0017 E8000000 		call	_ZNKSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE3getEv	#
 2438      00
 2439              	# /usr/include/c++/9/bits/shared_ptr_base.h:1021:       { return static_cast<const __shared_ptr<_Tp
1021:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 2440              		.loc 5 1021 73
 2441 001c C9       		leave	
 2442              		.cfi_def_cfa 7, 8
 2443 001d C3       		ret	
 2444              		.cfi_endproc
 2445              	.LFE2871:
 2447              		.section	.text._ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEERKS_IT_LS2_2EE
 2448              		.align 2
 2449              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEERKS_IT_LS2_2EE
 2451              	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexvEERKS_IT_LS2_2EE:
 2452              	.LFB2873:
1172:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 2453              		.loc 5 1172 2
 2454              		.cfi_startproc
 2455 0000 F30F1EFA 		endbr64	
 2456 0004 55       		pushq	%rbp	#
 2457              		.cfi_def_cfa_offset 16
 2458              		.cfi_offset 6, -16
 2459 0005 4889E5   		movq	%rsp, %rbp	#,
 2460              		.cfi_def_cfa_register 6
 2461 0008 4883EC10 		subq	$16, %rsp	#,
 2462 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2463 0010 488975F0 		movq	%rsi, -16(%rbp)	# __r, __r
 2464              	.LBB24:
 2465              	# /usr/include/c++/9/bits/shared_ptr_base.h:1173: 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcoun
1173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 2466              		.loc 5 1173 15
 2467 0014 488B45F0 		movq	-16(%rbp), %rax	# __r, tmp86
 2468 0018 488B10   		movq	(%rax), %rdx	# __r_8(D)->_M_ptr, _1
 2469              	# /usr/include/c++/9/bits/shared_ptr_base.h:1173: 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcoun
1173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 2470              		.loc 5 1173 51
 2471 001b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp87
 2472 001f 488910   		movq	%rdx, (%rax)	# _1, this_6(D)->_M_ptr
 2473 0022 488B45F8 		movq	-8(%rbp), %rax	# this, tmp88
 2474 0026 4883C008 		addq	$8, %rax	#, _2
 2475              	# /usr/include/c++/9/bits/shared_ptr_base.h:1173: 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcoun
1173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 2476              		.loc 5 1173 40
 2477 002a 488B55F0 		movq	-16(%rbp), %rdx	# __r, tmp89
 2478 002e 4883C208 		addq	$8, %rdx	#, _3
 2479              	# /usr/include/c++/9/bits/shared_ptr_base.h:1173: 	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcoun
1173:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 2480              		.loc 5 1173 51
 2481 0032 4889D6   		movq	%rdx, %rsi	# _3,
 2482 0035 4889C7   		movq	%rax, %rdi	# _2,
 2483 0038 E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_	#
 2483      00
 2484              	.LBE24:
 2485              	# /usr/include/c++/9/bits/shared_ptr_base.h:1174: 	{ }
1174:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2486              		.loc 5 1174 4
 2487 003d 90       		nop	
 2488 003e C9       		leave	
 2489              		.cfi_def_cfa 7, 8
 2490 003f C3       		ret	
 2491              		.cfi_endproc
 2492              	.LFE2873:
 2494              		.weak	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexvEERKS_IT_LS2_2EE
 2495              		.set	_ZNSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexvEERKS_IT_LS2_2EE,_ZNSt12__
 2496              		.section	.text._ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv,"a
 2497              		.align 2
 2498              		.weak	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv
 2500              	_ZNKSt19__shared_ptr_accessI4CoreLN9__gnu_cxx12_Lock_policyE2ELb0ELb0EE6_M_getEv:
 2501              	.LFB2875:
1020:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 2502              		.loc 5 1020 7
 2503              		.cfi_startproc
 2504 0000 F30F1EFA 		endbr64	
 2505 0004 55       		pushq	%rbp	#
 2506              		.cfi_def_cfa_offset 16
 2507              		.cfi_offset 6, -16
 2508 0005 4889E5   		movq	%rsp, %rbp	#,
 2509              		.cfi_def_cfa_register 6
 2510 0008 4883EC10 		subq	$16, %rsp	#,
 2511 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2512              	# /usr/include/c++/9/bits/shared_ptr_base.h:1021:       { return static_cast<const __shared_ptr<_Tp
1021:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 2513              		.loc 5 1021 70
 2514 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2515 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 2516 0017 E8000000 		call	_ZNKSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EE3getEv	#
 2516      00
 2517              	# /usr/include/c++/9/bits/shared_ptr_base.h:1021:       { return static_cast<const __shared_ptr<_Tp
1021:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 2518              		.loc 5 1021 73
 2519 001c C9       		leave	
 2520              		.cfi_def_cfa 7, 8
 2521 001d C3       		ret	
 2522              		.cfi_endproc
 2523              	.LFE2875:
 2525              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"axG",@progbit
 2526              		.align 2
 2527              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
 2529              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
 2530              	.LFB2910:
 131:/usr/include/c++/9/bits/shared_ptr_base.h ****       { delete this; }
 2531              		.loc 5 131 7
 2532              		.cfi_startproc
 2533 0000 F30F1EFA 		endbr64	
 2534 0004 55       		pushq	%rbp	#
 2535              		.cfi_def_cfa_offset 16
 2536              		.cfi_offset 6, -16
 2537 0005 4889E5   		movq	%rsp, %rbp	#,
 2538              		.cfi_def_cfa_register 6
 2539 0008 4883EC10 		subq	$16, %rsp	#,
 2540 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2541              	# /usr/include/c++/9/bits/shared_ptr_base.h:132:       { delete this; }
 132:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2542              		.loc 5 132 9
 2543 0010 48837DF8 		cmpq	$0, -8(%rbp)	#, this
 2543      00
 2544 0015 7417     		je	.L112	#,
 2545              	# /usr/include/c++/9/bits/shared_ptr_base.h:132:       { delete this; }
 132:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2546              		.loc 5 132 9 is_stmt 0 discriminator 1
 2547 0017 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 2548 001b 488B00   		movq	(%rax), %rax	# this_5(D)->_vptr._Sp_counted_base, _1
 2549 001e 4883C008 		addq	$8, %rax	#, _2
 2550 0022 488B10   		movq	(%rax), %rdx	# *_2, _3
 2551 0025 488B45F8 		movq	-8(%rbp), %rax	# this, tmp86
 2552 0029 4889C7   		movq	%rax, %rdi	# tmp86,
 2553 002c FFD2     		call	*%rdx	# _3
 2554              	.LVL7:
 2555              	.L112:
 2556              	# /usr/include/c++/9/bits/shared_ptr_base.h:132:       { delete this; }
 132:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2557              		.loc 5 132 22 is_stmt 1
 2558 002e 90       		nop	
 2559 002f C9       		leave	
 2560              		.cfi_def_cfa 7, 8
 2561 0030 C3       		ret	
 2562              		.cfi_endproc
 2563              	.LFE2910:
 2565              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2Ev,"axG",@progbits,_ZNSt14__s
 2566              		.align 2
 2567              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2Ev
 2569              	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2Ev:
 2570              	.LFB2912:
 616:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 2571              		.loc 5 616 17
 2572              		.cfi_startproc
 2573 0000 F30F1EFA 		endbr64	
 2574 0004 55       		pushq	%rbp	#
 2575              		.cfi_def_cfa_offset 16
 2576              		.cfi_offset 6, -16
 2577 0005 4889E5   		movq	%rsp, %rbp	#,
 2578              		.cfi_def_cfa_register 6
 2579 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2580              	.LBB25:
 2581              	# /usr/include/c++/9/bits/shared_ptr_base.h:616:       constexpr __shared_count() noexcept : _M_pi(
 616:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 2582              		.loc 5 616 52
 2583 000c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 2584 0010 48C70000 		movq	$0, (%rax)	#, this_2(D)->_M_pi
 2584      000000
 2585              	.LBE25:
 2586              	# /usr/include/c++/9/bits/shared_ptr_base.h:617:       { }
 617:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2587              		.loc 5 617 9
 2588 0017 90       		nop	
 2589 0018 5D       		popq	%rbp	#
 2590              		.cfi_def_cfa 7, 8
 2591 0019 C3       		ret	
 2592              		.cfi_endproc
 2593              	.LFE2912:
 2595              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev
 2596              		.set	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev,_ZNSt14__shared_countILN9__gnu_cxx12
 2597              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_,"axG",@progbits,_
 2598              		.align 2
 2599              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_
 2601              	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_:
 2602              	.LFB2914:
 756:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 2603              		.loc 5 756 7
 2604              		.cfi_startproc
 2605 0000 F30F1EFA 		endbr64	
 2606 0004 55       		pushq	%rbp	#
 2607              		.cfi_def_cfa_offset 16
 2608              		.cfi_offset 6, -16
 2609 0005 4889E5   		movq	%rsp, %rbp	#,
 2610              		.cfi_def_cfa_register 6
 2611 0008 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 2612 000c 488975E0 		movq	%rsi, -32(%rbp)	# __r, __r
 2613              	# /usr/include/c++/9/bits/shared_ptr_base.h:758: 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 758:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__r._M_pi = _M_pi;
 2614              		.loc 5 758 25
 2615 0010 488B45E0 		movq	-32(%rbp), %rax	# __r, tmp83
 2616 0014 488B00   		movq	(%rax), %rax	# __r_3(D)->_M_pi, tmp84
 2617 0017 488945F8 		movq	%rax, -8(%rbp)	# tmp84, __tmp
 2618              	# /usr/include/c++/9/bits/shared_ptr_base.h:759: 	__r._M_pi = _M_pi;
 759:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 2619              		.loc 5 759 14
 2620 001b 488B45E8 		movq	-24(%rbp), %rax	# this, tmp85
 2621 001f 488B10   		movq	(%rax), %rdx	# this_5(D)->_M_pi, _1
 2622              	# /usr/include/c++/9/bits/shared_ptr_base.h:759: 	__r._M_pi = _M_pi;
 759:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_pi = __tmp;
 2623              		.loc 5 759 2
 2624 0022 488B45E0 		movq	-32(%rbp), %rax	# __r, tmp86
 2625 0026 488910   		movq	%rdx, (%rax)	# _1, __r_3(D)->_M_pi
 2626              	# /usr/include/c++/9/bits/shared_ptr_base.h:760: 	_M_pi = __tmp;
 760:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 2627              		.loc 5 760 2
 2628 0029 488B45E8 		movq	-24(%rbp), %rax	# this, tmp87
 2629 002d 488B55F8 		movq	-8(%rbp), %rdx	# __tmp, tmp88
 2630 0031 488910   		movq	%rdx, (%rax)	# tmp88, this_5(D)->_M_pi
 2631              	# /usr/include/c++/9/bits/shared_ptr_base.h:761:       }
 761:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2632              		.loc 5 761 7
 2633 0034 90       		nop	
 2634 0035 5D       		popq	%rbp	#
 2635              		.cfi_def_cfa 7, 8
 2636 0036 C3       		ret	
 2637              		.cfi_endproc
 2638              	.LFE2914:
 2640              		.section	.text._ZN9__gnu_cxx13new_allocatorI7ComplexEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_alloc
 2641              		.align 2
 2642              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2Ev
 2644              	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2Ev:
 2645              	.LFB2916:
 2646              		.file 10 "/usr/include/c++/9/ext/new_allocator.h"
   1:/usr/include/c++/9/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/9/ext/new_allocator.h **** 
   3:/usr/include/c++/9/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/new_allocator.h **** //
   5:/usr/include/c++/9/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/9/ext/new_allocator.h **** 
  11:/usr/include/c++/9/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/new_allocator.h **** 
  16:/usr/include/c++/9/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/new_allocator.h **** 
  20:/usr/include/c++/9/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/new_allocator.h **** 
  25:/usr/include/c++/9/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/9/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/new_allocator.h ****  */
  28:/usr/include/c++/9/ext/new_allocator.h **** 
  29:/usr/include/c++/9/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/9/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/9/ext/new_allocator.h **** 
  32:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/9/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/9/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/9/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/9/ext/new_allocator.h **** #endif
  39:/usr/include/c++/9/ext/new_allocator.h **** 
  40:/usr/include/c++/9/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/9/ext/new_allocator.h **** {
  42:/usr/include/c++/9/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/9/ext/new_allocator.h **** 
  44:/usr/include/c++/9/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/9/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/9/ext/new_allocator.h **** 
  47:/usr/include/c++/9/ext/new_allocator.h ****   /**
  48:/usr/include/c++/9/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/9/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/9/ext/new_allocator.h ****    *
  51:/usr/include/c++/9/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/9/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/9/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/9/ext/new_allocator.h ****    *
  55:/usr/include/c++/9/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/9/ext/new_allocator.h ****    */
  57:/usr/include/c++/9/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/9/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/9/ext/new_allocator.h ****     {
  60:/usr/include/c++/9/ext/new_allocator.h ****     public:
  61:/usr/include/c++/9/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/9/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/9/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/9/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/9/ext/new_allocator.h **** 
  69:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/9/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/9/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/9/ext/new_allocator.h **** 
  73:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/9/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/9/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/9/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/9/ext/new_allocator.h **** #endif
  78:/usr/include/c++/9/ext/new_allocator.h **** 
  79:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2647              		.loc 10 80 7
 2648              		.cfi_startproc
 2649 0000 F30F1EFA 		endbr64	
 2650 0004 55       		pushq	%rbp	#
 2651              		.cfi_def_cfa_offset 16
 2652              		.cfi_offset 6, -16
 2653 0005 4889E5   		movq	%rsp, %rbp	#,
 2654              		.cfi_def_cfa_register 6
 2655 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2656              	# /usr/include/c++/9/ext/new_allocator.h:80:       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2657              		.loc 10 80 47
 2658 000c 90       		nop	
 2659 000d 5D       		popq	%rbp	#
 2660              		.cfi_def_cfa 7, 8
 2661 000e C3       		ret	
 2662              		.cfi_endproc
 2663              	.LFE2916:
 2665              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexEC1Ev
 2666              		.set	_ZN9__gnu_cxx13new_allocatorI7ComplexEC1Ev,_ZN9__gnu_cxx13new_allocatorI7ComplexEC2Ev
 2667              		.section	.text._ZN9__gnu_cxx13new_allocatorI7ComplexED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_alloc
 2668              		.align 2
 2669              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexED2Ev
 2671              	_ZN9__gnu_cxx13new_allocatorI7ComplexED2Ev:
 2672              	.LFB2919:
  81:/usr/include/c++/9/ext/new_allocator.h **** 
  82:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/usr/include/c++/9/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  84:/usr/include/c++/9/ext/new_allocator.h **** 
  85:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Tp1>
  86:/usr/include/c++/9/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/usr/include/c++/9/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/usr/include/c++/9/ext/new_allocator.h **** 
  89:/usr/include/c++/9/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2673              		.loc 10 89 7
 2674              		.cfi_startproc
 2675 0000 F30F1EFA 		endbr64	
 2676 0004 55       		pushq	%rbp	#
 2677              		.cfi_def_cfa_offset 16
 2678              		.cfi_offset 6, -16
 2679 0005 4889E5   		movq	%rsp, %rbp	#,
 2680              		.cfi_def_cfa_register 6
 2681 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2682              	# /usr/include/c++/9/ext/new_allocator.h:89:       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2683              		.loc 10 89 48
 2684 000c 90       		nop	
 2685 000d 5D       		popq	%rbp	#
 2686              		.cfi_def_cfa 7, 8
 2687 000e C3       		ret	
 2688              		.cfi_endproc
 2689              	.LFE2919:
 2691              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexED1Ev
 2692              		.set	_ZN9__gnu_cxx13new_allocatorI7ComplexED1Ev,_ZN9__gnu_cxx13new_allocatorI7ComplexED2Ev
 2693              		.section	.text._ZNSt10shared_ptrI7ComplexEC2ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_,"axG"
 2694              		.align 2
 2695              		.weak	_ZNSt10shared_ptrI7ComplexEC2ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_
 2697              	_ZNSt10shared_ptrI7ComplexEC2ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_:
 2698              	.LFB2922:
 358:/usr/include/c++/9/bits/shared_ptr.h **** 	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 2699              		.loc 7 358 2
 2700              		.cfi_startproc
 2701 0000 F30F1EFA 		endbr64	
 2702 0004 55       		pushq	%rbp	#
 2703              		.cfi_def_cfa_offset 16
 2704              		.cfi_offset 6, -16
 2705 0005 4889E5   		movq	%rsp, %rbp	#,
 2706              		.cfi_def_cfa_register 6
 2707 0008 4154     		pushq	%r12	#
 2708 000a 53       		pushq	%rbx	#
 2709 000b 4883EC20 		subq	$32, %rsp	#,
 2710              		.cfi_offset 12, -24
 2711              		.cfi_offset 3, -32
 2712 000f 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 2713 0013 488975E0 		movq	%rsi, -32(%rbp)	# __tag, __tag
 2714 0017 488955D8 		movq	%rdx, -40(%rbp)	# __args#0, __args#0
 2715 001b 48894DD0 		movq	%rcx, -48(%rbp)	# __args#1, __args#1
 2716              	.LBB26:
 2717              	# /usr/include/c++/9/bits/shared_ptr.h:359: 	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)
 359:/usr/include/c++/9/bits/shared_ptr.h **** 	{ }
 2718              		.loc 7 359 59
 2719 001f 488B5DE8 		movq	-24(%rbp), %rbx	# this, _1
 2720 0023 488B45D0 		movq	-48(%rbp), %rax	# __args#1, tmp86
 2721 0027 4889C7   		movq	%rax, %rdi	# tmp86,
 2722 002a E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2722      00
 2723 002f 4989C4   		movq	%rax, %r12	#, _2
 2724 0032 488B45D8 		movq	-40(%rbp), %rax	# __args#0, tmp87
 2725 0036 4889C7   		movq	%rax, %rdi	# tmp87,
 2726 0039 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2726      00
 2727 003e 4889C2   		movq	%rax, %rdx	#, _3
 2728 0041 488B45E0 		movq	-32(%rbp), %rax	# __tag, tmp88
 2729 0045 4C89E1   		movq	%r12, %rcx	# _2,
 2730 0048 4889C6   		movq	%rax, %rsi	# tmp88,
 2731 004b 4889DF   		movq	%rbx, %rdi	# _1,
 2732 004e E8000000 		call	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC2ISaIS0_EJddEEESt20_Sp_alloc_share
 2732      00
 2733              	.LBE26:
 2734              	# /usr/include/c++/9/bits/shared_ptr.h:360: 	{ }
 360:/usr/include/c++/9/bits/shared_ptr.h **** 
 2735              		.loc 7 360 4
 2736 0053 90       		nop	
 2737 0054 4883C420 		addq	$32, %rsp	#,
 2738 0058 5B       		popq	%rbx	#
 2739 0059 415C     		popq	%r12	#
 2740 005b 5D       		popq	%rbp	#
 2741              		.cfi_def_cfa 7, 8
 2742 005c C3       		ret	
 2743              		.cfi_endproc
 2744              	.LFE2922:
 2746              		.weak	_ZNSt10shared_ptrI7ComplexEC1ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_
 2747              		.set	_ZNSt10shared_ptrI7ComplexEC1ISaIS0_EJddEEESt20_Sp_alloc_shared_tagIT_EDpOT0_,_ZNSt10shared_p
 2748              		.section	.text._ZNKSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE3getEv,"axG",@progbits,_
 2749              		.align 2
 2750              		.weak	_ZNKSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE3getEv
 2752              	_ZNKSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE3getEv:
 2753              	.LFB2925:
1190:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1191:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = _Compatible<_Yp>>
1192:/usr/include/c++/9/bits/shared_ptr_base.h **** 	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
1193:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_refcount(__r._M_refcount) // may throw
1194:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1195:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // It is now safe to copy __r._M_ptr, as
1196:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // _M_refcount(__r._M_refcount) did not throw.
1197:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_ptr = __r._M_ptr;
1198:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1199:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1200:/usr/include/c++/9/bits/shared_ptr_base.h ****       // If an exception is thrown this constructor has no effect.
1201:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Del,
1202:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename = _UniqCompatible<_Yp, _Del>>
1203:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
1204:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__r.get()), _M_refcount()
1205:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1206:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __raw = __to_address(__r.get());
1207:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_refcount = __shared_count<_Lp>(std::move(__r));
1208:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_enable_shared_from_this_with(__raw);
1209:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1210:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1211:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cplusplus <= 201402L && _GLIBCXX_USE_DEPRECATED
1212:/usr/include/c++/9/bits/shared_ptr_base.h ****     protected:
1213:/usr/include/c++/9/bits/shared_ptr_base.h ****       // If an exception is thrown this constructor has no effect.
1214:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp1, typename _Del,
1215:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename enable_if<__and_<
1216:/usr/include/c++/9/bits/shared_ptr_base.h **** 		 __not_<is_array<_Tp>>, is_array<_Tp1>,
1217:/usr/include/c++/9/bits/shared_ptr_base.h **** 	         is_convertible<typename unique_ptr<_Tp1, _Del>::pointer, _Tp*>
1218:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       >::value, bool>::type = true>
1219:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)
1220:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(__r.get()), _M_refcount()
1221:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1222:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __raw = __to_address(__r.get());
1223:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_refcount = __shared_count<_Lp>(std::move(__r));
1224:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_enable_shared_from_this_with(__raw);
1225:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1226:/usr/include/c++/9/bits/shared_ptr_base.h ****     public:
1227:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
1228:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1229:/usr/include/c++/9/bits/shared_ptr_base.h **** #if _GLIBCXX_USE_DEPRECATED
1230:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic push
1231:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
1232:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Postcondition: use_count() == 1 and __r.get() == 0
1233:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = _Compatible<_Yp>>
1234:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(auto_ptr<_Yp>&& __r);
1235:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic pop
1236:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
1237:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1238:/usr/include/c++/9/bits/shared_ptr_base.h ****       constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }
1239:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1240:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1241:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Assignable<_Yp>
1242:/usr/include/c++/9/bits/shared_ptr_base.h **** 	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
1243:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1244:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_ptr = __r._M_ptr;
1245:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_refcount = __r._M_refcount; // __shared_count::op= doesn't throw
1246:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return *this;
1247:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1248:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1249:/usr/include/c++/9/bits/shared_ptr_base.h **** #if _GLIBCXX_USE_DEPRECATED
1250:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic push
1251:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
1252:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1253:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Assignable<_Yp>
1254:/usr/include/c++/9/bits/shared_ptr_base.h **** 	operator=(auto_ptr<_Yp>&& __r)
1255:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1256:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __shared_ptr(std::move(__r)).swap(*this);
1257:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return *this;
1258:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1259:/usr/include/c++/9/bits/shared_ptr_base.h **** #pragma GCC diagnostic pop
1260:/usr/include/c++/9/bits/shared_ptr_base.h **** #endif
1261:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1262:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_ptr&
1263:/usr/include/c++/9/bits/shared_ptr_base.h ****       operator=(__shared_ptr&& __r) noexcept
1264:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1265:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(std::move(__r)).swap(*this);
1266:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return *this;
1267:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1268:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1269:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<class _Yp>
1270:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_Assignable<_Yp>
1271:/usr/include/c++/9/bits/shared_ptr_base.h **** 	operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
1272:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1273:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __shared_ptr(std::move(__r)).swap(*this);
1274:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return *this;
1275:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1276:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1277:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Del>
1278:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_UniqAssignable<_Yp, _Del>
1279:/usr/include/c++/9/bits/shared_ptr_base.h **** 	operator=(unique_ptr<_Yp, _Del>&& __r)
1280:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1281:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __shared_ptr(std::move(__r)).swap(*this);
1282:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  return *this;
1283:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1284:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1285:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
1286:/usr/include/c++/9/bits/shared_ptr_base.h ****       reset() noexcept
1287:/usr/include/c++/9/bits/shared_ptr_base.h ****       { __shared_ptr().swap(*this); }
1288:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1289:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1290:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_SafeConv<_Yp>
1291:/usr/include/c++/9/bits/shared_ptr_base.h **** 	reset(_Yp* __p) // _Yp must be complete.
1292:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1293:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  // Catch self-reset errors.
1294:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __glibcxx_assert(__p == 0 || __p != _M_ptr);
1295:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __shared_ptr(__p).swap(*this);
1296:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1297:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1298:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Deleter>
1299:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_SafeConv<_Yp>
1300:/usr/include/c++/9/bits/shared_ptr_base.h **** 	reset(_Yp* __p, _Deleter __d)
1301:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ __shared_ptr(__p, std::move(__d)).swap(*this); }
1302:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1303:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Deleter, typename _Alloc>
1304:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_SafeConv<_Yp>
1305:/usr/include/c++/9/bits/shared_ptr_base.h **** 	reset(_Yp* __p, _Deleter __d, _Alloc __a)
1306:/usr/include/c++/9/bits/shared_ptr_base.h ****         { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }
1307:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1308:/usr/include/c++/9/bits/shared_ptr_base.h ****       element_type*
1309:/usr/include/c++/9/bits/shared_ptr_base.h ****       get() const noexcept
 2754              		.loc 5 1309 7
 2755              		.cfi_startproc
 2756 0000 F30F1EFA 		endbr64	
 2757 0004 55       		pushq	%rbp	#
 2758              		.cfi_def_cfa_offset 16
 2759              		.cfi_offset 6, -16
 2760 0005 4889E5   		movq	%rsp, %rbp	#,
 2761              		.cfi_def_cfa_register 6
 2762 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2763              	# /usr/include/c++/9/bits/shared_ptr_base.h:1310:       { return _M_ptr; }
1310:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_ptr; }
 2764              		.loc 5 1310 16
 2765 000c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2766 0010 488B00   		movq	(%rax), %rax	# this_2(D)->_M_ptr, _3
 2767              	# /usr/include/c++/9/bits/shared_ptr_base.h:1310:       { return _M_ptr; }
 2768              		.loc 5 1310 24
 2769 0013 5D       		popq	%rbp	#
 2770              		.cfi_def_cfa 7, 8
 2771 0014 C3       		ret	
 2772              		.cfi_endproc
 2773              	.LFE2925:
 2775              		.section	.text._ZNKSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EE3getEv,"axG",@progbits,_ZNK
 2776              		.align 2
 2777              		.weak	_ZNKSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EE3getEv
 2779              	_ZNKSt12__shared_ptrI4CoreLN9__gnu_cxx12_Lock_policyE2EE3getEv:
 2780              	.LFB2926:
1309:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_ptr; }
 2781              		.loc 5 1309 7
 2782              		.cfi_startproc
 2783 0000 F30F1EFA 		endbr64	
 2784 0004 55       		pushq	%rbp	#
 2785              		.cfi_def_cfa_offset 16
 2786              		.cfi_offset 6, -16
 2787 0005 4889E5   		movq	%rsp, %rbp	#,
 2788              		.cfi_def_cfa_register 6
 2789 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2790              	# /usr/include/c++/9/bits/shared_ptr_base.h:1310:       { return _M_ptr; }
 2791              		.loc 5 1310 16
 2792 000c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 2793 0010 488B00   		movq	(%rax), %rax	# this_2(D)->_M_ptr, _3
 2794              	# /usr/include/c++/9/bits/shared_ptr_base.h:1310:       { return _M_ptr; }
 2795              		.loc 5 1310 24
 2796 0013 5D       		popq	%rbp	#
 2797              		.cfi_def_cfa 7, 8
 2798 0014 C3       		ret	
 2799              		.cfi_endproc
 2800              	.LFE2926:
 2802              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev,"axG",@progbits,_ZNSt16_
 2803              		.align 2
 2804              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev
 2806              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev:
 2807              	.LFB2962:
 121:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 2808              		.loc 5 121 7
 2809              		.cfi_startproc
 2810 0000 F30F1EFA 		endbr64	
 2811 0004 55       		pushq	%rbp	#
 2812              		.cfi_def_cfa_offset 16
 2813              		.cfi_offset 6, -16
 2814 0005 4889E5   		movq	%rsp, %rbp	#,
 2815              		.cfi_def_cfa_register 6
 2816 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2817              	.LBB27:
 2818              	# /usr/include/c++/9/bits/shared_ptr_base.h:122:       { }
 122:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2819              		.loc 5 122 9
 2820 000c 488D1500 		leaq	16+_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE(%rip), %rdx	#, _1
 2820      000000
 2821 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 2822 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr._Sp_counted_base
 2823              	.LBE27:
 2824 001a 90       		nop	
 2825 001b 5D       		popq	%rbp	#
 2826              		.cfi_def_cfa 7, 8
 2827 001c C3       		ret	
 2828              		.cfi_endproc
 2829              	.LFE2962:
 2831              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev
 2832              		.set	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev,_ZNSt16_Sp_counted_baseILN9__gnu_c
 2833              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev,"axG",@progbits,_ZNSt16_
 2834              		.align 2
 2835              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev
 2837              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev:
 2838              	.LFB2964:
 121:/usr/include/c++/9/bits/shared_ptr_base.h ****       { }
 2839              		.loc 5 121 7
 2840              		.cfi_startproc
 2841 0000 F30F1EFA 		endbr64	
 2842 0004 55       		pushq	%rbp	#
 2843              		.cfi_def_cfa_offset 16
 2844              		.cfi_offset 6, -16
 2845 0005 4889E5   		movq	%rsp, %rbp	#,
 2846              		.cfi_def_cfa_register 6
 2847 0008 4883EC10 		subq	$16, %rsp	#,
 2848 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 2849              	# /usr/include/c++/9/bits/shared_ptr_base.h:122:       { }
 122:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 2850              		.loc 5 122 9
 2851 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 2852 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 2853 0017 E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev	#
 2853      00
 2854 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 2855 0020 BE100000 		movl	$16, %esi	#,
 2855      00
 2856 0025 4889C7   		movq	%rax, %rdi	# tmp83,
 2857 0028 E8000000 		call	_ZdlPvm@PLT	#
 2857      00
 2858 002d C9       		leave	
 2859              		.cfi_def_cfa 7, 8
 2860 002e C3       		ret	
 2861              		.cfi_endproc
 2862              	.LFE2964:
 2864              		.section	.text._ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC2ISaIS0_EJddEEESt20_Sp_a
 2865              		.align 2
 2866              		.weak	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC2ISaIS0_EJddEEESt20_Sp_alloc_shar
 2868              	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC2ISaIS0_EJddEEESt20_Sp_alloc_shared_tagI
 2869              	.LFB2966:
1311:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1312:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit operator bool() const // never throws
1313:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_ptr == 0 ? false : true; }
1314:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1315:/usr/include/c++/9/bits/shared_ptr_base.h ****       bool
1316:/usr/include/c++/9/bits/shared_ptr_base.h ****       unique() const noexcept
1317:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_refcount._M_unique(); }
1318:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1319:/usr/include/c++/9/bits/shared_ptr_base.h ****       long
1320:/usr/include/c++/9/bits/shared_ptr_base.h ****       use_count() const noexcept
1321:/usr/include/c++/9/bits/shared_ptr_base.h ****       { return _M_refcount._M_get_use_count(); }
1322:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1323:/usr/include/c++/9/bits/shared_ptr_base.h ****       void
1324:/usr/include/c++/9/bits/shared_ptr_base.h ****       swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
1325:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1326:/usr/include/c++/9/bits/shared_ptr_base.h **** 	std::swap(_M_ptr, __other._M_ptr);
1327:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_refcount._M_swap(__other._M_refcount);
1328:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1329:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1330:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp1>
1331:/usr/include/c++/9/bits/shared_ptr_base.h **** 	bool
1332:/usr/include/c++/9/bits/shared_ptr_base.h **** 	owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
1333:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ return _M_refcount._M_less(__rhs._M_refcount); }
1334:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1335:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp1>
1336:/usr/include/c++/9/bits/shared_ptr_base.h **** 	bool
1337:/usr/include/c++/9/bits/shared_ptr_base.h **** 	owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
1338:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ return _M_refcount._M_less(__rhs._M_refcount); }
1339:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1340:/usr/include/c++/9/bits/shared_ptr_base.h ****     protected:
1341:/usr/include/c++/9/bits/shared_ptr_base.h ****       // This constructor is non-standard, it is used by allocate_shared.
1342:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Alloc, typename... _Args>
1343:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 2870              		.loc 5 1343 2
 2871              		.cfi_startproc
 2872 0000 F30F1EFA 		endbr64	
 2873 0004 55       		pushq	%rbp	#
 2874              		.cfi_def_cfa_offset 16
 2875              		.cfi_offset 6, -16
 2876 0005 4889E5   		movq	%rsp, %rbp	#,
 2877              		.cfi_def_cfa_register 6
 2878 0008 4154     		pushq	%r12	#
 2879 000a 53       		pushq	%rbx	#
 2880 000b 4883EC20 		subq	$32, %rsp	#,
 2881              		.cfi_offset 12, -24
 2882              		.cfi_offset 3, -32
 2883 000f 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 2884 0013 488975E0 		movq	%rsi, -32(%rbp)	# __tag, __tag
 2885 0017 488955D8 		movq	%rdx, -40(%rbp)	# __args#0, __args#0
 2886 001b 48894DD0 		movq	%rcx, -48(%rbp)	# __args#1, __args#1
 2887              	.LBB28:
 2888              	# /usr/include/c++/9/bits/shared_ptr_base.h:1344: 	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forw
1344:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 2889              		.loc 5 1344 71
 2890 001f 488B45E8 		movq	-24(%rbp), %rax	# this, tmp88
 2891 0023 48C70000 		movq	$0, (%rax)	#, this_8(D)->_M_ptr
 2891      000000
 2892 002a 488B45E8 		movq	-24(%rbp), %rax	# this, tmp89
 2893 002e 488D5808 		leaq	8(%rax), %rbx	#, _1
 2894 0032 488B45D0 		movq	-48(%rbp), %rax	# __args#1, tmp90
 2895 0036 4889C7   		movq	%rax, %rdi	# tmp90,
 2896 0039 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2896      00
 2897 003e 4989C4   		movq	%rax, %r12	#, _2
 2898 0041 488B45D8 		movq	-40(%rbp), %rax	# __args#0, tmp91
 2899 0045 4889C7   		movq	%rax, %rdi	# tmp91,
 2900 0048 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 2900      00
 2901 004d 4889C1   		movq	%rax, %rcx	#, _3
 2902              	# /usr/include/c++/9/bits/shared_ptr_base.h:1344: 	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forw
 2903              		.loc 5 1344 26
 2904 0050 488B45E8 		movq	-24(%rbp), %rax	# this, _4
 2905              	# /usr/include/c++/9/bits/shared_ptr_base.h:1344: 	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forw
 2906              		.loc 5 1344 71
 2907 0054 488B55E0 		movq	-32(%rbp), %rdx	# __tag, tmp92
 2908 0058 4D89E0   		movq	%r12, %r8	# _2,
 2909 005b 4889C6   		movq	%rax, %rsi	# _4,
 2910 005e 4889DF   		movq	%rbx, %rdi	# _1,
 2911 0061 E8000000 		call	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexSaIS4_EJddEEERPT_St20_Sp_alloc
 2911      00
 2912              	# /usr/include/c++/9/bits/shared_ptr_base.h:1345: 	{ _M_enable_shared_from_this_with(_M_ptr); }
1345:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ _M_enable_shared_from_this_with(_M_ptr); }
 2913              		.loc 5 1345 4
 2914 0066 488B45E8 		movq	-24(%rbp), %rax	# this, tmp93
 2915 006a 488B10   		movq	(%rax), %rdx	# this_8(D)->_M_ptr, _5
 2916 006d 488B45E8 		movq	-24(%rbp), %rax	# this, tmp94
 2917 0071 4889D6   		movq	%rdx, %rsi	# _5,
 2918 0074 4889C7   		movq	%rax, %rdi	# tmp94,
 2919 0077 E8000000 		call	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE31_M_enable_shared_from_this_withIS
 2919      00
 2920              	.LBE28:
 2921              	# /usr/include/c++/9/bits/shared_ptr_base.h:1345: 	{ _M_enable_shared_from_this_with(_M_ptr); }
 2922              		.loc 5 1345 45
 2923 007c 90       		nop	
 2924 007d 4883C420 		addq	$32, %rsp	#,
 2925 0081 5B       		popq	%rbx	#
 2926 0082 415C     		popq	%r12	#
 2927 0084 5D       		popq	%rbp	#
 2928              		.cfi_def_cfa 7, 8
 2929 0085 C3       		ret	
 2930              		.cfi_endproc
 2931              	.LFE2966:
 2933              		.weak	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC1ISaIS0_EJddEEESt20_Sp_alloc_shar
 2934              		.set	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EEC1ISaIS0_EJddEEESt20_Sp_alloc_share
 2935              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexSaIS4_EJddEEERPT_St2
 2936              		.align 2
 2937              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexSaIS4_EJddEEERPT_St20_Sp_allo
 2939              	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexSaIS4_EJddEEERPT_St20_Sp_alloc_share
 2940              	.LFB2998:
 672:/usr/include/c++/9/bits/shared_ptr_base.h **** 		       _Args&&... __args)
 2941              		.loc 5 672 2
 2942              		.cfi_startproc
 2943              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2944              		.cfi_lsda 0x1b,.LLSDA2998
 2945 0000 F30F1EFA 		endbr64	
 2946 0004 55       		pushq	%rbp	#
 2947              		.cfi_def_cfa_offset 16
 2948              		.cfi_offset 6, -16
 2949 0005 4889E5   		movq	%rsp, %rbp	#,
 2950              		.cfi_def_cfa_register 6
 2951 0008 4157     		pushq	%r15	#
 2952 000a 4156     		pushq	%r14	#
 2953 000c 4155     		pushq	%r13	#
 2954 000e 4154     		pushq	%r12	#
 2955 0010 53       		pushq	%rbx	#
 2956 0011 4883EC78 		subq	$120, %rsp	#,
 2957              		.cfi_offset 15, -24
 2958              		.cfi_offset 14, -32
 2959              		.cfi_offset 13, -40
 2960              		.cfi_offset 12, -48
 2961              		.cfi_offset 3, -56
 2962 0015 48897D88 		movq	%rdi, -120(%rbp)	# this, this
 2963 0019 48897580 		movq	%rsi, -128(%rbp)	# __p, __p
 2964 001d 48899578 		movq	%rdx, -136(%rbp)	# __a, __a
 2964      FFFFFF
 2965 0024 48898D70 		movq	%rcx, -144(%rbp)	# __args#0, __args#0
 2965      FFFFFF
 2966 002b 4C898568 		movq	%r8, -152(%rbp)	# __args#1, __args#1
 2966      FFFFFF
 2967              	# /usr/include/c++/9/bits/shared_ptr_base.h:672: 	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_A
 672:/usr/include/c++/9/bits/shared_ptr_base.h **** 		       _Args&&... __args)
 2968              		.loc 5 672 2
 2969 0032 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp118
 2969      25280000 
 2969      00
 2970 003b 488945C8 		movq	%rax, -56(%rbp)	# tmp118, D.54899
 2971 003f 31C0     		xorl	%eax, %eax	# tmp118
 2972              	.LBB29:
 2973              	.LBB30:
 2974              	# /usr/include/c++/9/bits/shared_ptr_base.h:676: 	  typename _Sp_cp_type::__allocator_type __a2(__a
 676:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __guard = std::__allocate_guarded(__a2);
 2975              		.loc 5 676 43
 2976 0041 488B9578 		movq	-136(%rbp), %rdx	# __a._M_a, _1
 2976      FFFFFF
 2977 0048 488D459E 		leaq	-98(%rbp), %rax	#, tmp91
 2978 004c 4889D6   		movq	%rdx, %rsi	# _1,
 2979 004f 4889C7   		movq	%rax, %rdi	# tmp91,
 2980 0052 E8000000 		call	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS0_EERKSaI
 2980      00
 2981              	# /usr/include/c++/9/bits/shared_ptr_base.h:677: 	  auto __guard = std::__allocate_guarded(__a2);
 677:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Sp_cp_type* __mem = __guard.get();
 2982              		.loc 5 677 9
 2983 0057 488D45B0 		leaq	-80(%rbp), %rax	#, tmp92
 2984 005b 488D559E 		leaq	-98(%rbp), %rdx	#, tmp93
 2985 005f 4889D6   		movq	%rdx, %rsi	# tmp93,
 2986 0062 4889C7   		movq	%rax, %rdi	# tmp92,
 2987              	.LEHB11:
 2988 0065 E8000000 		call	_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_po
 2988      00
 2989              	.LEHE11:
 2990              	# /usr/include/c++/9/bits/shared_ptr_base.h:678: 	  _Sp_cp_type* __mem = __guard.get();
 678:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __pi = ::new (__mem)
 2991              		.loc 5 678 17
 2992 006a 488D45B0 		leaq	-80(%rbp), %rax	#, tmp94
 2993 006e 4889C7   		movq	%rax, %rdi	# tmp94,
 2994 0071 E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 2994      00
 2995 0076 488945A0 		movq	%rax, -96(%rbp)	# tmp95, __mem
 2996              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 2997              		.loc 5 679 9
 2998 007a 488B9578 		movq	-136(%rbp), %rdx	# __a._M_a, _2
 2998      FFFFFF
 2999 0081 488D459F 		leaq	-97(%rbp), %rax	#, tmp96
 3000 0085 4889D6   		movq	%rdx, %rsi	# _2,
 3001 0088 4889C7   		movq	%rax, %rdi	# tmp96,
 3002 008b E8000000 		call	_ZNSaI7ComplexEC1ERKS0_	#
 3002      00
 3003 0090 4C8D6D9F 		leaq	-97(%rbp), %r13	#, _13
 3004              	# /usr/include/c++/9/bits/shared_ptr_base.h:680: 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__a
 680:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __guard = nullptr;
 3005              		.loc 5 680 47
 3006 0094 488B8570 		movq	-144(%rbp), %rax	# __args#0, tmp97
 3006      FFFFFF
 3007 009b 4889C7   		movq	%rax, %rdi	# tmp97,
 3008 009e E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3008      00
 3009 00a3 4989C6   		movq	%rax, %r14	#, _16
 3010 00a6 488B8568 		movq	-152(%rbp), %rax	# __args#1, tmp98
 3010      FFFFFF
 3011 00ad 4889C7   		movq	%rax, %rdi	# tmp98,
 3012 00b0 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3012      00
 3013 00b5 4989C7   		movq	%rax, %r15	#, _19
 3014              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 3015              		.loc 5 679 9
 3016 00b8 4C8B65A0 		movq	-96(%rbp), %r12	# __mem, _20
 3017              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 3018              		.loc 5 679 16
 3019 00bc 4C89E6   		movq	%r12, %rsi	# _20,
 3020 00bf BF280000 		movl	$40, %edi	#,
 3020      00
 3021 00c4 E8000000 		call	_ZnwmPv	#
 3021      00
 3022 00c9 4889C3   		movq	%rax, %rbx	#, _22
 3023 00cc 4C89F9   		movq	%r15, %rcx	# _19,
 3024 00cf 4C89F2   		movq	%r14, %rdx	# _16,
 3025 00d2 4C89EE   		movq	%r13, %rsi	# _13,
 3026 00d5 4889DF   		movq	%rbx, %rdi	# _22,
 3027              	.LEHB12:
 3028 00d8 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC1IJddEEES1_DpOT_
 3028      00
 3029              	.LEHE12:
 3030              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 3031              		.loc 5 679 9 discriminator 2
 3032 00dd 48895DA8 		movq	%rbx, -88(%rbp)	# _22, __pi
 3033 00e1 488D459F 		leaq	-97(%rbp), %rax	#, tmp99
 3034 00e5 4889C7   		movq	%rax, %rdi	# tmp99,
 3035 00e8 E8000000 		call	_ZNSaI7ComplexED1Ev	#
 3035      00
 3036              	# /usr/include/c++/9/bits/shared_ptr_base.h:681: 	  __guard = nullptr;
 681:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _M_pi = __pi;
 3037              		.loc 5 681 12 discriminator 2
 3038 00ed 488D45B0 		leaq	-80(%rbp), %rax	#, tmp100
 3039 00f1 BE000000 		movl	$0, %esi	#,
 3039      00
 3040 00f6 4889C7   		movq	%rax, %rdi	# tmp100,
 3041 00f9 E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3041      00
 3042              	# /usr/include/c++/9/bits/shared_ptr_base.h:682: 	  _M_pi = __pi;
 682:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  __p = __pi->_M_ptr();
 3043              		.loc 5 682 4 discriminator 2
 3044 00fe 488B4588 		movq	-120(%rbp), %rax	# this, tmp101
 3045 0102 488B55A8 		movq	-88(%rbp), %rdx	# __pi, tmp102
 3046 0106 488910   		movq	%rdx, (%rax)	# tmp102, this_6(D)->_M_pi
 3047              	# /usr/include/c++/9/bits/shared_ptr_base.h:683: 	  __p = __pi->_M_ptr();
 683:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 3048              		.loc 5 683 8 discriminator 2
 3049 0109 488B45A8 		movq	-88(%rbp), %rax	# __pi, tmp103
 3050 010d 4889C7   		movq	%rax, %rdi	# tmp103,
 3051 0110 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv	#
 3051      00
 3052              	# /usr/include/c++/9/bits/shared_ptr_base.h:683: 	  __p = __pi->_M_ptr();
 683:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
 3053              		.loc 5 683 4 discriminator 2
 3054 0115 488B5580 		movq	-128(%rbp), %rdx	# __p, tmp104
 3055 0119 488902   		movq	%rax, (%rdx)	# _3, *__p_30(D)
 3056              	# /usr/include/c++/9/bits/shared_ptr_base.h:677: 	  auto __guard = std::__allocate_guarded(__a2);
 677:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Sp_cp_type* __mem = __guard.get();
 3057              		.loc 5 677 9 discriminator 2
 3058 011c 488D45B0 		leaq	-80(%rbp), %rax	#, tmp105
 3059 0120 4889C7   		movq	%rax, %rdi	# tmp105,
 3060 0123 E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3060      00
 3061              	# /usr/include/c++/9/bits/shared_ptr_base.h:676: 	  typename _Sp_cp_type::__allocator_type __a2(__a
 676:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __guard = std::__allocate_guarded(__a2);
 3062              		.loc 5 676 43 discriminator 2
 3063 0128 488D459E 		leaq	-98(%rbp), %rax	#, tmp106
 3064 012c 4889C7   		movq	%rax, %rdi	# tmp106,
 3065 012f E8000000 		call	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev	#
 3065      00
 3066              	.LBE30:
 3067              	.LBE29:
 3068              	# /usr/include/c++/9/bits/shared_ptr_base.h:684: 	}
 684:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3069              		.loc 5 684 2 discriminator 2
 3070 0134 90       		nop	
 3071 0135 488B45C8 		movq	-56(%rbp), %rax	# D.54899, tmp119
 3072 0139 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp119
 3072      25280000 
 3072      00
 3073 0142 7454     		je	.L128	#,
 3074 0144 EB4D     		jmp	.L131	#
 3075              	.L130:
 3076 0146 F30F1EFA 		endbr64	
 3077 014a 4989C5   		movq	%rax, %r13	#, tmp108
 3078              	.LBB32:
 3079              	.LBB31:
 3080              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 3081              		.loc 5 679 16
 3082 014d 4C89E6   		movq	%r12, %rsi	# _20,
 3083 0150 4889DF   		movq	%rbx, %rdi	# _22,
 3084 0153 E8000000 		call	_ZdlPvS_	#
 3084      00
 3085 0158 4C89EB   		movq	%r13, %rbx	# tmp108, tmp107
 3086              	# /usr/include/c++/9/bits/shared_ptr_base.h:679: 	  auto __pi = ::new (__mem)
 679:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
 3087              		.loc 5 679 9
 3088 015b 488D459F 		leaq	-97(%rbp), %rax	#, tmp111
 3089 015f 4889C7   		movq	%rax, %rdi	# tmp111,
 3090 0162 E8000000 		call	_ZNSaI7ComplexED1Ev	#
 3090      00
 3091              	# /usr/include/c++/9/bits/shared_ptr_base.h:677: 	  auto __guard = std::__allocate_guarded(__a2);
 677:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  _Sp_cp_type* __mem = __guard.get();
 3092              		.loc 5 677 9
 3093 0167 488D45B0 		leaq	-80(%rbp), %rax	#, tmp114
 3094 016b 4889C7   		movq	%rax, %rdi	# tmp114,
 3095 016e E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3095      00
 3096 0173 EB07     		jmp	.L127	#
 3097              	.L129:
 3098 0175 F30F1EFA 		endbr64	
 3099 0179 4889C3   		movq	%rax, %rbx	#, tmp115
 3100              	.L127:
 3101              	# /usr/include/c++/9/bits/shared_ptr_base.h:676: 	  typename _Sp_cp_type::__allocator_type __a2(__a
 676:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  auto __guard = std::__allocate_guarded(__a2);
 3102              		.loc 5 676 43
 3103 017c 488D459E 		leaq	-98(%rbp), %rax	#, tmp117
 3104 0180 4889C7   		movq	%rax, %rdi	# tmp117,
 3105 0183 E8000000 		call	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev	#
 3105      00
 3106 0188 4889D8   		movq	%rbx, %rax	# tmp115, D.54898
 3107 018b 4889C7   		movq	%rax, %rdi	# D.54898,
 3108              	.LEHB13:
 3109 018e E8000000 		call	_Unwind_Resume@PLT	#
 3109      00
 3110              	.LEHE13:
 3111              	.L131:
 3112              	.LBE31:
 3113              	.LBE32:
 3114              	# /usr/include/c++/9/bits/shared_ptr_base.h:684: 	}
 684:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3115              		.loc 5 684 2
 3116 0193 E8000000 		call	__stack_chk_fail@PLT	#
 3116      00
 3117              	.L128:
 3118 0198 4883C478 		addq	$120, %rsp	#,
 3119 019c 5B       		popq	%rbx	#
 3120 019d 415C     		popq	%r12	#
 3121 019f 415D     		popq	%r13	#
 3122 01a1 415E     		popq	%r14	#
 3123 01a3 415F     		popq	%r15	#
 3124 01a5 5D       		popq	%rbp	#
 3125              		.cfi_def_cfa 7, 8
 3126 01a6 C3       		ret	
 3127              		.cfi_endproc
 3128              	.LFE2998:
 3129              		.section	.gcc_except_table
 3130              	.LLSDA2998:
 3131 003c FF       		.byte	0xff
 3132 003d FF       		.byte	0xff
 3133 003e 01       		.byte	0x1
 3134 003f 10       		.uleb128 .LLSDACSE2998-.LLSDACSB2998
 3135              	.LLSDACSB2998:
 3136 0040 65       		.uleb128 .LEHB11-.LFB2998
 3137 0041 05       		.uleb128 .LEHE11-.LEHB11
 3138 0042 F502     		.uleb128 .L129-.LFB2998
 3139 0044 00       		.uleb128 0
 3140 0045 D801     		.uleb128 .LEHB12-.LFB2998
 3141 0047 05       		.uleb128 .LEHE12-.LEHB12
 3142 0048 C602     		.uleb128 .L130-.LFB2998
 3143 004a 00       		.uleb128 0
 3144 004b 8E03     		.uleb128 .LEHB13-.LFB2998
 3145 004d 05       		.uleb128 .LEHE13-.LEHB13
 3146 004e 00       		.uleb128 0
 3147 004f 00       		.uleb128 0
 3148              	.LLSDACSE2998:
 3149              		.section	.text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2I7ComplexSaIS4_EJddEEERPT_St2
 3151              		.weak	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexSaIS4_EJddEEERPT_St20_Sp_allo
 3152              		.set	_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1I7ComplexSaIS4_EJddEEERPT_St20_Sp_alloc
 3153              		.section	.text._ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE31_M_enable_shared_from_t
 3154              		.align 2
 3155              		.weak	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE31_M_enable_shared_from_this_withI
 3157              	_ZNSt12__shared_ptrI7ComplexLN9__gnu_cxx12_Lock_policyE2EE31_M_enable_shared_from_this_withIS0_S0_E
 3158              	.LFB3000:
1346:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1347:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
1348:/usr/include/c++/9/bits/shared_ptr_base.h **** 	       typename... _Args>
1349:/usr/include/c++/9/bits/shared_ptr_base.h **** 	friend __shared_ptr<_Tp1, _Lp1>
1350:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocate_shared(const _Alloc& __a, _Args&&... __args);
1351:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1352:/usr/include/c++/9/bits/shared_ptr_base.h ****       // This constructor is used by __weak_ptr::lock() and
1353:/usr/include/c++/9/bits/shared_ptr_base.h ****       // shared_ptr::shared_ptr(const weak_ptr&, std::nothrow_t).
1354:/usr/include/c++/9/bits/shared_ptr_base.h ****       __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
1355:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_refcount(__r._M_refcount, std::nothrow)
1356:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
1357:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
1358:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
1359:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1360:/usr/include/c++/9/bits/shared_ptr_base.h ****       friend class __weak_ptr<_Tp, _Lp>;
1361:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1362:/usr/include/c++/9/bits/shared_ptr_base.h ****     private:
1363:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1364:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1365:/usr/include/c++/9/bits/shared_ptr_base.h **** 	using __esft_base_t = decltype(__enable_shared_from_this_base(
1366:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      std::declval<const __shared_count<_Lp>&>(),
1367:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      std::declval<_Yp*>()));
1368:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1369:/usr/include/c++/9/bits/shared_ptr_base.h ****       // Detect an accessible and unambiguous enable_shared_from_this base.
1370:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename = void>
1371:/usr/include/c++/9/bits/shared_ptr_base.h **** 	struct __has_esft_base
1372:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: false_type { };
1373:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1374:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp>
1375:/usr/include/c++/9/bits/shared_ptr_base.h **** 	struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
1376:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: __not_<is_array<_Tp>> { }; // No enable shared_from_this for arrays
1377:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1378:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
1379:/usr/include/c++/9/bits/shared_ptr_base.h **** 	typename enable_if<__has_esft_base<_Yp2>::value>::type
1380:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_enable_shared_from_this_with(_Yp* __p) noexcept
1381:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
1382:/usr/include/c++/9/bits/shared_ptr_base.h **** 	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
1383:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
1384:/usr/include/c++/9/bits/shared_ptr_base.h **** 	}
1385:/usr/include/c++/9/bits/shared_ptr_base.h **** 
1386:/usr/include/c++/9/bits/shared_ptr_base.h ****       template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
1387:/usr/include/c++/9/bits/shared_ptr_base.h **** 	typename enable_if<!__has_esft_base<_Yp2>::value>::type
1388:/usr/include/c++/9/bits/shared_ptr_base.h **** 	_M_enable_shared_from_this_with(_Yp*) noexcept
 3159              		.loc 5 1388 2
 3160              		.cfi_startproc
 3161 0000 F30F1EFA 		endbr64	
 3162 0004 55       		pushq	%rbp	#
 3163              		.cfi_def_cfa_offset 16
 3164              		.cfi_offset 6, -16
 3165 0005 4889E5   		movq	%rsp, %rbp	#,
 3166              		.cfi_def_cfa_register 6
 3167 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3168 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.53192, D.53192
 3169              	# /usr/include/c++/9/bits/shared_ptr_base.h:1389: 	{ }
1389:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{ }
 3170              		.loc 5 1389 4
 3171 0010 90       		nop	
 3172 0011 5D       		popq	%rbp	#
 3173              		.cfi_def_cfa 7, 8
 3174 0012 C3       		ret	
 3175              		.cfi_endproc
 3176              	.LFE3000:
 3178              		.section	.text._ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC2I
 3179              		.align 2
 3180              		.weak	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC2IS0_EERKSa
 3182              	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC2IS0_EERKSaIT_E:
 3183              	.LFB3029:
 150:/usr/include/c++/9/bits/allocator.h **** 
 3184              		.loc 8 150 2
 3185              		.cfi_startproc
 3186 0000 F30F1EFA 		endbr64	
 3187 0004 55       		pushq	%rbp	#
 3188              		.cfi_def_cfa_offset 16
 3189              		.cfi_offset 6, -16
 3190 0005 4889E5   		movq	%rsp, %rbp	#,
 3191              		.cfi_def_cfa_register 6
 3192 0008 4883EC10 		subq	$16, %rsp	#,
 3193 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3194 0010 488975F0 		movq	%rsi, -16(%rbp)	# D.53719, D.53719
 3195              	.LBB33:
 3196              	# /usr/include/c++/9/bits/allocator.h:150: 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 150:/usr/include/c++/9/bits/allocator.h **** 
 3197              		.loc 8 150 53
 3198 0014 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 3199 0018 4889C7   		movq	%rax, %rdi	# tmp82,
 3200 001b E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3200      00
 3201              	.LBE33:
 3202              	# /usr/include/c++/9/bits/allocator.h:150: 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 150:/usr/include/c++/9/bits/allocator.h **** 
 3203              		.loc 8 150 55
 3204 0020 90       		nop	
 3205 0021 C9       		leave	
 3206              		.cfi_def_cfa 7, 8
 3207 0022 C3       		ret	
 3208              		.cfi_endproc
 3209              	.LFE3029:
 3211              		.weak	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS0_EERKSa
 3212              		.set	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS0_EERKSaI
 3213              		.section	.text._ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED2E
 3214              		.align 2
 3215              		.weak	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED2Ev
 3217              	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED2Ev:
 3218              	.LFB3032:
 3219              		.loc 8 152 7
 3220              		.cfi_startproc
 3221 0000 F30F1EFA 		endbr64	
 3222 0004 55       		pushq	%rbp	#
 3223              		.cfi_def_cfa_offset 16
 3224              		.cfi_offset 6, -16
 3225 0005 4889E5   		movq	%rsp, %rbp	#,
 3226              		.cfi_def_cfa_register 6
 3227 0008 4883EC10 		subq	$16, %rsp	#,
 3228 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3229              	.LBB34:
 3230              	# /usr/include/c++/9/bits/allocator.h:152:       ~allocator() _GLIBCXX_NOTHROW { }
 3231              		.loc 8 152 39
 3232 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 3233 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 3234 0017 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3234      00
 3235              	.LBE34:
 3236 001c 90       		nop	
 3237 001d C9       		leave	
 3238              		.cfi_def_cfa 7, 8
 3239 001e C3       		ret	
 3240              		.cfi_endproc
 3241              	.LFE3032:
 3243              		.weak	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev
 3244              		.set	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev,_ZNSaISt
 3245              		.section	.text._ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx
 3246              		.weak	_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_p
 3248              	_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2
 3249              	.LFB3034:
 3250              		.file 11 "/usr/include/c++/9/bits/allocated_ptr.h"
   1:/usr/include/c++/9/bits/allocated_ptr.h **** // Guarded Allocation -*- C++ -*-
   2:/usr/include/c++/9/bits/allocated_ptr.h **** 
   3:/usr/include/c++/9/bits/allocated_ptr.h **** // Copyright (C) 2014-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/allocated_ptr.h **** //
   5:/usr/include/c++/9/bits/allocated_ptr.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/allocated_ptr.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/allocated_ptr.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/allocated_ptr.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/allocated_ptr.h **** // any later version.
  10:/usr/include/c++/9/bits/allocated_ptr.h **** 
  11:/usr/include/c++/9/bits/allocated_ptr.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/allocated_ptr.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/allocated_ptr.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/allocated_ptr.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/allocated_ptr.h **** 
  16:/usr/include/c++/9/bits/allocated_ptr.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/allocated_ptr.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/allocated_ptr.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/allocated_ptr.h **** 
  20:/usr/include/c++/9/bits/allocated_ptr.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/allocated_ptr.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/allocated_ptr.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/allocated_ptr.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/allocated_ptr.h **** 
  25:/usr/include/c++/9/bits/allocated_ptr.h **** /** @file bits/allocated_ptr.h
  26:/usr/include/c++/9/bits/allocated_ptr.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/allocated_ptr.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/9/bits/allocated_ptr.h ****  */
  29:/usr/include/c++/9/bits/allocated_ptr.h **** 
  30:/usr/include/c++/9/bits/allocated_ptr.h **** #ifndef _ALLOCATED_PTR_H
  31:/usr/include/c++/9/bits/allocated_ptr.h **** #define _ALLOCATED_PTR_H 1
  32:/usr/include/c++/9/bits/allocated_ptr.h **** 
  33:/usr/include/c++/9/bits/allocated_ptr.h **** #if __cplusplus < 201103L
  34:/usr/include/c++/9/bits/allocated_ptr.h **** # include <bits/c++0xwarning.h>
  35:/usr/include/c++/9/bits/allocated_ptr.h **** #else
  36:/usr/include/c++/9/bits/allocated_ptr.h **** # include <type_traits>
  37:/usr/include/c++/9/bits/allocated_ptr.h **** # include <bits/ptr_traits.h>
  38:/usr/include/c++/9/bits/allocated_ptr.h **** # include <bits/alloc_traits.h>
  39:/usr/include/c++/9/bits/allocated_ptr.h **** 
  40:/usr/include/c++/9/bits/allocated_ptr.h **** namespace std _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/9/bits/allocated_ptr.h **** {
  42:/usr/include/c++/9/bits/allocated_ptr.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/9/bits/allocated_ptr.h **** 
  44:/usr/include/c++/9/bits/allocated_ptr.h ****   /// Non-standard RAII type for managing pointers obtained from allocators.
  45:/usr/include/c++/9/bits/allocated_ptr.h ****   template<typename _Alloc>
  46:/usr/include/c++/9/bits/allocated_ptr.h ****     struct __allocated_ptr
  47:/usr/include/c++/9/bits/allocated_ptr.h ****     {
  48:/usr/include/c++/9/bits/allocated_ptr.h ****       using pointer = typename allocator_traits<_Alloc>::pointer;
  49:/usr/include/c++/9/bits/allocated_ptr.h ****       using value_type = typename allocator_traits<_Alloc>::value_type;
  50:/usr/include/c++/9/bits/allocated_ptr.h **** 
  51:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Take ownership of __ptr
  52:/usr/include/c++/9/bits/allocated_ptr.h ****       __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
  53:/usr/include/c++/9/bits/allocated_ptr.h ****       : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
  54:/usr/include/c++/9/bits/allocated_ptr.h ****       { }
  55:/usr/include/c++/9/bits/allocated_ptr.h **** 
  56:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Convert __ptr to allocator's pointer type and take ownership of it
  57:/usr/include/c++/9/bits/allocated_ptr.h ****       template<typename _Ptr,
  58:/usr/include/c++/9/bits/allocated_ptr.h **** 	       typename _Req = _Require<is_same<_Ptr, value_type*>>>
  59:/usr/include/c++/9/bits/allocated_ptr.h ****       __allocated_ptr(_Alloc& __a, _Ptr __ptr)
  60:/usr/include/c++/9/bits/allocated_ptr.h ****       : _M_alloc(std::__addressof(__a)),
  61:/usr/include/c++/9/bits/allocated_ptr.h **** 	_M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
  62:/usr/include/c++/9/bits/allocated_ptr.h ****       { }
  63:/usr/include/c++/9/bits/allocated_ptr.h **** 
  64:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Transfer ownership of the owned pointer
  65:/usr/include/c++/9/bits/allocated_ptr.h ****       __allocated_ptr(__allocated_ptr&& __gd) noexcept
  66:/usr/include/c++/9/bits/allocated_ptr.h ****       : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
  67:/usr/include/c++/9/bits/allocated_ptr.h ****       { __gd._M_ptr = nullptr; }
  68:/usr/include/c++/9/bits/allocated_ptr.h **** 
  69:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Deallocate the owned pointer
  70:/usr/include/c++/9/bits/allocated_ptr.h ****       ~__allocated_ptr()
  71:/usr/include/c++/9/bits/allocated_ptr.h ****       {
  72:/usr/include/c++/9/bits/allocated_ptr.h **** 	if (_M_ptr != nullptr)
  73:/usr/include/c++/9/bits/allocated_ptr.h **** 	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
  74:/usr/include/c++/9/bits/allocated_ptr.h ****       }
  75:/usr/include/c++/9/bits/allocated_ptr.h **** 
  76:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Release ownership of the owned pointer
  77:/usr/include/c++/9/bits/allocated_ptr.h ****       __allocated_ptr&
  78:/usr/include/c++/9/bits/allocated_ptr.h ****       operator=(std::nullptr_t) noexcept
  79:/usr/include/c++/9/bits/allocated_ptr.h ****       {
  80:/usr/include/c++/9/bits/allocated_ptr.h **** 	_M_ptr = nullptr;
  81:/usr/include/c++/9/bits/allocated_ptr.h **** 	return *this;
  82:/usr/include/c++/9/bits/allocated_ptr.h ****       }
  83:/usr/include/c++/9/bits/allocated_ptr.h **** 
  84:/usr/include/c++/9/bits/allocated_ptr.h ****       /// Get the address that the owned pointer refers to.
  85:/usr/include/c++/9/bits/allocated_ptr.h ****       value_type* get() { return std::__to_address(_M_ptr); }
  86:/usr/include/c++/9/bits/allocated_ptr.h **** 
  87:/usr/include/c++/9/bits/allocated_ptr.h ****     private:
  88:/usr/include/c++/9/bits/allocated_ptr.h ****       _Alloc* _M_alloc;
  89:/usr/include/c++/9/bits/allocated_ptr.h ****       pointer _M_ptr;
  90:/usr/include/c++/9/bits/allocated_ptr.h ****     };
  91:/usr/include/c++/9/bits/allocated_ptr.h **** 
  92:/usr/include/c++/9/bits/allocated_ptr.h ****   /// Allocate space for a single object using __a
  93:/usr/include/c++/9/bits/allocated_ptr.h ****   template<typename _Alloc>
  94:/usr/include/c++/9/bits/allocated_ptr.h ****     __allocated_ptr<_Alloc>
  95:/usr/include/c++/9/bits/allocated_ptr.h ****     __allocate_guarded(_Alloc& __a)
 3251              		.loc 11 95 5
 3252              		.cfi_startproc
 3253 0000 F30F1EFA 		endbr64	
 3254 0004 55       		pushq	%rbp	#
 3255              		.cfi_def_cfa_offset 16
 3256              		.cfi_offset 6, -16
 3257 0005 4889E5   		movq	%rsp, %rbp	#,
 3258              		.cfi_def_cfa_register 6
 3259 0008 4883EC10 		subq	$16, %rsp	#,
 3260 000c 48897DF8 		movq	%rdi, -8(%rbp)	# .result_ptr, .result_ptr
 3261 0010 488975F0 		movq	%rsi, -16(%rbp)	# __a, __a
 3262              	# /usr/include/c++/9/bits/allocated_ptr.h:97:       return { __a, std::allocator_traits<_Alloc>::al
  96:/usr/include/c++/9/bits/allocated_ptr.h ****     {
  97:/usr/include/c++/9/bits/allocated_ptr.h ****       return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 3263              		.loc 11 97 69
 3264 0014 488B45F0 		movq	-16(%rbp), %rax	# __a, tmp83
 3265 0018 BE010000 		movl	$1, %esi	#,
 3265      00
 3266 001d 4889C7   		movq	%rax, %rdi	# tmp83,
 3267 0020 E8000000 		call	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3267      00
 3268 0025 4889C2   		movq	%rax, %rdx	#, _1
 3269 0028 488B4DF0 		movq	-16(%rbp), %rcx	# __a, tmp84
 3270 002c 488B45F8 		movq	-8(%rbp), %rax	# <retval>, tmp85
 3271 0030 4889CE   		movq	%rcx, %rsi	# tmp84,
 3272 0033 4889C7   		movq	%rax, %rdi	# tmp85,
 3273 0036 E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3273      00
 3274              	# /usr/include/c++/9/bits/allocated_ptr.h:98:     }
  98:/usr/include/c++/9/bits/allocated_ptr.h ****     }
 3275              		.loc 11 98 5
 3276 003b 488B45F8 		movq	-8(%rbp), %rax	# <retval>,
 3277 003f C9       		leave	
 3278              		.cfi_def_cfa 7, 8
 3279 0040 C3       		ret	
 3280              		.cfi_endproc
 3281              	.LFE3034:
 3283              		.section	.text._ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12
 3284              		.align 2
 3285              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3287              	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EE
 3288              	.LFB3036:
  70:/usr/include/c++/9/bits/allocated_ptr.h ****       {
 3289              		.loc 11 70 7
 3290              		.cfi_startproc
 3291              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3292              		.cfi_lsda 0x1b,.LLSDA3036
 3293 0000 F30F1EFA 		endbr64	
 3294 0004 55       		pushq	%rbp	#
 3295              		.cfi_def_cfa_offset 16
 3296              		.cfi_offset 6, -16
 3297 0005 4889E5   		movq	%rsp, %rbp	#,
 3298              		.cfi_def_cfa_register 6
 3299 0008 4883EC10 		subq	$16, %rsp	#,
 3300 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3301              	.LBB35:
 3302              	# /usr/include/c++/9/bits/allocated_ptr.h:72: 	if (_M_ptr != nullptr)
  72:/usr/include/c++/9/bits/allocated_ptr.h **** 	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 3303              		.loc 11 72 6
 3304 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 3305 0014 488B4008 		movq	8(%rax), %rax	# this_6(D)->_M_ptr, _1
 3306              	# /usr/include/c++/9/bits/allocated_ptr.h:72: 	if (_M_ptr != nullptr)
  72:/usr/include/c++/9/bits/allocated_ptr.h **** 	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 3307              		.loc 11 72 2
 3308 0018 4885C0   		testq	%rax, %rax	# _1
 3309 001b 741F     		je	.L139	#,
 3310              	# /usr/include/c++/9/bits/allocated_ptr.h:73: 	  std::allocator_traits<_Alloc>::deallocate(*_M_allo
  73:/usr/include/c++/9/bits/allocated_ptr.h ****       }
 3311              		.loc 11 73 45
 3312 001d 488B45F8 		movq	-8(%rbp), %rax	# this, tmp86
 3313 0021 488B4808 		movq	8(%rax), %rcx	# this_6(D)->_M_ptr, _2
 3314              	# /usr/include/c++/9/bits/allocated_ptr.h:73: 	  std::allocator_traits<_Alloc>::deallocate(*_M_allo
  73:/usr/include/c++/9/bits/allocated_ptr.h ****       }
 3315              		.loc 11 73 47
 3316 0025 488B45F8 		movq	-8(%rbp), %rax	# this, tmp87
 3317 0029 488B00   		movq	(%rax), %rax	# this_6(D)->_M_alloc, _3
 3318              	# /usr/include/c++/9/bits/allocated_ptr.h:73: 	  std::allocator_traits<_Alloc>::deallocate(*_M_allo
  73:/usr/include/c++/9/bits/allocated_ptr.h ****       }
 3319              		.loc 11 73 45
 3320 002c BA010000 		movl	$1, %edx	#,
 3320      00
 3321 0031 4889CE   		movq	%rcx, %rsi	# _2,
 3322 0034 4889C7   		movq	%rax, %rdi	# _3,
 3323 0037 E8000000 		call	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3323      00
 3324              	.L139:
 3325              	.LBE35:
 3326              	# /usr/include/c++/9/bits/allocated_ptr.h:74:       }
  74:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3327              		.loc 11 74 7
 3328 003c 90       		nop	
 3329 003d C9       		leave	
 3330              		.cfi_def_cfa 7, 8
 3331 003e C3       		ret	
 3332              		.cfi_endproc
 3333              	.LFE3036:
 3334              		.section	.gcc_except_table
 3335              	.LLSDA3036:
 3336 0050 FF       		.byte	0xff
 3337 0051 FF       		.byte	0xff
 3338 0052 01       		.byte	0x1
 3339 0053 00       		.uleb128 .LLSDACSE3036-.LLSDACSB3036
 3340              	.LLSDACSB3036:
 3341              	.LLSDACSE3036:
 3342              		.section	.text._ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12
 3344              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3345              		.set	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3346              		.section	.text._ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12
 3347              		.align 2
 3348              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3350              	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EE
 3351              	.LFB3041:
  85:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3352              		.loc 11 85 19
 3353              		.cfi_startproc
 3354 0000 F30F1EFA 		endbr64	
 3355 0004 55       		pushq	%rbp	#
 3356              		.cfi_def_cfa_offset 16
 3357              		.cfi_offset 6, -16
 3358 0005 4889E5   		movq	%rsp, %rbp	#,
 3359              		.cfi_def_cfa_register 6
 3360 0008 4883EC10 		subq	$16, %rsp	#,
 3361 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3362              	# /usr/include/c++/9/bits/allocated_ptr.h:85:       value_type* get() { return std::__to_address(_M
  85:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3363              		.loc 11 85 51
 3364 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 3365 0014 488B4008 		movq	8(%rax), %rax	# this_3(D)->_M_ptr, _1
 3366 0018 4889C7   		movq	%rax, %rdi	# _1,
 3367 001b E8000000 		call	_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EEE
 3367      00
 3368              	# /usr/include/c++/9/bits/allocated_ptr.h:85:       value_type* get() { return std::__to_address(_M
  85:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3369              		.loc 11 85 61
 3370 0020 C9       		leave	
 3371              		.cfi_def_cfa 7, 8
 3372 0021 C3       		ret	
 3373              		.cfi_endproc
 3374              	.LFE3041:
 3376              		.section	.text._ZNSaI7ComplexEC2ERKS0_,"axG",@progbits,_ZNSaI7ComplexEC5ERKS0_,comdat
 3377              		.align 2
 3378              		.weak	_ZNSaI7ComplexEC2ERKS0_
 3380              	_ZNSaI7ComplexEC2ERKS0_:
 3381              	.LFB3043:
 140:/usr/include/c++/9/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3382              		.loc 8 140 7
 3383              		.cfi_startproc
 3384 0000 F30F1EFA 		endbr64	
 3385 0004 55       		pushq	%rbp	#
 3386              		.cfi_def_cfa_offset 16
 3387              		.cfi_offset 6, -16
 3388 0005 4889E5   		movq	%rsp, %rbp	#,
 3389              		.cfi_def_cfa_register 6
 3390 0008 4883EC10 		subq	$16, %rsp	#,
 3391 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3392 0010 488975F0 		movq	%rsi, -16(%rbp)	# __a, __a
 3393              	.LBB36:
 3394              	# /usr/include/c++/9/bits/allocator.h:141:       : __allocator_base<_Tp>(__a) { }
 141:/usr/include/c++/9/bits/allocator.h **** 
 3395              		.loc 8 141 34
 3396 0014 488B55F0 		movq	-16(%rbp), %rdx	# __a, tmp82
 3397 0018 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 3398 001c 4889D6   		movq	%rdx, %rsi	# tmp82,
 3399 001f 4889C7   		movq	%rax, %rdi	# tmp83,
 3400 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2ERKS2_	#
 3400      00
 3401              	.LBE36:
 3402              	# /usr/include/c++/9/bits/allocator.h:141:       : __allocator_base<_Tp>(__a) { }
 141:/usr/include/c++/9/bits/allocator.h **** 
 3403              		.loc 8 141 38
 3404 0027 90       		nop	
 3405 0028 C9       		leave	
 3406              		.cfi_def_cfa 7, 8
 3407 0029 C3       		ret	
 3408              		.cfi_endproc
 3409              	.LFE3043:
 3411              		.weak	_ZNSaI7ComplexEC1ERKS0_
 3412              		.set	_ZNSaI7ComplexEC1ERKS0_,_ZNSaI7ComplexEC2ERKS0_
 3413              		.section	.text._ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED2Ev,"axG",@progbits,_ZNSt14_Sp_ebo_help
 3414              		.align 2
 3415              		.weak	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED2Ev
 3417              	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED2Ev:
 3418              	.LFB3048:
 412:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 3419              		.loc 5 412 12
 3420              		.cfi_startproc
 3421 0000 F30F1EFA 		endbr64	
 3422 0004 55       		pushq	%rbp	#
 3423              		.cfi_def_cfa_offset 16
 3424              		.cfi_offset 6, -16
 3425 0005 4889E5   		movq	%rsp, %rbp	#,
 3426              		.cfi_def_cfa_register 6
 3427 0008 4883EC10 		subq	$16, %rsp	#,
 3428 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3429              	.LBB37:
 3430              	# /usr/include/c++/9/bits/shared_ptr_base.h:412:     struct _Sp_ebo_helper<_Nm, _Tp, true> : privat
 412:/usr/include/c++/9/bits/shared_ptr_base.h ****     {
 3431              		.loc 5 412 12
 3432 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 3433 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 3434 0017 E8000000 		call	_ZNSaI7ComplexED2Ev	#
 3434      00
 3435              	.LBE37:
 3436 001c 90       		nop	
 3437 001d C9       		leave	
 3438              		.cfi_def_cfa 7, 8
 3439 001e C3       		ret	
 3440              		.cfi_endproc
 3441              	.LFE3048:
 3443              		.weak	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED1Ev
 3444              		.set	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED1Ev,_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED2
 3445              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD
 3446              		.align 2
 3447              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD2Ev
 3449              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD2Ev:
 3450              	.LFB3050:
 526:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 3451              		.loc 5 526 13
 3452              		.cfi_startproc
 3453 0000 F30F1EFA 		endbr64	
 3454 0004 55       		pushq	%rbp	#
 3455              		.cfi_def_cfa_offset 16
 3456              		.cfi_offset 6, -16
 3457 0005 4889E5   		movq	%rsp, %rbp	#,
 3458              		.cfi_def_cfa_register 6
 3459 0008 4883EC10 		subq	$16, %rsp	#,
 3460 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3461              	.LBB38:
 3462              	# /usr/include/c++/9/bits/shared_ptr_base.h:526:       class _Impl : _Sp_ebo_helper<0, _Alloc>
 526:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 3463              		.loc 5 526 13
 3464 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 3465 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 3466 0017 E8000000 		call	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EED2Ev	#
 3466      00
 3467              	.LBE38:
 3468 001c 90       		nop	
 3469 001d C9       		leave	
 3470              		.cfi_def_cfa 7, 8
 3471 001e C3       		ret	
 3472              		.cfi_endproc
 3473              	.LFE3050:
 3475              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev
 3476              		.set	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev,_ZNSt2
 3477              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC2IJddE
 3478              		.align 2
 3479              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC2IJddEEES1_DpOT
 3481              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC2IJddEEES1_DpOT_:
 3482              	.LFB3052:
 543:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_impl(__a)
 3483              		.loc 5 543 2
 3484              		.cfi_startproc
 3485              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3486              		.cfi_lsda 0x1b,.LLSDA3052
 3487 0000 F30F1EFA 		endbr64	
 3488 0004 55       		pushq	%rbp	#
 3489              		.cfi_def_cfa_offset 16
 3490              		.cfi_offset 6, -16
 3491 0005 4889E5   		movq	%rsp, %rbp	#,
 3492              		.cfi_def_cfa_register 6
 3493 0008 4154     		pushq	%r12	#
 3494 000a 53       		pushq	%rbx	#
 3495 000b 4883EC30 		subq	$48, %rsp	#,
 3496              		.cfi_offset 12, -24
 3497              		.cfi_offset 3, -32
 3498 000f 48897DD8 		movq	%rdi, -40(%rbp)	# this, this
 3499 0013 488975D0 		movq	%rsi, -48(%rbp)	# __a, __a
 3500 0017 488955C8 		movq	%rdx, -56(%rbp)	# __args#0, __args#0
 3501 001b 48894DC0 		movq	%rcx, -64(%rbp)	# __args#1, __args#1
 3502              	# /usr/include/c++/9/bits/shared_ptr_base.h:543: 	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __
 543:/usr/include/c++/9/bits/shared_ptr_base.h **** 	: _M_impl(__a)
 3503              		.loc 5 543 2
 3504 001f 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp106
 3504      25280000 
 3504      00
 3505 0028 488945E8 		movq	%rax, -24(%rbp)	# tmp106, D.54903
 3506 002c 31C0     		xorl	%eax, %eax	# tmp106
 3507              	.LBB39:
 3508              	# /usr/include/c++/9/bits/shared_ptr_base.h:544: 	: _M_impl(__a)
 544:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 3509              		.loc 5 544 15
 3510 002e 488B45D8 		movq	-40(%rbp), %rax	# this, _1
 3511 0032 4889C7   		movq	%rax, %rdi	# _1,
 3512 0035 E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev	#
 3512      00
 3513 003a 488D1500 		leaq	16+_ZTVSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE(%rip), %rdx	
 3513      000000
 3514 0041 488B45D8 		movq	-40(%rbp), %rax	# this, tmp91
 3515 0045 488910   		movq	%rdx, (%rax)	# _2, this_10(D)->D.53547._vptr._Sp_counted_base
 3516 0048 488B45D8 		movq	-40(%rbp), %rax	# this, tmp92
 3517 004c 488D5810 		leaq	16(%rax), %rbx	#, _3
 3518 0050 488B55D0 		movq	-48(%rbp), %rdx	# __a, tmp93
 3519 0054 488D45E7 		leaq	-25(%rbp), %rax	#, tmp94
 3520 0058 4889D6   		movq	%rdx, %rsi	# tmp93,
 3521 005b 4889C7   		movq	%rax, %rdi	# tmp94,
 3522 005e E8000000 		call	_ZNSaI7ComplexEC1ERKS0_	#
 3522      00
 3523 0063 488D45E7 		leaq	-25(%rbp), %rax	#, tmp95
 3524 0067 4889C6   		movq	%rax, %rsi	# tmp95,
 3525 006a 4889DF   		movq	%rbx, %rdi	# _3,
 3526 006d E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ES1_	#
 3526      00
 3527 0072 488D45E7 		leaq	-25(%rbp), %rax	#, tmp96
 3528 0076 4889C7   		movq	%rax, %rdi	# tmp96,
 3529 0079 E8000000 		call	_ZNSaI7ComplexED1Ev	#
 3529      00
 3530              	# /usr/include/c++/9/bits/shared_ptr_base.h:548: 	  allocator_traits<_Alloc>::construct(__a, _M_ptr
 548:/usr/include/c++/9/bits/shared_ptr_base.h **** 	      std::forward<_Args>(__args)...); // might throw
 3531              		.loc 5 548 39
 3532 007e 488B45C0 		movq	-64(%rbp), %rax	# __args#1, tmp97
 3533 0082 4889C7   		movq	%rax, %rdi	# tmp97,
 3534 0085 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3534      00
 3535 008a 4989C4   		movq	%rax, %r12	#, _4
 3536 008d 488B45C8 		movq	-56(%rbp), %rax	# __args#0, tmp98
 3537 0091 4889C7   		movq	%rax, %rdi	# tmp98,
 3538 0094 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3538      00
 3539 0099 4889C3   		movq	%rax, %rbx	#, _5
 3540 009c 488B45D8 		movq	-40(%rbp), %rax	# this, tmp99
 3541 00a0 4889C7   		movq	%rax, %rdi	# tmp99,
 3542 00a3 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv	#
 3542      00
 3543 00a8 4889C6   		movq	%rax, %rsi	#, _6
 3544 00ab 488B45D0 		movq	-48(%rbp), %rax	# __a, tmp100
 3545 00af 4C89E1   		movq	%r12, %rcx	# _4,
 3546 00b2 4889DA   		movq	%rbx, %rdx	# _5,
 3547 00b5 4889C7   		movq	%rax, %rdi	# tmp100,
 3548              	.LEHB14:
 3549 00b8 E8000000 		call	_ZNSt16allocator_traitsISaI7ComplexEE9constructIS0_JddEEEvRS1_PT_DpOT0_	#
 3549      00
 3550              	.LEHE14:
 3551              	.LBE39:
 3552              	# /usr/include/c++/9/bits/shared_ptr_base.h:550: 	}
 550:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3553              		.loc 5 550 2
 3554 00bd EB2E     		jmp	.L149	#
 3555              	.L148:
 3556 00bf F30F1EFA 		endbr64	
 3557 00c3 4889C3   		movq	%rax, %rbx	#, tmp103
 3558              	.LBB40:
 3559              	# /usr/include/c++/9/bits/shared_ptr_base.h:544: 	: _M_impl(__a)
 544:/usr/include/c++/9/bits/shared_ptr_base.h **** 	{
 3560              		.loc 5 544 15
 3561 00c6 488B45D8 		movq	-40(%rbp), %rax	# this, tmp101
 3562 00ca 4883C010 		addq	$16, %rax	#, _7
 3563 00ce 4889C7   		movq	%rax, %rdi	# _7,
 3564 00d1 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev	#
 3564      00
 3565 00d6 488B45D8 		movq	-40(%rbp), %rax	# this, _8
 3566 00da 4889C7   		movq	%rax, %rdi	# _8,
 3567 00dd E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev	#
 3567      00
 3568 00e2 4889D8   		movq	%rbx, %rax	# tmp102, D.54902
 3569 00e5 4889C7   		movq	%rax, %rdi	# D.54902,
 3570              	.LEHB15:
 3571 00e8 E8000000 		call	_Unwind_Resume@PLT	#
 3571      00
 3572              	.LEHE15:
 3573              	.L149:
 3574              	.LBE40:
 3575              	# /usr/include/c++/9/bits/shared_ptr_base.h:550: 	}
 550:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3576              		.loc 5 550 2
 3577 00ed 488B45E8 		movq	-24(%rbp), %rax	# D.54903, tmp107
 3578 00f1 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp107
 3578      25280000 
 3578      00
 3579 00fa 7405     		je	.L147	#,
 3580 00fc E8000000 		call	__stack_chk_fail@PLT	#
 3580      00
 3581              	.L147:
 3582 0101 4883C430 		addq	$48, %rsp	#,
 3583 0105 5B       		popq	%rbx	#
 3584 0106 415C     		popq	%r12	#
 3585 0108 5D       		popq	%rbp	#
 3586              		.cfi_def_cfa 7, 8
 3587 0109 C3       		ret	
 3588              		.cfi_endproc
 3589              	.LFE3052:
 3590              		.section	.gcc_except_table
 3591              	.LLSDA3052:
 3592 0054 FF       		.byte	0xff
 3593 0055 FF       		.byte	0xff
 3594 0056 01       		.byte	0x1
 3595 0057 0B       		.uleb128 .LLSDACSE3052-.LLSDACSB3052
 3596              	.LLSDACSB3052:
 3597 0058 B801     		.uleb128 .LEHB14-.LFB3052
 3598 005a 05       		.uleb128 .LEHE14-.LEHB14
 3599 005b BF01     		.uleb128 .L148-.LFB3052
 3600 005d 00       		.uleb128 0
 3601 005e E801     		.uleb128 .LEHB15-.LFB3052
 3602 0060 05       		.uleb128 .LEHE15-.LEHB15
 3603 0061 00       		.uleb128 0
 3604 0062 00       		.uleb128 0
 3605              	.LLSDACSE3052:
 3606              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC2IJddE
 3608              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC1IJddEEES1_DpOT
 3609              		.set	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEC1IJddEEES1_DpOT_
 3610              		.section	.text._ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12
 3611              		.align 2
 3612              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3614              	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EE
 3615              	.LFB3054:
  78:/usr/include/c++/9/bits/allocated_ptr.h ****       {
 3616              		.loc 11 78 7
 3617              		.cfi_startproc
 3618 0000 F30F1EFA 		endbr64	
 3619 0004 55       		pushq	%rbp	#
 3620              		.cfi_def_cfa_offset 16
 3621              		.cfi_offset 6, -16
 3622 0005 4889E5   		movq	%rsp, %rbp	#,
 3623              		.cfi_def_cfa_register 6
 3624 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3625 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.53803, D.53803
 3626              	# /usr/include/c++/9/bits/allocated_ptr.h:80: 	_M_ptr = nullptr;
  80:/usr/include/c++/9/bits/allocated_ptr.h **** 	return *this;
 3627              		.loc 11 80 2
 3628 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 3629 0014 48C74008 		movq	$0, 8(%rax)	#, this_2(D)->_M_ptr
 3629      00000000 
 3630              	# /usr/include/c++/9/bits/allocated_ptr.h:81: 	return *this;
  81:/usr/include/c++/9/bits/allocated_ptr.h ****       }
 3631              		.loc 11 81 10
 3632 001c 488B45F8 		movq	-8(%rbp), %rax	# this, _4
 3633              	# /usr/include/c++/9/bits/allocated_ptr.h:82:       }
  82:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3634              		.loc 11 82 7
 3635 0020 5D       		popq	%rbp	#
 3636              		.cfi_def_cfa 7, 8
 3637 0021 C3       		ret	
 3638              		.cfi_endproc
 3639              	.LFE3054:
 3641              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptr
 3642              		.align 2
 3643              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv
 3645              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv:
 3646              	.LFB3055:
 594:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3647              		.loc 5 594 12
 3648              		.cfi_startproc
 3649 0000 F30F1EFA 		endbr64	
 3650 0004 55       		pushq	%rbp	#
 3651              		.cfi_def_cfa_offset 16
 3652              		.cfi_offset 6, -16
 3653 0005 4889E5   		movq	%rsp, %rbp	#,
 3654              		.cfi_def_cfa_register 6
 3655 0008 4883EC10 		subq	$16, %rsp	#,
 3656 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3657              	# /usr/include/c++/9/bits/shared_ptr_base.h:594:       _Tp* _M_ptr() noexcept { return _M_impl._M_s
 594:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3658              		.loc 5 594 65
 3659 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 3660 0014 4883C010 		addq	$16, %rax	#, _1
 3661 0018 4889C7   		movq	%rax, %rdi	# _1,
 3662 001b E8000000 		call	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE6_M_ptrEv	#
 3662      00
 3663              	# /usr/include/c++/9/bits/shared_ptr_base.h:594:       _Tp* _M_ptr() noexcept { return _M_impl._M_s
 594:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3664              		.loc 5 594 68
 3665 0020 C9       		leave	
 3666              		.cfi_def_cfa 7, 8
 3667 0021 C3       		ret	
 3668              		.cfi_endproc
 3669              	.LFE3055:
 3671              		.section	.text._ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock
 3672              		.align 2
 3673              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 3675              	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2EEEC2Ev
 3676              	.LFB3067:
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 3677              		.loc 10 80 7
 3678              		.cfi_startproc
 3679 0000 F30F1EFA 		endbr64	
 3680 0004 55       		pushq	%rbp	#
 3681              		.cfi_def_cfa_offset 16
 3682              		.cfi_offset 6, -16
 3683 0005 4889E5   		movq	%rsp, %rbp	#,
 3684              		.cfi_def_cfa_register 6
 3685 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3686              	# /usr/include/c++/9/ext/new_allocator.h:80:       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/9/ext/new_allocator.h **** 
 3687              		.loc 10 80 47
 3688 000c 90       		nop	
 3689 000d 5D       		popq	%rbp	#
 3690              		.cfi_def_cfa 7, 8
 3691 000e C3       		ret	
 3692              		.cfi_endproc
 3693              	.LFE3067:
 3695              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 3696              		.set	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3697              		.section	.text._ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock
 3698              		.align 2
 3699              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 3701              	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2EEED2Ev
 3702              	.LFB3070:
 3703              		.loc 10 89 7
 3704              		.cfi_startproc
 3705 0000 F30F1EFA 		endbr64	
 3706 0004 55       		pushq	%rbp	#
 3707              		.cfi_def_cfa_offset 16
 3708              		.cfi_offset 6, -16
 3709 0005 4889E5   		movq	%rsp, %rbp	#,
 3710              		.cfi_def_cfa_register 6
 3711 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3712              	# /usr/include/c++/9/ext/new_allocator.h:89:       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 3713              		.loc 10 89 48
 3714 000c 90       		nop	
 3715 000d 5D       		popq	%rbp	#
 3716              		.cfi_def_cfa 7, 8
 3717 000e C3       		ret	
 3718              		.cfi_endproc
 3719              	.LFE3070:
 3721              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 3722              		.set	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3723              		.section	.text._ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx1
 3724              		.weak	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_po
 3726              	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2E
 3727              	.LFB3072:
 3728              		.file 12 "/usr/include/c++/9/bits/alloc_traits.h"
   1:/usr/include/c++/9/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/9/bits/alloc_traits.h **** 
   3:/usr/include/c++/9/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/alloc_traits.h **** //
   5:/usr/include/c++/9/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/alloc_traits.h **** 
  11:/usr/include/c++/9/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/alloc_traits.h **** 
  16:/usr/include/c++/9/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/alloc_traits.h **** 
  20:/usr/include/c++/9/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/alloc_traits.h **** 
  25:/usr/include/c++/9/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/9/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/9/bits/alloc_traits.h ****  */
  29:/usr/include/c++/9/bits/alloc_traits.h **** 
  30:/usr/include/c++/9/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/9/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/9/bits/alloc_traits.h **** 
  33:/usr/include/c++/9/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/9/bits/alloc_traits.h **** 
  35:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/usr/include/c++/9/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/c++/9/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/c++/9/bits/alloc_traits.h **** 
  39:/usr/include/c++/9/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/usr/include/c++/9/bits/alloc_traits.h **** 
  41:/usr/include/c++/9/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/9/bits/alloc_traits.h **** {
  43:/usr/include/c++/9/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/9/bits/alloc_traits.h **** 
  45:/usr/include/c++/9/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/usr/include/c++/9/bits/alloc_traits.h ****   {
  47:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/usr/include/c++/9/bits/alloc_traits.h **** 
  50:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/usr/include/c++/9/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/usr/include/c++/9/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/usr/include/c++/9/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/usr/include/c++/9/bits/alloc_traits.h **** 
  55:/usr/include/c++/9/bits/alloc_traits.h ****   protected:
  56:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  57:/usr/include/c++/9/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  59:/usr/include/c++/9/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  61:/usr/include/c++/9/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  63:/usr/include/c++/9/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  65:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  67:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  69:/usr/include/c++/9/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/usr/include/c++/9/bits/alloc_traits.h ****     template<typename _Tp>
  71:/usr/include/c++/9/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/usr/include/c++/9/bits/alloc_traits.h ****   };
  73:/usr/include/c++/9/bits/alloc_traits.h **** 
  74:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/usr/include/c++/9/bits/alloc_traits.h ****     using __alloc_rebind
  76:/usr/include/c++/9/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/usr/include/c++/9/bits/alloc_traits.h **** 
  78:/usr/include/c++/9/bits/alloc_traits.h ****   /**
  79:/usr/include/c++/9/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/c++/9/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/c++/9/bits/alloc_traits.h ****   */
  82:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/usr/include/c++/9/bits/alloc_traits.h ****     {
  85:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/c++/9/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/c++/9/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/c++/9/bits/alloc_traits.h **** 
  90:/usr/include/c++/9/bits/alloc_traits.h ****       /**
  91:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/usr/include/c++/9/bits/alloc_traits.h ****        *
  93:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/usr/include/c++/9/bits/alloc_traits.h ****       */
  95:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/usr/include/c++/9/bits/alloc_traits.h **** 
  97:/usr/include/c++/9/bits/alloc_traits.h ****     private:
  98:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr
 101:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 102:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 104:/usr/include/c++/9/bits/alloc_traits.h **** 
 105:/usr/include/c++/9/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 108:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 110:/usr/include/c++/9/bits/alloc_traits.h **** 
 111:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff
 114:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/usr/include/c++/9/bits/alloc_traits.h **** 
 116:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/usr/include/c++/9/bits/alloc_traits.h **** 
 120:/usr/include/c++/9/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 122:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/usr/include/c++/9/bits/alloc_traits.h **** 
 124:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/usr/include/c++/9/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/usr/include/c++/9/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/usr/include/c++/9/bits/alloc_traits.h **** 
 128:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 129:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 130:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/usr/include/c++/9/bits/alloc_traits.h ****        *
 132:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/usr/include/c++/9/bits/alloc_traits.h ****       */
 135:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/usr/include/c++/9/bits/alloc_traits.h **** 
 137:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 138:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/usr/include/c++/9/bits/alloc_traits.h ****        *
 140:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/usr/include/c++/9/bits/alloc_traits.h ****       */
 143:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/usr/include/c++/9/bits/alloc_traits.h **** 
 145:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 146:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/usr/include/c++/9/bits/alloc_traits.h ****        *
 148:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 150:/usr/include/c++/9/bits/alloc_traits.h ****       */
 151:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/usr/include/c++/9/bits/alloc_traits.h **** 
 153:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 154:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/usr/include/c++/9/bits/alloc_traits.h ****        *
 156:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/usr/include/c++/9/bits/alloc_traits.h ****       */
 159:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/usr/include/c++/9/bits/alloc_traits.h **** 
 161:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 162:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/usr/include/c++/9/bits/alloc_traits.h ****        *
 164:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/usr/include/c++/9/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/usr/include/c++/9/bits/alloc_traits.h ****       */
 167:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/usr/include/c++/9/bits/alloc_traits.h **** 
 169:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 170:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/usr/include/c++/9/bits/alloc_traits.h ****        *
 172:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/usr/include/c++/9/bits/alloc_traits.h ****       */
 175:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/usr/include/c++/9/bits/alloc_traits.h **** 
 178:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 179:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/usr/include/c++/9/bits/alloc_traits.h ****        *
 181:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/usr/include/c++/9/bits/alloc_traits.h ****       */
 184:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/usr/include/c++/9/bits/alloc_traits.h **** 
 187:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 188:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/usr/include/c++/9/bits/alloc_traits.h ****        *
 190:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/usr/include/c++/9/bits/alloc_traits.h ****       */
 193:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/usr/include/c++/9/bits/alloc_traits.h **** 
 196:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 197:/usr/include/c++/9/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/usr/include/c++/9/bits/alloc_traits.h ****        *
 199:/usr/include/c++/9/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/usr/include/c++/9/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/usr/include/c++/9/bits/alloc_traits.h ****       */
 202:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal
 203:/usr/include/c++/9/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/usr/include/c++/9/bits/alloc_traits.h **** 
 205:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 206:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 207:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 208:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/usr/include/c++/9/bits/alloc_traits.h **** 
 210:/usr/include/c++/9/bits/alloc_traits.h ****     private:
 211:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 213:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/usr/include/c++/9/bits/alloc_traits.h **** 
 217:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/usr/include/c++/9/bits/alloc_traits.h **** 	static pointer
 219:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/usr/include/c++/9/bits/alloc_traits.h **** 
 222:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/usr/include/c++/9/bits/alloc_traits.h **** 	struct __construct_helper
 224:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 225:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/usr/include/c++/9/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/usr/include/c++/9/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/usr/include/c++/9/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/usr/include/c++/9/bits/alloc_traits.h **** 
 230:/usr/include/c++/9/bits/alloc_traits.h **** 	  template<typename>
 231:/usr/include/c++/9/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/usr/include/c++/9/bits/alloc_traits.h **** 
 233:/usr/include/c++/9/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/usr/include/c++/9/bits/alloc_traits.h **** 	};
 235:/usr/include/c++/9/bits/alloc_traits.h **** 
 236:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/usr/include/c++/9/bits/alloc_traits.h **** 	using __has_construct
 238:/usr/include/c++/9/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/usr/include/c++/9/bits/alloc_traits.h **** 
 240:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/usr/include/c++/9/bits/alloc_traits.h **** 
 246:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/usr/include/c++/9/bits/alloc_traits.h **** 	static
 248:/usr/include/c++/9/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/usr/include/c++/9/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 252:/usr/include/c++/9/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 253:/usr/include/c++/9/bits/alloc_traits.h **** 
 254:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 255:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 256:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 257:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 258:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 259:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 260:/usr/include/c++/9/bits/alloc_traits.h **** 
 261:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 262:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 263:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 264:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 265:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 266:/usr/include/c++/9/bits/alloc_traits.h **** 
 267:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 268:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 269:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 270:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 271:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 272:/usr/include/c++/9/bits/alloc_traits.h **** 
 273:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 274:/usr/include/c++/9/bits/alloc_traits.h **** 	static size_type
 275:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 276:/usr/include/c++/9/bits/alloc_traits.h **** 	{
 277:/usr/include/c++/9/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 278:/usr/include/c++/9/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 279:/usr/include/c++/9/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 280:/usr/include/c++/9/bits/alloc_traits.h **** 	    / sizeof(value_type);
 281:/usr/include/c++/9/bits/alloc_traits.h **** 	}
 282:/usr/include/c++/9/bits/alloc_traits.h **** 
 283:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 284:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto
 285:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 286:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 287:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 288:/usr/include/c++/9/bits/alloc_traits.h **** 
 289:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Alloc2>
 290:/usr/include/c++/9/bits/alloc_traits.h **** 	static _Alloc2
 291:/usr/include/c++/9/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 292:/usr/include/c++/9/bits/alloc_traits.h **** 	{ return __a; }
 293:/usr/include/c++/9/bits/alloc_traits.h **** 
 294:/usr/include/c++/9/bits/alloc_traits.h ****     public:
 295:/usr/include/c++/9/bits/alloc_traits.h **** 
 296:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 297:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 298:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 300:/usr/include/c++/9/bits/alloc_traits.h ****        *
 301:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 302:/usr/include/c++/9/bits/alloc_traits.h ****       */
 303:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 304:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 305:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 306:/usr/include/c++/9/bits/alloc_traits.h **** 
 307:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 308:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 309:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 310:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 311:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 312:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 313:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 314:/usr/include/c++/9/bits/alloc_traits.h ****        *
 315:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 316:/usr/include/c++/9/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 317:/usr/include/c++/9/bits/alloc_traits.h ****       */
 318:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 319:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 320:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 321:/usr/include/c++/9/bits/alloc_traits.h **** 
 322:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 323:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 324:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 325:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 326:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 327:/usr/include/c++/9/bits/alloc_traits.h ****        *
 328:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 329:/usr/include/c++/9/bits/alloc_traits.h ****       */
 330:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 331:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 332:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 333:/usr/include/c++/9/bits/alloc_traits.h **** 
 334:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 335:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 336:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 337:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 338:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 339:/usr/include/c++/9/bits/alloc_traits.h ****        *
 340:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 341:/usr/include/c++/9/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 342:/usr/include/c++/9/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 343:/usr/include/c++/9/bits/alloc_traits.h ****        *  arguments @a __args...
 344:/usr/include/c++/9/bits/alloc_traits.h ****       */
 345:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 346:/usr/include/c++/9/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 347:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 348:/usr/include/c++/9/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 349:/usr/include/c++/9/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 350:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 351:/usr/include/c++/9/bits/alloc_traits.h **** 
 352:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 353:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 354:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 355:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 356:/usr/include/c++/9/bits/alloc_traits.h ****        *
 357:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 358:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 359:/usr/include/c++/9/bits/alloc_traits.h ****       */
 360:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Tp>
 361:/usr/include/c++/9/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 362:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 363:/usr/include/c++/9/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 364:/usr/include/c++/9/bits/alloc_traits.h **** 
 365:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 366:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 367:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 368:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 369:/usr/include/c++/9/bits/alloc_traits.h ****        *
 370:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 371:/usr/include/c++/9/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 372:/usr/include/c++/9/bits/alloc_traits.h ****       */
 373:/usr/include/c++/9/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 374:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 375:/usr/include/c++/9/bits/alloc_traits.h **** 
 376:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 377:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 378:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 379:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 380:/usr/include/c++/9/bits/alloc_traits.h ****        *
 381:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 382:/usr/include/c++/9/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 383:/usr/include/c++/9/bits/alloc_traits.h ****       */
 384:/usr/include/c++/9/bits/alloc_traits.h ****       static _Alloc
 385:/usr/include/c++/9/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 386:/usr/include/c++/9/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 387:/usr/include/c++/9/bits/alloc_traits.h ****     };
 388:/usr/include/c++/9/bits/alloc_traits.h **** 
 389:/usr/include/c++/9/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 390:/usr/include/c++/9/bits/alloc_traits.h ****   template<typename _Tp>
 391:/usr/include/c++/9/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 392:/usr/include/c++/9/bits/alloc_traits.h ****     {
 393:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator type
 394:/usr/include/c++/9/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 395:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocated type
 396:/usr/include/c++/9/bits/alloc_traits.h ****       using value_type = _Tp;
 397:/usr/include/c++/9/bits/alloc_traits.h **** 
 398:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's pointer type.
 399:/usr/include/c++/9/bits/alloc_traits.h ****       using pointer = _Tp*;
 400:/usr/include/c++/9/bits/alloc_traits.h **** 
 401:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 402:/usr/include/c++/9/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 403:/usr/include/c++/9/bits/alloc_traits.h **** 
 404:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 405:/usr/include/c++/9/bits/alloc_traits.h ****       using void_pointer = void*;
 406:/usr/include/c++/9/bits/alloc_traits.h **** 
 407:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 408:/usr/include/c++/9/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 409:/usr/include/c++/9/bits/alloc_traits.h **** 
 410:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's difference type
 411:/usr/include/c++/9/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 412:/usr/include/c++/9/bits/alloc_traits.h **** 
 413:/usr/include/c++/9/bits/alloc_traits.h ****       /// The allocator's size type
 414:/usr/include/c++/9/bits/alloc_traits.h ****       using size_type = std::size_t;
 415:/usr/include/c++/9/bits/alloc_traits.h **** 
 416:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 417:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 418:/usr/include/c++/9/bits/alloc_traits.h **** 
 419:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 420:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 421:/usr/include/c++/9/bits/alloc_traits.h **** 
 422:/usr/include/c++/9/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 423:/usr/include/c++/9/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 424:/usr/include/c++/9/bits/alloc_traits.h **** 
 425:/usr/include/c++/9/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 426:/usr/include/c++/9/bits/alloc_traits.h ****       using is_always_equal = true_type;
 427:/usr/include/c++/9/bits/alloc_traits.h **** 
 428:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 429:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 430:/usr/include/c++/9/bits/alloc_traits.h **** 
 431:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 432:/usr/include/c++/9/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 433:/usr/include/c++/9/bits/alloc_traits.h **** 
 434:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 435:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 436:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 437:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 438:/usr/include/c++/9/bits/alloc_traits.h ****        *
 439:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 440:/usr/include/c++/9/bits/alloc_traits.h ****       */
 441:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 442:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 3729              		.loc 12 442 7
 3730              		.cfi_startproc
 3731 0000 F30F1EFA 		endbr64	
 3732 0004 55       		pushq	%rbp	#
 3733              		.cfi_def_cfa_offset 16
 3734              		.cfi_offset 6, -16
 3735 0005 4889E5   		movq	%rsp, %rbp	#,
 3736              		.cfi_def_cfa_register 6
 3737 0008 4883EC10 		subq	$16, %rsp	#,
 3738 000c 48897DF8 		movq	%rdi, -8(%rbp)	# __a, __a
 3739 0010 488975F0 		movq	%rsi, -16(%rbp)	# __n, __n
 3740              	# /usr/include/c++/9/bits/alloc_traits.h:443:       { return __a.allocate(__n); }
 443:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 3741              		.loc 12 443 32
 3742 0014 488B4DF0 		movq	-16(%rbp), %rcx	# __n, tmp84
 3743 0018 488B45F8 		movq	-8(%rbp), %rax	# __a, tmp85
 3744 001c BA000000 		movl	$0, %edx	#,
 3744      00
 3745 0021 4889CE   		movq	%rcx, %rsi	# tmp84,
 3746 0024 4889C7   		movq	%rax, %rdi	# tmp85,
 3747 0027 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3747      00
 3748              	# /usr/include/c++/9/bits/alloc_traits.h:443:       { return __a.allocate(__n); }
 3749              		.loc 12 443 35
 3750 002c C9       		leave	
 3751              		.cfi_def_cfa 7, 8
 3752 002d C3       		ret	
 3753              		.cfi_endproc
 3754              	.LFE3072:
 3756              		.section	.text._ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12
 3757              		.align 2
 3758              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3760              	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EE
 3761              	.LFB3074:
  52:/usr/include/c++/9/bits/allocated_ptr.h ****       : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 3762              		.loc 11 52 7
 3763              		.cfi_startproc
 3764 0000 F30F1EFA 		endbr64	
 3765 0004 55       		pushq	%rbp	#
 3766              		.cfi_def_cfa_offset 16
 3767              		.cfi_offset 6, -16
 3768 0005 4889E5   		movq	%rsp, %rbp	#,
 3769              		.cfi_def_cfa_register 6
 3770 0008 4883EC20 		subq	$32, %rsp	#,
 3771 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3772 0010 488975F0 		movq	%rsi, -16(%rbp)	# __a, __a
 3773 0014 488955E8 		movq	%rdx, -24(%rbp)	# __ptr, __ptr
 3774              	.LBB41:
 3775              	# /usr/include/c++/9/bits/allocated_ptr.h:53:       : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr
  53:/usr/include/c++/9/bits/allocated_ptr.h ****       { }
 3776              		.loc 11 53 34
 3777 0018 488B45F0 		movq	-16(%rbp), %rax	# __a, tmp83
 3778 001c 4889C7   		movq	%rax, %rdi	# tmp83,
 3779 001f E8000000 		call	_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2E
 3779      00
 3780              	# /usr/include/c++/9/bits/allocated_ptr.h:53:       : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr
  53:/usr/include/c++/9/bits/allocated_ptr.h ****       { }
 3781              		.loc 11 53 54
 3782 0024 488B55F8 		movq	-8(%rbp), %rdx	# this, tmp84
 3783 0028 488902   		movq	%rax, (%rdx)	# _1, this_3(D)->_M_alloc
 3784 002b 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 3785 002f 488B55E8 		movq	-24(%rbp), %rdx	# __ptr, tmp86
 3786 0033 48895008 		movq	%rdx, 8(%rax)	# tmp86, this_3(D)->_M_ptr
 3787              	.LBE41:
 3788              	# /usr/include/c++/9/bits/allocated_ptr.h:54:       { }
  54:/usr/include/c++/9/bits/allocated_ptr.h **** 
 3789              		.loc 11 54 9
 3790 0037 90       		nop	
 3791 0038 C9       		leave	
 3792              		.cfi_def_cfa 7, 8
 3793 0039 C3       		ret	
 3794              		.cfi_endproc
 3795              	.LFE3074:
 3797              		.weak	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_pol
 3798              		.set	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 3799              		.section	.text._ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx1
 3800              		.weak	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_po
 3802              	_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2E
 3803              	.LFB3076:
 444:/usr/include/c++/9/bits/alloc_traits.h **** 
 445:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 446:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 447:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 448:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 449:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 450:/usr/include/c++/9/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 451:/usr/include/c++/9/bits/alloc_traits.h ****        *          of type @c value_type
 452:/usr/include/c++/9/bits/alloc_traits.h ****        *
 453:/usr/include/c++/9/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 454:/usr/include/c++/9/bits/alloc_traits.h ****       */
 455:/usr/include/c++/9/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 456:/usr/include/c++/9/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 457:/usr/include/c++/9/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 458:/usr/include/c++/9/bits/alloc_traits.h **** 
 459:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 460:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 461:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 462:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 463:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 464:/usr/include/c++/9/bits/alloc_traits.h ****        *
 465:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 466:/usr/include/c++/9/bits/alloc_traits.h ****       */
 467:/usr/include/c++/9/bits/alloc_traits.h ****       static void
 468:/usr/include/c++/9/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 3804              		.loc 12 468 7
 3805              		.cfi_startproc
 3806 0000 F30F1EFA 		endbr64	
 3807 0004 55       		pushq	%rbp	#
 3808              		.cfi_def_cfa_offset 16
 3809              		.cfi_offset 6, -16
 3810 0005 4889E5   		movq	%rsp, %rbp	#,
 3811              		.cfi_def_cfa_register 6
 3812 0008 4883EC20 		subq	$32, %rsp	#,
 3813 000c 48897DF8 		movq	%rdi, -8(%rbp)	# __a, __a
 3814 0010 488975F0 		movq	%rsi, -16(%rbp)	# __p, __p
 3815 0014 488955E8 		movq	%rdx, -24(%rbp)	# __n, __n
 3816              	# /usr/include/c++/9/bits/alloc_traits.h:469:       { __a.deallocate(__p, __n); }
 469:/usr/include/c++/9/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3817              		.loc 12 469 9
 3818 0018 488B55E8 		movq	-24(%rbp), %rdx	# __n, tmp82
 3819 001c 488B4DF0 		movq	-16(%rbp), %rcx	# __p, tmp83
 3820 0020 488B45F8 		movq	-8(%rbp), %rax	# __a, tmp84
 3821 0024 4889CE   		movq	%rcx, %rsi	# tmp83,
 3822 0027 4889C7   		movq	%rax, %rdi	# tmp84,
 3823 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2E
 3823      00
 3824              	# /usr/include/c++/9/bits/alloc_traits.h:469:       { __a.deallocate(__p, __n); }
 3825              		.loc 12 469 35
 3826 002f 90       		nop	
 3827 0030 C9       		leave	
 3828              		.cfi_def_cfa 7, 8
 3829 0031 C3       		ret	
 3830              		.cfi_endproc
 3831              	.LFE3076:
 3833              		.section	.text._ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_p
 3834              		.weak	_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EE
 3836              	_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EEEPT_S7_
 3837              	.LFB3077:
 3838              		.file 13 "/usr/include/c++/9/bits/ptr_traits.h"
   1:/usr/include/c++/9/bits/ptr_traits.h **** // Pointer Traits -*- C++ -*-
   2:/usr/include/c++/9/bits/ptr_traits.h **** 
   3:/usr/include/c++/9/bits/ptr_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/bits/ptr_traits.h **** //
   5:/usr/include/c++/9/bits/ptr_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/bits/ptr_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/bits/ptr_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/bits/ptr_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/bits/ptr_traits.h **** // any later version.
  10:/usr/include/c++/9/bits/ptr_traits.h **** 
  11:/usr/include/c++/9/bits/ptr_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/bits/ptr_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/bits/ptr_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/bits/ptr_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/bits/ptr_traits.h **** 
  16:/usr/include/c++/9/bits/ptr_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/bits/ptr_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/bits/ptr_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/bits/ptr_traits.h **** 
  20:/usr/include/c++/9/bits/ptr_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/bits/ptr_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/bits/ptr_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/bits/ptr_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/bits/ptr_traits.h **** 
  25:/usr/include/c++/9/bits/ptr_traits.h **** /** @file bits/ptr_traits.h
  26:/usr/include/c++/9/bits/ptr_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/9/bits/ptr_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/9/bits/ptr_traits.h ****  */
  29:/usr/include/c++/9/bits/ptr_traits.h **** 
  30:/usr/include/c++/9/bits/ptr_traits.h **** #ifndef _PTR_TRAITS_H
  31:/usr/include/c++/9/bits/ptr_traits.h **** #define _PTR_TRAITS_H 1
  32:/usr/include/c++/9/bits/ptr_traits.h **** 
  33:/usr/include/c++/9/bits/ptr_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/9/bits/ptr_traits.h **** 
  35:/usr/include/c++/9/bits/ptr_traits.h **** #include <bits/move.h>
  36:/usr/include/c++/9/bits/ptr_traits.h **** 
  37:/usr/include/c++/9/bits/ptr_traits.h **** #if __cplusplus > 201703L
  38:/usr/include/c++/9/bits/ptr_traits.h **** #define __cpp_lib_constexpr_memory 201811L
  39:/usr/include/c++/9/bits/ptr_traits.h **** namespace __gnu_debug { struct _Safe_iterator_base; }
  40:/usr/include/c++/9/bits/ptr_traits.h **** #endif
  41:/usr/include/c++/9/bits/ptr_traits.h **** 
  42:/usr/include/c++/9/bits/ptr_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/9/bits/ptr_traits.h **** {
  44:/usr/include/c++/9/bits/ptr_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/9/bits/ptr_traits.h **** 
  46:/usr/include/c++/9/bits/ptr_traits.h ****   class __undefined;
  47:/usr/include/c++/9/bits/ptr_traits.h **** 
  48:/usr/include/c++/9/bits/ptr_traits.h ****   // Given Template<T, ...> return T, otherwise invalid.
  49:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp>
  50:/usr/include/c++/9/bits/ptr_traits.h ****     struct __get_first_arg
  51:/usr/include/c++/9/bits/ptr_traits.h ****     { using type = __undefined; };
  52:/usr/include/c++/9/bits/ptr_traits.h **** 
  53:/usr/include/c++/9/bits/ptr_traits.h ****   template<template<typename, typename...> class _Template, typename _Tp,
  54:/usr/include/c++/9/bits/ptr_traits.h ****            typename... _Types>
  55:/usr/include/c++/9/bits/ptr_traits.h ****     struct __get_first_arg<_Template<_Tp, _Types...>>
  56:/usr/include/c++/9/bits/ptr_traits.h ****     { using type = _Tp; };
  57:/usr/include/c++/9/bits/ptr_traits.h **** 
  58:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp>
  59:/usr/include/c++/9/bits/ptr_traits.h ****     using __get_first_arg_t = typename __get_first_arg<_Tp>::type;
  60:/usr/include/c++/9/bits/ptr_traits.h **** 
  61:/usr/include/c++/9/bits/ptr_traits.h ****   // Given Template<T, ...> and U return Template<U, ...>, otherwise invalid.
  62:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp, typename _Up>
  63:/usr/include/c++/9/bits/ptr_traits.h ****     struct __replace_first_arg
  64:/usr/include/c++/9/bits/ptr_traits.h ****     { };
  65:/usr/include/c++/9/bits/ptr_traits.h **** 
  66:/usr/include/c++/9/bits/ptr_traits.h ****   template<template<typename, typename...> class _Template, typename _Up,
  67:/usr/include/c++/9/bits/ptr_traits.h ****            typename _Tp, typename... _Types>
  68:/usr/include/c++/9/bits/ptr_traits.h ****     struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
  69:/usr/include/c++/9/bits/ptr_traits.h ****     { using type = _Template<_Up, _Types...>; };
  70:/usr/include/c++/9/bits/ptr_traits.h **** 
  71:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp, typename _Up>
  72:/usr/include/c++/9/bits/ptr_traits.h ****     using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;
  73:/usr/include/c++/9/bits/ptr_traits.h **** 
  74:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp>
  75:/usr/include/c++/9/bits/ptr_traits.h ****     using __make_not_void
  76:/usr/include/c++/9/bits/ptr_traits.h ****       = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;
  77:/usr/include/c++/9/bits/ptr_traits.h **** 
  78:/usr/include/c++/9/bits/ptr_traits.h ****   /**
  79:/usr/include/c++/9/bits/ptr_traits.h ****    * @brief  Uniform interface to all pointer-like types
  80:/usr/include/c++/9/bits/ptr_traits.h ****    * @ingroup pointer_abstractions
  81:/usr/include/c++/9/bits/ptr_traits.h ****   */
  82:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Ptr>
  83:/usr/include/c++/9/bits/ptr_traits.h ****     struct pointer_traits
  84:/usr/include/c++/9/bits/ptr_traits.h ****     {
  85:/usr/include/c++/9/bits/ptr_traits.h ****     private:
  86:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Tp>
  87:/usr/include/c++/9/bits/ptr_traits.h **** 	using __element_type = typename _Tp::element_type;
  88:/usr/include/c++/9/bits/ptr_traits.h **** 
  89:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Tp>
  90:/usr/include/c++/9/bits/ptr_traits.h **** 	using __difference_type = typename _Tp::difference_type;
  91:/usr/include/c++/9/bits/ptr_traits.h **** 
  92:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Tp, typename _Up, typename = void>
  93:/usr/include/c++/9/bits/ptr_traits.h **** 	struct __rebind : __replace_first_arg<_Tp, _Up> { };
  94:/usr/include/c++/9/bits/ptr_traits.h **** 
  95:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Tp, typename _Up>
  96:/usr/include/c++/9/bits/ptr_traits.h **** 	struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
  97:/usr/include/c++/9/bits/ptr_traits.h **** 	{ using type = typename _Tp::template rebind<_Up>; };
  98:/usr/include/c++/9/bits/ptr_traits.h **** 
  99:/usr/include/c++/9/bits/ptr_traits.h ****     public:
 100:/usr/include/c++/9/bits/ptr_traits.h ****       /// The pointer type.
 101:/usr/include/c++/9/bits/ptr_traits.h ****       using pointer = _Ptr;
 102:/usr/include/c++/9/bits/ptr_traits.h **** 
 103:/usr/include/c++/9/bits/ptr_traits.h ****       /// The type pointed to.
 104:/usr/include/c++/9/bits/ptr_traits.h ****       using element_type
 105:/usr/include/c++/9/bits/ptr_traits.h **** 	= __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;
 106:/usr/include/c++/9/bits/ptr_traits.h **** 
 107:/usr/include/c++/9/bits/ptr_traits.h ****       /// The type used to represent the difference between two pointers.
 108:/usr/include/c++/9/bits/ptr_traits.h ****       using difference_type
 109:/usr/include/c++/9/bits/ptr_traits.h **** 	= __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;
 110:/usr/include/c++/9/bits/ptr_traits.h **** 
 111:/usr/include/c++/9/bits/ptr_traits.h ****       /// A pointer to a different type.
 112:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Up>
 113:/usr/include/c++/9/bits/ptr_traits.h ****         using rebind = typename __rebind<_Ptr, _Up>::type;
 114:/usr/include/c++/9/bits/ptr_traits.h **** 
 115:/usr/include/c++/9/bits/ptr_traits.h ****       static _Ptr
 116:/usr/include/c++/9/bits/ptr_traits.h ****       pointer_to(__make_not_void<element_type>& __e)
 117:/usr/include/c++/9/bits/ptr_traits.h ****       { return _Ptr::pointer_to(__e); }
 118:/usr/include/c++/9/bits/ptr_traits.h **** 
 119:/usr/include/c++/9/bits/ptr_traits.h ****       static_assert(!is_same<element_type, __undefined>::value,
 120:/usr/include/c++/9/bits/ptr_traits.h **** 	  "pointer type defines element_type or is like SomePointer<T, Args>");
 121:/usr/include/c++/9/bits/ptr_traits.h ****     };
 122:/usr/include/c++/9/bits/ptr_traits.h **** 
 123:/usr/include/c++/9/bits/ptr_traits.h ****   /**
 124:/usr/include/c++/9/bits/ptr_traits.h ****    * @brief  Partial specialization for built-in pointers.
 125:/usr/include/c++/9/bits/ptr_traits.h ****    * @ingroup pointer_abstractions
 126:/usr/include/c++/9/bits/ptr_traits.h ****   */
 127:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp>
 128:/usr/include/c++/9/bits/ptr_traits.h ****     struct pointer_traits<_Tp*>
 129:/usr/include/c++/9/bits/ptr_traits.h ****     {
 130:/usr/include/c++/9/bits/ptr_traits.h ****       /// The pointer type
 131:/usr/include/c++/9/bits/ptr_traits.h ****       typedef _Tp* pointer;
 132:/usr/include/c++/9/bits/ptr_traits.h ****       /// The type pointed to
 133:/usr/include/c++/9/bits/ptr_traits.h ****       typedef _Tp  element_type;
 134:/usr/include/c++/9/bits/ptr_traits.h ****       /// Type used to represent the difference between two pointers
 135:/usr/include/c++/9/bits/ptr_traits.h ****       typedef ptrdiff_t difference_type;
 136:/usr/include/c++/9/bits/ptr_traits.h **** 
 137:/usr/include/c++/9/bits/ptr_traits.h ****       template<typename _Up>
 138:/usr/include/c++/9/bits/ptr_traits.h ****         using rebind = _Up*;
 139:/usr/include/c++/9/bits/ptr_traits.h **** 
 140:/usr/include/c++/9/bits/ptr_traits.h ****       /**
 141:/usr/include/c++/9/bits/ptr_traits.h ****        *  @brief  Obtain a pointer to an object
 142:/usr/include/c++/9/bits/ptr_traits.h ****        *  @param  __r  A reference to an object of type @c element_type
 143:/usr/include/c++/9/bits/ptr_traits.h ****        *  @return @c addressof(__r)
 144:/usr/include/c++/9/bits/ptr_traits.h ****       */
 145:/usr/include/c++/9/bits/ptr_traits.h ****       static _GLIBCXX20_CONSTEXPR pointer
 146:/usr/include/c++/9/bits/ptr_traits.h ****       pointer_to(__make_not_void<element_type>& __r) noexcept
 147:/usr/include/c++/9/bits/ptr_traits.h ****       { return std::addressof(__r); }
 148:/usr/include/c++/9/bits/ptr_traits.h ****     };
 149:/usr/include/c++/9/bits/ptr_traits.h **** 
 150:/usr/include/c++/9/bits/ptr_traits.h ****   /// Convenience alias for rebinding pointers.
 151:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Ptr, typename _Tp>
 152:/usr/include/c++/9/bits/ptr_traits.h ****     using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
 153:/usr/include/c++/9/bits/ptr_traits.h **** 
 154:/usr/include/c++/9/bits/ptr_traits.h ****   template<typename _Tp>
 155:/usr/include/c++/9/bits/ptr_traits.h ****     constexpr _Tp*
 156:/usr/include/c++/9/bits/ptr_traits.h ****     __to_address(_Tp* __ptr) noexcept
 3839              		.loc 13 156 5
 3840              		.cfi_startproc
 3841 0000 F30F1EFA 		endbr64	
 3842 0004 55       		pushq	%rbp	#
 3843              		.cfi_def_cfa_offset 16
 3844              		.cfi_offset 6, -16
 3845 0005 4889E5   		movq	%rsp, %rbp	#,
 3846              		.cfi_def_cfa_register 6
 3847 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __ptr, __ptr
 3848              	# /usr/include/c++/9/bits/ptr_traits.h:159:       return __ptr;
 157:/usr/include/c++/9/bits/ptr_traits.h ****     {
 158:/usr/include/c++/9/bits/ptr_traits.h ****       static_assert(!std::is_function<_Tp>::value, "not a function pointer");
 159:/usr/include/c++/9/bits/ptr_traits.h ****       return __ptr;
 3849              		.loc 13 159 14
 3850 000c 488B45F8 		movq	-8(%rbp), %rax	# __ptr, _2
 3851              	# /usr/include/c++/9/bits/ptr_traits.h:160:     }
 160:/usr/include/c++/9/bits/ptr_traits.h ****     }
 3852              		.loc 13 160 5
 3853 0010 5D       		popq	%rbp	#
 3854              		.cfi_def_cfa 7, 8
 3855 0011 C3       		ret	
 3856              		.cfi_endproc
 3857              	.LFE3077:
 3859              		.section	.text._ZN9__gnu_cxx13new_allocatorI7ComplexEC2ERKS2_,"axG",@progbits,_ZN9__gnu_cxx13new_a
 3860              		.align 2
 3861              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2ERKS2_
 3863              	_ZN9__gnu_cxx13new_allocatorI7ComplexEC2ERKS2_:
 3864              	.LFB3079:
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3865              		.loc 10 83 7
 3866              		.cfi_startproc
 3867 0000 F30F1EFA 		endbr64	
 3868 0004 55       		pushq	%rbp	#
 3869              		.cfi_def_cfa_offset 16
 3870              		.cfi_offset 6, -16
 3871 0005 4889E5   		movq	%rsp, %rbp	#,
 3872              		.cfi_def_cfa_register 6
 3873 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3874 000c 488975F0 		movq	%rsi, -16(%rbp)	# D.51257, D.51257
 3875              	# /usr/include/c++/9/ext/new_allocator.h:83:       new_allocator(const new_allocator&) _GLIBCXX_USE
  83:/usr/include/c++/9/ext/new_allocator.h **** 
 3876              		.loc 10 83 67
 3877 0010 90       		nop	
 3878 0011 5D       		popq	%rbp	#
 3879              		.cfi_def_cfa 7, 8
 3880 0012 C3       		ret	
 3881              		.cfi_endproc
 3882              	.LFE3079:
 3884              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexEC1ERKS2_
 3885              		.set	_ZN9__gnu_cxx13new_allocatorI7ComplexEC1ERKS2_,_ZN9__gnu_cxx13new_allocatorI7ComplexEC2ERKS2_
 3886              		.section	.text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev,"axG",@progbits,_ZNSt16_
 3887              		.align 2
 3888              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev
 3890              	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev:
 3891              	.LFB3082:
 117:/usr/include/c++/9/bits/shared_ptr_base.h ****       : _M_use_count(1), _M_weak_count(1) { }
 3892              		.loc 5 117 7
 3893              		.cfi_startproc
 3894 0000 F30F1EFA 		endbr64	
 3895 0004 55       		pushq	%rbp	#
 3896              		.cfi_def_cfa_offset 16
 3897              		.cfi_offset 6, -16
 3898 0005 4889E5   		movq	%rsp, %rbp	#,
 3899              		.cfi_def_cfa_register 6
 3900 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3901              	.LBB42:
 3902              	# /usr/include/c++/9/bits/shared_ptr_base.h:118:       : _M_use_count(1), _M_weak_count(1) { }
 118:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3903              		.loc 5 118 41
 3904 000c 488D1500 		leaq	16+_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE(%rip), %rdx	#, _1
 3904      000000
 3905 0013 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 3906 0017 488910   		movq	%rdx, (%rax)	# _1, this_3(D)->_vptr._Sp_counted_base
 3907 001a 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 3908 001e C7400801 		movl	$1, 8(%rax)	#, this_3(D)->_M_use_count
 3908      000000
 3909 0025 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 3910 0029 C7400C01 		movl	$1, 12(%rax)	#, this_3(D)->_M_weak_count
 3910      000000
 3911              	.LBE42:
 3912              	# /usr/include/c++/9/bits/shared_ptr_base.h:118:       : _M_use_count(1), _M_weak_count(1) { }
 118:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3913              		.loc 5 118 45
 3914 0030 90       		nop	
 3915 0031 5D       		popq	%rbp	#
 3916              		.cfi_def_cfa 7, 8
 3917 0032 C3       		ret	
 3918              		.cfi_endproc
 3919              	.LFE3082:
 3921              		.weak	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev
 3922              		.set	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev,_ZNSt16_Sp_counted_baseILN9__gnu_c
 3923              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC
 3924              		.align 2
 3925              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC2ES1_
 3927              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC2ES1_:
 3928              	.LFB3085:
 531:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3929              		.loc 5 531 11
 3930              		.cfi_startproc
 3931 0000 F30F1EFA 		endbr64	
 3932 0004 55       		pushq	%rbp	#
 3933              		.cfi_def_cfa_offset 16
 3934              		.cfi_offset 6, -16
 3935 0005 4889E5   		movq	%rsp, %rbp	#,
 3936              		.cfi_def_cfa_register 6
 3937 0008 4883EC10 		subq	$16, %rsp	#,
 3938 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 3939 0010 488975F0 		movq	%rsi, -16(%rbp)	# __a, __a
 3940              	.LBB43:
 3941              	# /usr/include/c++/9/bits/shared_ptr_base.h:531: 	explicit _Impl(_Alloc __a) noexcept : _A_base(__a
 531:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3942              		.loc 5 531 51
 3943 0014 488B55F0 		movq	-16(%rbp), %rdx	# __a, tmp82
 3944 0018 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 3945 001c 4889D6   		movq	%rdx, %rsi	# tmp82,
 3946 001f 4889C7   		movq	%rax, %rdi	# tmp83,
 3947 0022 E8000000 		call	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC2ERKS1_	#
 3947      00
 3948              	.LBE43:
 3949              	# /usr/include/c++/9/bits/shared_ptr_base.h:531: 	explicit _Impl(_Alloc __a) noexcept : _A_base(__a
 531:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 3950              		.loc 5 531 55
 3951 0027 90       		nop	
 3952 0028 C9       		leave	
 3953              		.cfi_def_cfa 7, 8
 3954 0029 C3       		ret	
 3955              		.cfi_endproc
 3956              	.LFE3085:
 3958              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ES1_
 3959              		.set	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ES1_,_ZNS
 3960              		.section	.text._ZNSt16allocator_traitsISaI7ComplexEE9constructIS0_JddEEEvRS1_PT_DpOT0_,"axG",@prog
 3961              		.weak	_ZNSt16allocator_traitsISaI7ComplexEE9constructIS0_JddEEEvRS1_PT_DpOT0_
 3963              	_ZNSt16allocator_traitsISaI7ComplexEE9constructIS0_JddEEEvRS1_PT_DpOT0_:
 3964              	.LFB3087:
 470:/usr/include/c++/9/bits/alloc_traits.h **** 
 471:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 472:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 473:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 474:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 475:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 476:/usr/include/c++/9/bits/alloc_traits.h ****        *
 477:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 478:/usr/include/c++/9/bits/alloc_traits.h ****       */
 479:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 480:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 481:/usr/include/c++/9/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 3965              		.loc 12 481 2
 3966              		.cfi_startproc
 3967 0000 F30F1EFA 		endbr64	
 3968 0004 55       		pushq	%rbp	#
 3969              		.cfi_def_cfa_offset 16
 3970              		.cfi_offset 6, -16
 3971 0005 4889E5   		movq	%rsp, %rbp	#,
 3972              		.cfi_def_cfa_register 6
 3973 0008 53       		pushq	%rbx	#
 3974 0009 4883EC28 		subq	$40, %rsp	#,
 3975              		.cfi_offset 3, -24
 3976 000d 48897DE8 		movq	%rdi, -24(%rbp)	# __a, __a
 3977 0011 488975E0 		movq	%rsi, -32(%rbp)	# __p, __p
 3978 0015 488955D8 		movq	%rdx, -40(%rbp)	# __args#0, __args#0
 3979 0019 48894DD0 		movq	%rcx, -48(%rbp)	# __args#1, __args#1
 3980              	# /usr/include/c++/9/bits/alloc_traits.h:483: 	{ __a.construct(__p, std::forward<_Args>(__args)...)
 482:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 483:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 3981              		.loc 12 483 4
 3982 001d 488B45D0 		movq	-48(%rbp), %rax	# __args#1, tmp84
 3983 0021 4889C7   		movq	%rax, %rdi	# tmp84,
 3984 0024 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3984      00
 3985 0029 4889C3   		movq	%rax, %rbx	#, _1
 3986 002c 488B45D8 		movq	-40(%rbp), %rax	# __args#0, tmp85
 3987 0030 4889C7   		movq	%rax, %rdi	# tmp85,
 3988 0033 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 3988      00
 3989 0038 4889C2   		movq	%rax, %rdx	#, _2
 3990 003b 488B75E0 		movq	-32(%rbp), %rsi	# __p, tmp86
 3991 003f 488B45E8 		movq	-24(%rbp), %rax	# __a, tmp87
 3992 0043 4889D9   		movq	%rbx, %rcx	# _1,
 3993 0046 4889C7   		movq	%rax, %rdi	# tmp87,
 3994 0049 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI7ComplexE9constructIS1_JddEEEvPT_DpOT0_	#
 3994      00
 3995              	# /usr/include/c++/9/bits/alloc_traits.h:483: 	{ __a.construct(__p, std::forward<_Args>(__args)...)
 3996              		.loc 12 483 56
 3997 004e 90       		nop	
 3998 004f 4883C428 		addq	$40, %rsp	#,
 3999 0053 5B       		popq	%rbx	#
 4000 0054 5D       		popq	%rbp	#
 4001              		.cfi_def_cfa 7, 8
 4002 0055 C3       		ret	
 4003              		.cfi_endproc
 4004              	.LFE3087:
 4006              		.section	.text._ZN9__gnu_cxx16__aligned_bufferI7ComplexE6_M_ptrEv,"axG",@progbits,_ZN9__gnu_cxx16_
 4007              		.align 2
 4008              		.weak	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE6_M_ptrEv
 4010              	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE6_M_ptrEv:
 4011              	.LFB3088:
 4012              		.file 14 "/usr/include/c++/9/ext/aligned_buffer.h"
   1:/usr/include/c++/9/ext/aligned_buffer.h **** // Aligned memory buffer -*- C++ -*-
   2:/usr/include/c++/9/ext/aligned_buffer.h **** 
   3:/usr/include/c++/9/ext/aligned_buffer.h **** // Copyright (C) 2013-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/ext/aligned_buffer.h **** //
   5:/usr/include/c++/9/ext/aligned_buffer.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/ext/aligned_buffer.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/ext/aligned_buffer.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/ext/aligned_buffer.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/ext/aligned_buffer.h **** // any later version.
  10:/usr/include/c++/9/ext/aligned_buffer.h **** 
  11:/usr/include/c++/9/ext/aligned_buffer.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/ext/aligned_buffer.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/ext/aligned_buffer.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/ext/aligned_buffer.h **** // GNU General Public License for more details.
  15:/usr/include/c++/9/ext/aligned_buffer.h **** 
  16:/usr/include/c++/9/ext/aligned_buffer.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/ext/aligned_buffer.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/ext/aligned_buffer.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/ext/aligned_buffer.h **** 
  20:/usr/include/c++/9/ext/aligned_buffer.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/ext/aligned_buffer.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/ext/aligned_buffer.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/ext/aligned_buffer.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/ext/aligned_buffer.h **** 
  25:/usr/include/c++/9/ext/aligned_buffer.h **** /** @file ext/aligned_buffer.h
  26:/usr/include/c++/9/ext/aligned_buffer.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/9/ext/aligned_buffer.h ****  */
  28:/usr/include/c++/9/ext/aligned_buffer.h **** 
  29:/usr/include/c++/9/ext/aligned_buffer.h **** #ifndef _ALIGNED_BUFFER_H
  30:/usr/include/c++/9/ext/aligned_buffer.h **** #define _ALIGNED_BUFFER_H 1
  31:/usr/include/c++/9/ext/aligned_buffer.h **** 
  32:/usr/include/c++/9/ext/aligned_buffer.h **** #pragma GCC system_header
  33:/usr/include/c++/9/ext/aligned_buffer.h **** 
  34:/usr/include/c++/9/ext/aligned_buffer.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/9/ext/aligned_buffer.h **** # include <type_traits>
  36:/usr/include/c++/9/ext/aligned_buffer.h **** #else
  37:/usr/include/c++/9/ext/aligned_buffer.h **** # include <bits/c++0x_warning.h>
  38:/usr/include/c++/9/ext/aligned_buffer.h **** #endif
  39:/usr/include/c++/9/ext/aligned_buffer.h **** 
  40:/usr/include/c++/9/ext/aligned_buffer.h **** namespace __gnu_cxx
  41:/usr/include/c++/9/ext/aligned_buffer.h **** {
  42:/usr/include/c++/9/ext/aligned_buffer.h ****   // A utility type containing a POD object that can hold an object of type
  43:/usr/include/c++/9/ext/aligned_buffer.h ****   // _Tp initialized via placement new or allocator_traits::construct.
  44:/usr/include/c++/9/ext/aligned_buffer.h ****   // Intended for use as a data member subobject, use __aligned_buffer for
  45:/usr/include/c++/9/ext/aligned_buffer.h ****   // complete objects.
  46:/usr/include/c++/9/ext/aligned_buffer.h ****   template<typename _Tp>
  47:/usr/include/c++/9/ext/aligned_buffer.h ****     struct __aligned_membuf
  48:/usr/include/c++/9/ext/aligned_buffer.h ****     {
  49:/usr/include/c++/9/ext/aligned_buffer.h ****       // Target macro ADJUST_FIELD_ALIGN can produce different alignment for
  50:/usr/include/c++/9/ext/aligned_buffer.h ****       // types when used as class members. __aligned_membuf is intended
  51:/usr/include/c++/9/ext/aligned_buffer.h ****       // for use as a class member, so align the buffer as for a class member.
  52:/usr/include/c++/9/ext/aligned_buffer.h ****       // Since GCC 8 we could just use alignof(_Tp) instead, but older
  53:/usr/include/c++/9/ext/aligned_buffer.h ****       // versions of non-GNU compilers might still need this trick.
  54:/usr/include/c++/9/ext/aligned_buffer.h ****       struct _Tp2 { _Tp _M_t; };
  55:/usr/include/c++/9/ext/aligned_buffer.h **** 
  56:/usr/include/c++/9/ext/aligned_buffer.h ****       alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
  57:/usr/include/c++/9/ext/aligned_buffer.h **** 
  58:/usr/include/c++/9/ext/aligned_buffer.h ****       __aligned_membuf() = default;
  59:/usr/include/c++/9/ext/aligned_buffer.h **** 
  60:/usr/include/c++/9/ext/aligned_buffer.h ****       // Can be used to avoid value-initialization zeroing _M_storage.
  61:/usr/include/c++/9/ext/aligned_buffer.h ****       __aligned_membuf(std::nullptr_t) { }
  62:/usr/include/c++/9/ext/aligned_buffer.h **** 
  63:/usr/include/c++/9/ext/aligned_buffer.h ****       void*
  64:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_addr() noexcept
  65:/usr/include/c++/9/ext/aligned_buffer.h ****       { return static_cast<void*>(&_M_storage); }
  66:/usr/include/c++/9/ext/aligned_buffer.h **** 
  67:/usr/include/c++/9/ext/aligned_buffer.h ****       const void*
  68:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_addr() const noexcept
  69:/usr/include/c++/9/ext/aligned_buffer.h ****       { return static_cast<const void*>(&_M_storage); }
  70:/usr/include/c++/9/ext/aligned_buffer.h **** 
  71:/usr/include/c++/9/ext/aligned_buffer.h ****       _Tp*
  72:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_ptr() noexcept
  73:/usr/include/c++/9/ext/aligned_buffer.h ****       { return static_cast<_Tp*>(_M_addr()); }
  74:/usr/include/c++/9/ext/aligned_buffer.h **** 
  75:/usr/include/c++/9/ext/aligned_buffer.h ****       const _Tp*
  76:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_ptr() const noexcept
  77:/usr/include/c++/9/ext/aligned_buffer.h ****       { return static_cast<const _Tp*>(_M_addr()); }
  78:/usr/include/c++/9/ext/aligned_buffer.h ****     };
  79:/usr/include/c++/9/ext/aligned_buffer.h **** 
  80:/usr/include/c++/9/ext/aligned_buffer.h **** #if _GLIBCXX_INLINE_VERSION
  81:/usr/include/c++/9/ext/aligned_buffer.h ****   template<typename _Tp>
  82:/usr/include/c++/9/ext/aligned_buffer.h ****     using __aligned_buffer = __aligned_membuf<_Tp>;
  83:/usr/include/c++/9/ext/aligned_buffer.h **** #else
  84:/usr/include/c++/9/ext/aligned_buffer.h ****   // Similar to __aligned_membuf but aligned for complete objects, not members.
  85:/usr/include/c++/9/ext/aligned_buffer.h ****   // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>
  86:/usr/include/c++/9/ext/aligned_buffer.h ****   // and <bits/hashtable_policy.h>, but ideally they would use __aligned_membuf
  87:/usr/include/c++/9/ext/aligned_buffer.h ****   // instead, as it has smaller size for some types on some targets.
  88:/usr/include/c++/9/ext/aligned_buffer.h ****   // This type is still used to avoid an ABI change.
  89:/usr/include/c++/9/ext/aligned_buffer.h ****   template<typename _Tp>
  90:/usr/include/c++/9/ext/aligned_buffer.h ****     struct __aligned_buffer
  91:/usr/include/c++/9/ext/aligned_buffer.h ****     : std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>
  92:/usr/include/c++/9/ext/aligned_buffer.h ****     {
  93:/usr/include/c++/9/ext/aligned_buffer.h ****       typename
  94:/usr/include/c++/9/ext/aligned_buffer.h **** 	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
  95:/usr/include/c++/9/ext/aligned_buffer.h **** 
  96:/usr/include/c++/9/ext/aligned_buffer.h ****       __aligned_buffer() = default;
  97:/usr/include/c++/9/ext/aligned_buffer.h **** 
  98:/usr/include/c++/9/ext/aligned_buffer.h ****       // Can be used to avoid value-initialization
  99:/usr/include/c++/9/ext/aligned_buffer.h ****       __aligned_buffer(std::nullptr_t) { }
 100:/usr/include/c++/9/ext/aligned_buffer.h **** 
 101:/usr/include/c++/9/ext/aligned_buffer.h ****       void*
 102:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_addr() noexcept
 103:/usr/include/c++/9/ext/aligned_buffer.h ****       {
 104:/usr/include/c++/9/ext/aligned_buffer.h ****         return static_cast<void*>(&_M_storage);
 105:/usr/include/c++/9/ext/aligned_buffer.h ****       }
 106:/usr/include/c++/9/ext/aligned_buffer.h **** 
 107:/usr/include/c++/9/ext/aligned_buffer.h ****       const void*
 108:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_addr() const noexcept
 109:/usr/include/c++/9/ext/aligned_buffer.h ****       {
 110:/usr/include/c++/9/ext/aligned_buffer.h ****         return static_cast<const void*>(&_M_storage);
 111:/usr/include/c++/9/ext/aligned_buffer.h ****       }
 112:/usr/include/c++/9/ext/aligned_buffer.h **** 
 113:/usr/include/c++/9/ext/aligned_buffer.h ****       _Tp*
 114:/usr/include/c++/9/ext/aligned_buffer.h ****       _M_ptr() noexcept
 4013              		.loc 14 114 7
 4014              		.cfi_startproc
 4015 0000 F30F1EFA 		endbr64	
 4016 0004 55       		pushq	%rbp	#
 4017              		.cfi_def_cfa_offset 16
 4018              		.cfi_offset 6, -16
 4019 0005 4889E5   		movq	%rsp, %rbp	#,
 4020              		.cfi_def_cfa_register 6
 4021 0008 4883EC10 		subq	$16, %rsp	#,
 4022 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4023              	# /usr/include/c++/9/ext/aligned_buffer.h:115:       { return static_cast<_Tp*>(_M_addr()); }
 115:/usr/include/c++/9/ext/aligned_buffer.h ****       { return static_cast<_Tp*>(_M_addr()); }
 4024              		.loc 14 115 16
 4025 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 4026 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 4027 0017 E8000000 		call	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE7_M_addrEv	#
 4027      00
 4028              	# /usr/include/c++/9/ext/aligned_buffer.h:115:       { return static_cast<_Tp*>(_M_addr()); }
 4029              		.loc 14 115 46
 4030 001c C9       		leave	
 4031              		.cfi_def_cfa 7, 8
 4032 001d C3       		ret	
 4033              		.cfi_endproc
 4034              	.LFE3088:
 4036              		.section	.text._ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock
 4037              		.align 2
 4038              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 4040              	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2EEE8all
 4041              	.LFB3091:
  90:/usr/include/c++/9/ext/new_allocator.h **** 
  91:/usr/include/c++/9/ext/new_allocator.h ****       pointer
  92:/usr/include/c++/9/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/c++/9/ext/new_allocator.h **** 
  95:/usr/include/c++/9/ext/new_allocator.h ****       const_pointer
  96:/usr/include/c++/9/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/c++/9/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/c++/9/ext/new_allocator.h **** 
  99:/usr/include/c++/9/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/usr/include/c++/9/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/usr/include/c++/9/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/usr/include/c++/9/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 4042              		.loc 10 102 7
 4043              		.cfi_startproc
 4044 0000 F30F1EFA 		endbr64	
 4045 0004 55       		pushq	%rbp	#
 4046              		.cfi_def_cfa_offset 16
 4047              		.cfi_offset 6, -16
 4048 0005 4889E5   		movq	%rsp, %rbp	#,
 4049              		.cfi_def_cfa_register 6
 4050 0008 4883EC20 		subq	$32, %rsp	#,
 4051 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4052 0010 488975F0 		movq	%rsi, -16(%rbp)	# __n, __n
 4053 0014 488955E8 		movq	%rdx, -24(%rbp)	# D.53593, D.53593
 4054              	# /usr/include/c++/9/ext/new_allocator.h:104: 	if (__n > this->max_size())
 103:/usr/include/c++/9/ext/new_allocator.h ****       {
 104:/usr/include/c++/9/ext/new_allocator.h **** 	if (__n > this->max_size())
 4055              		.loc 10 104 10
 4056 0018 488B45F8 		movq	-8(%rbp), %rax	# this, tmp87
 4057 001c 4889C7   		movq	%rax, %rdi	# tmp87,
 4058 001f E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 4058      00
 4059 0024 483945F0 		cmpq	%rax, -16(%rbp)	# _1, __n
 4060 0028 0F97C0   		seta	%al	#, retval.0_7
 4061              	# /usr/include/c++/9/ext/new_allocator.h:104: 	if (__n > this->max_size())
 4062              		.loc 10 104 2
 4063 002b 84C0     		testb	%al, %al	# retval.0_7
 4064 002d 7405     		je	.L169	#,
 4065              	# /usr/include/c++/9/ext/new_allocator.h:105: 	  std::__throw_bad_alloc();
 105:/usr/include/c++/9/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 4066              		.loc 10 105 26
 4067 002f E8000000 		call	_ZSt17__throw_bad_allocv@PLT	#
 4067      00
 4068              	.L169:
 4069              	# /usr/include/c++/9/ext/new_allocator.h:114: 	return static_cast<_Tp*>(::operator new(__n * sizeof
 106:/usr/include/c++/9/ext/new_allocator.h **** 
 107:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 110:/usr/include/c++/9/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/usr/include/c++/9/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 113:/usr/include/c++/9/ext/new_allocator.h **** #endif
 114:/usr/include/c++/9/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 4070              		.loc 10 114 41
 4071 0034 488B55F0 		movq	-16(%rbp), %rdx	# __n, tmp88
 4072 0038 4889D0   		movq	%rdx, %rax	# tmp88, tmp89
 4073 003b 48C1E002 		salq	$2, %rax	#, tmp89
 4074 003f 4801D0   		addq	%rdx, %rax	# tmp88, tmp89
 4075 0042 48C1E003 		salq	$3, %rax	#, tmp90
 4076 0046 4889C7   		movq	%rax, %rdi	# _2,
 4077 0049 E8000000 		call	_Znwm@PLT	#
 4077      00
 4078              	# /usr/include/c++/9/ext/new_allocator.h:115:       }
 115:/usr/include/c++/9/ext/new_allocator.h ****       }
 4079              		.loc 10 115 7
 4080 004e C9       		leave	
 4081              		.cfi_def_cfa 7, 8
 4082 004f C3       		ret	
 4083              		.cfi_endproc
 4084              	.LFE3091:
 4086              		.section	.text._ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock
 4087              		.weak	_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2
 4089              	_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_policyE2EEEEPT_
 4090              	.LFB3092:
  47:/usr/include/c++/9/bits/move.h ****     { return __builtin_addressof(__r); }
 4091              		.loc 9 47 5
 4092              		.cfi_startproc
 4093 0000 F30F1EFA 		endbr64	
 4094 0004 55       		pushq	%rbp	#
 4095              		.cfi_def_cfa_offset 16
 4096              		.cfi_offset 6, -16
 4097 0005 4889E5   		movq	%rsp, %rbp	#,
 4098              		.cfi_def_cfa_register 6
 4099 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __r, __r
 4100              	# /usr/include/c++/9/bits/move.h:48:     { return __builtin_addressof(__r); }
  48:/usr/include/c++/9/bits/move.h **** 
 4101              		.loc 9 48 37
 4102 000c 488B45F8 		movq	-8(%rbp), %rax	# __r, _2
 4103              	# /usr/include/c++/9/bits/move.h:48:     { return __builtin_addressof(__r); }
  48:/usr/include/c++/9/bits/move.h **** 
 4104              		.loc 9 48 40
 4105 0010 5D       		popq	%rbp	#
 4106              		.cfi_def_cfa 7, 8
 4107 0011 C3       		ret	
 4108              		.cfi_endproc
 4109              	.LFE3092:
 4111              		.section	.text._ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock
 4112              		.align 2
 4113              		.weak	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2
 4115              	_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2EEE10de
 4116              	.LFB3093:
 116:/usr/include/c++/9/ext/new_allocator.h **** 
 117:/usr/include/c++/9/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/usr/include/c++/9/ext/new_allocator.h ****       void
 119:/usr/include/c++/9/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 4117              		.loc 10 119 7
 4118              		.cfi_startproc
 4119 0000 F30F1EFA 		endbr64	
 4120 0004 55       		pushq	%rbp	#
 4121              		.cfi_def_cfa_offset 16
 4122              		.cfi_offset 6, -16
 4123 0005 4889E5   		movq	%rsp, %rbp	#,
 4124              		.cfi_def_cfa_register 6
 4125 0008 4883EC20 		subq	$32, %rsp	#,
 4126 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4127 0010 488975F0 		movq	%rsi, -16(%rbp)	# __p, __p
 4128 0014 488955E8 		movq	%rdx, -24(%rbp)	# D.53597, D.53597
 4129              	# /usr/include/c++/9/ext/new_allocator.h:128: 	::operator delete(__p);
 120:/usr/include/c++/9/ext/new_allocator.h ****       {
 121:/usr/include/c++/9/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/usr/include/c++/9/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/usr/include/c++/9/ext/new_allocator.h **** 	  {
 124:/usr/include/c++/9/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/usr/include/c++/9/ext/new_allocator.h **** 	    return;
 126:/usr/include/c++/9/ext/new_allocator.h **** 	  }
 127:/usr/include/c++/9/ext/new_allocator.h **** #endif
 128:/usr/include/c++/9/ext/new_allocator.h **** 	::operator delete(__p);
 4130              		.loc 10 128 19
 4131 0018 488B45F0 		movq	-16(%rbp), %rax	# __p, tmp82
 4132 001c 4889C7   		movq	%rax, %rdi	# tmp82,
 4133 001f E8000000 		call	_ZdlPv@PLT	#
 4133      00
 4134              	# /usr/include/c++/9/ext/new_allocator.h:129:       }
 129:/usr/include/c++/9/ext/new_allocator.h ****       }
 4135              		.loc 10 129 7
 4136 0024 90       		nop	
 4137 0025 C9       		leave	
 4138              		.cfi_def_cfa 7, 8
 4139 0026 C3       		ret	
 4140              		.cfi_endproc
 4141              	.LFE3093:
 4143              		.section	.text._ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC2ERKS1_,"axG",@progbits,_ZNSt14_Sp_ebo_
 4144              		.align 2
 4145              		.weak	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC2ERKS1_
 4147              	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC2ERKS1_:
 4148              	.LFB3095:
 414:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 4149              		.loc 5 414 16
 4150              		.cfi_startproc
 4151 0000 F30F1EFA 		endbr64	
 4152 0004 55       		pushq	%rbp	#
 4153              		.cfi_def_cfa_offset 16
 4154              		.cfi_offset 6, -16
 4155 0005 4889E5   		movq	%rsp, %rbp	#,
 4156              		.cfi_def_cfa_register 6
 4157 0008 4883EC10 		subq	$16, %rsp	#,
 4158 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4159 0010 488975F0 		movq	%rsi, -16(%rbp)	# __tp, __tp
 4160              	.LBB44:
 4161              	# /usr/include/c++/9/bits/shared_ptr_base.h:414:       explicit _Sp_ebo_helper(const _Tp& __tp) : _
 414:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 4162              		.loc 5 414 58
 4163 0014 488B55F0 		movq	-16(%rbp), %rdx	# __tp, tmp82
 4164 0018 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 4165 001c 4889D6   		movq	%rdx, %rsi	# tmp82,
 4166 001f 4889C7   		movq	%rax, %rdi	# tmp83,
 4167 0022 E8000000 		call	_ZNSaI7ComplexEC2ERKS0_	#
 4167      00
 4168              	.LBE44:
 4169              	# /usr/include/c++/9/bits/shared_ptr_base.h:414:       explicit _Sp_ebo_helper(const _Tp& __tp) : _
 414:/usr/include/c++/9/bits/shared_ptr_base.h ****       explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 4170              		.loc 5 414 62
 4171 0027 90       		nop	
 4172 0028 C9       		leave	
 4173              		.cfi_def_cfa 7, 8
 4174 0029 C3       		ret	
 4175              		.cfi_endproc
 4176              	.LFE3095:
 4178              		.weak	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC1ERKS1_
 4179              		.set	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EEC1ERKS1_,_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1
 4180              		.section	.text._ZN9__gnu_cxx13new_allocatorI7ComplexE9constructIS1_JddEEEvPT_DpOT0_,"axG",@progbit
 4181              		.align 2
 4182              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexE9constructIS1_JddEEEvPT_DpOT0_
 4184              	_ZN9__gnu_cxx13new_allocatorI7ComplexE9constructIS1_JddEEEvPT_DpOT0_:
 4185              	.LFB3097:
 130:/usr/include/c++/9/ext/new_allocator.h **** 
 131:/usr/include/c++/9/ext/new_allocator.h ****       size_type
 132:/usr/include/c++/9/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 133:/usr/include/c++/9/ext/new_allocator.h ****       {
 134:/usr/include/c++/9/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 135:/usr/include/c++/9/ext/new_allocator.h **** 	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 136:/usr/include/c++/9/ext/new_allocator.h **** #else
 137:/usr/include/c++/9/ext/new_allocator.h **** 	return size_t(-1) / sizeof(_Tp);
 138:/usr/include/c++/9/ext/new_allocator.h **** #endif
 139:/usr/include/c++/9/ext/new_allocator.h ****       }
 140:/usr/include/c++/9/ext/new_allocator.h **** 
 141:/usr/include/c++/9/ext/new_allocator.h **** #if __cplusplus >= 201103L
 142:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 143:/usr/include/c++/9/ext/new_allocator.h **** 	void
 144:/usr/include/c++/9/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 4186              		.loc 10 144 2
 4187              		.cfi_startproc
 4188 0000 F30F1EFA 		endbr64	
 4189 0004 55       		pushq	%rbp	#
 4190              		.cfi_def_cfa_offset 16
 4191              		.cfi_offset 6, -16
 4192 0005 4889E5   		movq	%rsp, %rbp	#,
 4193              		.cfi_def_cfa_register 6
 4194 0008 53       		pushq	%rbx	#
 4195 0009 4883EC38 		subq	$56, %rsp	#,
 4196              		.cfi_offset 3, -24
 4197 000d 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 4198 0011 488975E0 		movq	%rsi, -32(%rbp)	# __p, __p
 4199 0015 488955D8 		movq	%rdx, -40(%rbp)	# __args#0, __args#0
 4200 0019 48894DD0 		movq	%rcx, -48(%rbp)	# __args#1, __args#1
 4201              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 145:/usr/include/c++/9/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 146:/usr/include/c++/9/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 4202              		.loc 10 146 46
 4203 001d 488B45D8 		movq	-40(%rbp), %rax	# __args#0, tmp88
 4204 0021 4889C7   		movq	%rax, %rdi	# tmp88,
 4205 0024 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 4205      00
 4206              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4207              		.loc 10 146 4
 4208 0029 488B18   		movq	(%rax), %rbx	# *_1, _6
 4209              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4210              		.loc 10 146 46
 4211 002c 488B45D0 		movq	-48(%rbp), %rax	# __args#1, tmp89
 4212 0030 4889C7   		movq	%rax, %rdi	# tmp89,
 4213 0033 E8000000 		call	_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE	#
 4213      00
 4214              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4215              		.loc 10 146 4
 4216 0038 F20F1010 		movsd	(%rax), %xmm2	# *_2, _9
 4217 003c F20F1155 		movsd	%xmm2, -56(%rbp)	# _9, %sfp
 4217      C8
 4218              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4219              		.loc 10 146 18
 4220 0041 488B45E0 		movq	-32(%rbp), %rax	# __p, _11
 4221              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4222              		.loc 10 146 4
 4223 0045 4889C6   		movq	%rax, %rsi	# _11,
 4224 0048 BF180000 		movl	$24, %edi	#,
 4224      00
 4225 004d E8000000 		call	_ZnwmPv	#
 4225      00
 4226 0052 F20F104D 		movsd	-56(%rbp), %xmm1	# %sfp,
 4226      C8
 4227 0057 66480F6E 		movq	%rbx, %xmm0	# _6,
 4227      C3
 4228 005c 4889C7   		movq	%rax, %rdi	# _13,
 4229 005f E8000000 		call	_ZN7ComplexC1Edd	#
 4229      00
 4230              	# /usr/include/c++/9/ext/new_allocator.h:146: 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)
 4231              		.loc 10 146 60
 4232 0064 90       		nop	
 4233 0065 4883C438 		addq	$56, %rsp	#,
 4234 0069 5B       		popq	%rbx	#
 4235 006a 5D       		popq	%rbp	#
 4236              		.cfi_def_cfa 7, 8
 4237 006b C3       		ret	
 4238              		.cfi_endproc
 4239              	.LFE3097:
 4241              		.section	.text._ZN9__gnu_cxx16__aligned_bufferI7ComplexE7_M_addrEv,"axG",@progbits,_ZN9__gnu_cxx16
 4242              		.align 2
 4243              		.weak	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE7_M_addrEv
 4245              	_ZN9__gnu_cxx16__aligned_bufferI7ComplexE7_M_addrEv:
 4246              	.LFB3098:
 102:/usr/include/c++/9/ext/aligned_buffer.h ****       {
 4247              		.loc 14 102 7
 4248              		.cfi_startproc
 4249 0000 F30F1EFA 		endbr64	
 4250 0004 55       		pushq	%rbp	#
 4251              		.cfi_def_cfa_offset 16
 4252              		.cfi_offset 6, -16
 4253 0005 4889E5   		movq	%rsp, %rbp	#,
 4254              		.cfi_def_cfa_register 6
 4255 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4256              	# /usr/include/c++/9/ext/aligned_buffer.h:104:         return static_cast<void*>(&_M_storage);
 104:/usr/include/c++/9/ext/aligned_buffer.h ****       }
 4257              		.loc 14 104 46
 4258 000c 488B45F8 		movq	-8(%rbp), %rax	# this, _2
 4259              	# /usr/include/c++/9/ext/aligned_buffer.h:105:       }
 105:/usr/include/c++/9/ext/aligned_buffer.h **** 
 4260              		.loc 14 105 7
 4261 0010 5D       		popq	%rbp	#
 4262              		.cfi_def_cfa 7, 8
 4263 0011 C3       		ret	
 4264              		.cfi_endproc
 4265              	.LFE3098:
 4267              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Loc
 4268              		.align 2
 4269              		.weak	_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE
 4271              	_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceI7ComplexSaIS2_ELNS_12_Lock_policyE2EEE8ma
 4272              	.LFB3099:
 132:/usr/include/c++/9/ext/new_allocator.h ****       {
 4273              		.loc 10 132 7
 4274              		.cfi_startproc
 4275 0000 F30F1EFA 		endbr64	
 4276 0004 55       		pushq	%rbp	#
 4277              		.cfi_def_cfa_offset 16
 4278              		.cfi_offset 6, -16
 4279 0005 4889E5   		movq	%rsp, %rbp	#,
 4280              		.cfi_def_cfa_register 6
 4281 0008 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4282              	# /usr/include/c++/9/ext/new_allocator.h:135: 	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 135:/usr/include/c++/9/ext/new_allocator.h **** #else
 4283              		.loc 10 135 45
 4284 000c 48B83333 		movabsq	$230584300921369395, %rax	#, _1
 4284      33333333 
 4284      3303
 4285              	# /usr/include/c++/9/ext/new_allocator.h:139:       }
 139:/usr/include/c++/9/ext/new_allocator.h **** 
 4286              		.loc 10 139 7
 4287 0016 5D       		popq	%rbp	#
 4288              		.cfi_def_cfa 7, 8
 4289 0017 C3       		ret	
 4290              		.cfi_endproc
 4291              	.LFE3099:
 4293              		.weak	_ZTVSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE
 4294              		.section	.data.rel.ro.local._ZTVSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_pol
 4295              		.align 8
 4298              	_ZTVSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE:
 4299 0000 00000000 		.quad	0
 4299      00000000 
 4300 0008 00000000 		.quad	_ZTISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE
 4300      00000000 
 4301 0010 00000000 		.quad	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev
 4301      00000000 
 4302 0018 00000000 		.quad	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev
 4302      00000000 
 4303 0020 00000000 		.quad	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
 4303      00000000 
 4304 0028 00000000 		.quad	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
 4304      00000000 
 4305 0030 00000000 		.quad	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleter
 4305      00000000 
 4306              		.weak	_ZTV7Complex
 4307              		.section	.data.rel.ro.local._ZTV7Complex,"awG",@progbits,_ZTV7Complex,comdat
 4308              		.align 8
 4311              	_ZTV7Complex:
 4312 0000 00000000 		.quad	0
 4312      00000000 
 4313 0008 00000000 		.quad	_ZTI7Complex
 4313      00000000 
 4314 0010 00000000 		.quad	_ZN7ComplexD1Ev
 4314      00000000 
 4315 0018 00000000 		.quad	_ZN7ComplexD0Ev
 4315      00000000 
 4316 0020 00000000 		.quad	_ZN7Complex5printEv
 4316      00000000 
 4317 0028 00000000 		.quad	_ZN7Complex3addE7VisitorSt10shared_ptrI4CoreE
 4317      00000000 
 4318 0030 00000000 		.quad	_ZN7Complex4_addES_
 4318      00000000 
 4319              		.weak	_ZTV4Core
 4320              		.section	.data.rel.ro._ZTV4Core,"awG",@progbits,_ZTV4Core,comdat
 4321              		.align 8
 4324              	_ZTV4Core:
 4325 0000 00000000 		.quad	0
 4325      00000000 
 4326 0008 00000000 		.quad	_ZTI4Core
 4326      00000000 
 4327 0010 00000000 		.quad	0
 4327      00000000 
 4328 0018 00000000 		.quad	0
 4328      00000000 
 4329 0020 00000000 		.quad	__cxa_pure_virtual
 4329      00000000 
 4330 0028 00000000 		.quad	__cxa_pure_virtual
 4330      00000000 
 4331 0030 00000000 		.quad	__cxa_pure_virtual
 4331      00000000 
 4332              		.weak	_ZTV7Visitor
 4333              		.section	.data.rel.ro.local._ZTV7Visitor,"awG",@progbits,_ZTV7Visitor,comdat
 4334              		.align 8
 4337              	_ZTV7Visitor:
 4338 0000 00000000 		.quad	0
 4338      00000000 
 4339 0008 00000000 		.quad	_ZTI7Visitor
 4339      00000000 
 4340 0010 00000000 		.quad	_ZN7VisitorD1Ev
 4340      00000000 
 4341 0018 00000000 		.quad	_ZN7VisitorD0Ev
 4341      00000000 
 4342              		.weak	_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4343              		.section	.data.rel.ro._ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"awG",@progbits,_ZTV
 4344              		.align 8
 4347              	_ZTVSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE:
 4348 0000 00000000 		.quad	0
 4348      00000000 
 4349 0008 00000000 		.quad	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4349      00000000 
 4350 0010 00000000 		.quad	0
 4350      00000000 
 4351 0018 00000000 		.quad	0
 4351      00000000 
 4352 0020 00000000 		.quad	__cxa_pure_virtual
 4352      00000000 
 4353 0028 00000000 		.quad	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
 4353      00000000 
 4354 0030 00000000 		.quad	__cxa_pure_virtual
 4354      00000000 
 4355              		.weak	_ZTISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE
 4356              		.section	.data.rel.ro._ZTISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2E
 4357              		.align 8
 4360              	_ZTISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE:
 4361              	# <anonymous>:
 4362              	# <anonymous>:
 4363 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4363      00000000 
 4364              	# <anonymous>:
 4365 0008 00000000 		.quad	_ZTSSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE
 4365      00000000 
 4366              	# <anonymous>:
 4367 0010 00000000 		.quad	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4367      00000000 
 4368              		.weak	_ZTSSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE
 4369              		.section	.rodata._ZTSSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE,"aG
 4370              		.align 32
 4373              	_ZTSSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE:
 4374 0000 53743233 		.string	"St23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE"
 4374      5F53705F 
 4374      636F756E 
 4374      7465645F 
 4374      7074725F 
 4375              		.weak	_ZTI7Complex
 4376              		.section	.data.rel.ro._ZTI7Complex,"awG",@progbits,_ZTI7Complex,comdat
 4377              		.align 8
 4380              	_ZTI7Complex:
 4381              	# <anonymous>:
 4382              	# <anonymous>:
 4383 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4383      00000000 
 4384              	# <anonymous>:
 4385 0008 00000000 		.quad	_ZTS7Complex
 4385      00000000 
 4386              	# <anonymous>:
 4387 0010 00000000 		.quad	_ZTI4Core
 4387      00000000 
 4388              		.weak	_ZTS7Complex
 4389              		.section	.rodata._ZTS7Complex,"aG",@progbits,_ZTS7Complex,comdat
 4390              		.align 8
 4393              	_ZTS7Complex:
 4394 0000 37436F6D 		.string	"7Complex"
 4394      706C6578 
 4394      00
 4395              		.weak	_ZTI4Core
 4396              		.section	.data.rel.ro._ZTI4Core,"awG",@progbits,_ZTI4Core,comdat
 4397              		.align 8
 4400              	_ZTI4Core:
 4401              	# <anonymous>:
 4402              	# <anonymous>:
 4403 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 4403      00000000 
 4404              	# <anonymous>:
 4405 0008 00000000 		.quad	_ZTS4Core
 4405      00000000 
 4406              		.weak	_ZTS4Core
 4407              		.section	.rodata._ZTS4Core,"aG",@progbits,_ZTS4Core,comdat
 4410              	_ZTS4Core:
 4411 0000 34436F72 		.string	"4Core"
 4411      6500
 4412              		.weak	_ZTI7Visitor
 4413              		.section	.data.rel.ro._ZTI7Visitor,"awG",@progbits,_ZTI7Visitor,comdat
 4414              		.align 8
 4417              	_ZTI7Visitor:
 4418              	# <anonymous>:
 4419              	# <anonymous>:
 4420 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 4420      00000000 
 4421              	# <anonymous>:
 4422 0008 00000000 		.quad	_ZTS7Visitor
 4422      00000000 
 4423              		.weak	_ZTS7Visitor
 4424              		.section	.rodata._ZTS7Visitor,"aG",@progbits,_ZTS7Visitor,comdat
 4425              		.align 8
 4428              	_ZTS7Visitor:
 4429 0000 37566973 		.string	"7Visitor"
 4429      69746F72 
 4429      00
 4430              		.weak	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4431              		.section	.data.rel.ro._ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"awG",@progbits,_ZTI
 4432              		.align 8
 4435              	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE:
 4436              	# <anonymous>:
 4437              	# <anonymous>:
 4438 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4438      00000000 
 4439              	# <anonymous>:
 4440 0008 00000000 		.quad	_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4440      00000000 
 4441              	# <anonymous>:
 4442 0010 00000000 		.quad	_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
 4442      00000000 
 4443              		.weak	_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 4444              		.section	.rodata._ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,_ZTSSt16_S
 4445              		.align 32
 4448              	_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE:
 4449 0000 53743136 		.string	"St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE"
 4449      5F53705F 
 4449      636F756E 
 4449      7465645F 
 4449      62617365 
 4450              		.text
 4452              	_Z41__static_initialization_and_destruction_0ii:
 4453              	.LFB3116:
 4454              		.loc 6 75 1
 4455              		.cfi_startproc
 4456 0233 F30F1EFA 		endbr64	
 4457 0237 55       		pushq	%rbp	#
 4458              		.cfi_def_cfa_offset 16
 4459              		.cfi_offset 6, -16
 4460 0238 4889E5   		movq	%rsp, %rbp	#,
 4461              		.cfi_def_cfa_register 6
 4462 023b 4883EC10 		subq	$16, %rsp	#,
 4463 023f 897DFC   		movl	%edi, -4(%rbp)	# __initialize_p, __initialize_p
 4464 0242 8975F8   		movl	%esi, -8(%rbp)	# __priority, __priority
 4465              	# test.cpp:75: }
 4466              		.loc 6 75 1
 4467 0245 837DFC01 		cmpl	$1, -4(%rbp)	#, __initialize_p
 4468 0249 7532     		jne	.L182	#,
 4469              	# test.cpp:75: }
 4470              		.loc 6 75 1 is_stmt 0 discriminator 1
 4471 024b 817DF8FF 		cmpl	$65535, -8(%rbp)	#, __priority
 4471      FF0000
 4472 0252 7529     		jne	.L182	#,
 4473              	# /usr/include/c++/9/iostream:74:   static ios_base::Init __ioinit;
 4474              		.file 15 "/usr/include/c++/9/iostream"
   1:/usr/include/c++/9/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/9/iostream **** 
   3:/usr/include/c++/9/iostream **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/usr/include/c++/9/iostream **** //
   5:/usr/include/c++/9/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/9/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/9/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/9/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/9/iostream **** // any later version.
  10:/usr/include/c++/9/iostream **** 
  11:/usr/include/c++/9/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/9/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/9/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/9/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/9/iostream **** 
  16:/usr/include/c++/9/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/9/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/9/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/9/iostream **** 
  20:/usr/include/c++/9/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/9/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/9/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/9/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/9/iostream **** 
  25:/usr/include/c++/9/iostream **** /** @file include/iostream
  26:/usr/include/c++/9/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/9/iostream ****  */
  28:/usr/include/c++/9/iostream **** 
  29:/usr/include/c++/9/iostream **** //
  30:/usr/include/c++/9/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/9/iostream **** //
  32:/usr/include/c++/9/iostream **** 
  33:/usr/include/c++/9/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/9/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/9/iostream **** 
  36:/usr/include/c++/9/iostream **** #pragma GCC system_header
  37:/usr/include/c++/9/iostream **** 
  38:/usr/include/c++/9/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/9/iostream **** #include <ostream>
  40:/usr/include/c++/9/iostream **** #include <istream>
  41:/usr/include/c++/9/iostream **** 
  42:/usr/include/c++/9/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/9/iostream **** {
  44:/usr/include/c++/9/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/9/iostream **** 
  46:/usr/include/c++/9/iostream ****   /**
  47:/usr/include/c++/9/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/9/iostream ****    *
  49:/usr/include/c++/9/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/9/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/9/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/9/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/9/iostream ****    *
  54:/usr/include/c++/9/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/9/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/9/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/9/iostream ****    *  manual linked to above.
  58:/usr/include/c++/9/iostream ****   */
  59:/usr/include/c++/9/iostream ****   ///@{
  60:/usr/include/c++/9/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/9/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/9/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/9/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/9/iostream **** 
  65:/usr/include/c++/9/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/9/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/9/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/9/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/9/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/9/iostream **** #endif
  71:/usr/include/c++/9/iostream ****   ///@}
  72:/usr/include/c++/9/iostream **** 
  73:/usr/include/c++/9/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/9/iostream ****   static ios_base::Init __ioinit;
 4475              		.loc 15 74 25 is_stmt 1
 4476 0254 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi	#,
 4476      000000
 4477 025b E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT	#
 4477      00
 4478 0260 488D1500 		leaq	__dso_handle(%rip), %rdx	#,
 4478      000000
 4479 0267 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi	#,
 4479      000000
 4480 026e 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax	#, tmp82
 4480      000000
 4481 0275 4889C7   		movq	%rax, %rdi	# tmp82,
 4482 0278 E8000000 		call	__cxa_atexit@PLT	#
 4482      00
 4483              	.L182:
 4484              	# test.cpp:75: }
 4485              		.loc 6 75 1
 4486 027d 90       		nop	
 4487 027e C9       		leave	
 4488              		.cfi_def_cfa 7, 8
 4489 027f C3       		ret	
 4490              		.cfi_endproc
 4491              	.LFE3116:
 4493              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev,"a
 4494              		.align 2
 4495              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev
 4497              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED2Ev:
 4498              	.LFB3118:
 552:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4499              		.loc 5 552 7
 4500              		.cfi_startproc
 4501 0000 F30F1EFA 		endbr64	
 4502 0004 55       		pushq	%rbp	#
 4503              		.cfi_def_cfa_offset 16
 4504              		.cfi_offset 6, -16
 4505 0005 4889E5   		movq	%rsp, %rbp	#,
 4506              		.cfi_def_cfa_register 6
 4507 0008 4883EC10 		subq	$16, %rsp	#,
 4508 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4509              	.LBB45:
 4510              	# /usr/include/c++/9/bits/shared_ptr_base.h:552:       ~_Sp_counted_ptr_inplace() noexcept { }
 552:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4511              		.loc 5 552 45
 4512 0010 488D1500 		leaq	16+_ZTVSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE(%rip), %rdx	
 4512      000000
 4513 0017 488B45F8 		movq	-8(%rbp), %rax	# this, tmp85
 4514 001b 488910   		movq	%rdx, (%rax)	# _1, this_5(D)->D.53547._vptr._Sp_counted_base
 4515 001e 488B45F8 		movq	-8(%rbp), %rax	# this, tmp86
 4516 0022 4883C010 		addq	$16, %rax	#, _2
 4517 0026 4889C7   		movq	%rax, %rdi	# _2,
 4518 0029 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev	#
 4518      00
 4519 002e 488B45F8 		movq	-8(%rbp), %rax	# this, _3
 4520 0032 4889C7   		movq	%rax, %rdi	# _3,
 4521 0035 E8000000 		call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev	#
 4521      00
 4522              	.LBE45:
 4523 003a 90       		nop	
 4524 003b C9       		leave	
 4525              		.cfi_def_cfa 7, 8
 4526 003c C3       		ret	
 4527              		.cfi_endproc
 4528              	.LFE3118:
 4530              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev
 4531              		.set	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev,_ZNSt23_Sp_c
 4532              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev,"a
 4533              		.align 2
 4534              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev
 4536              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED0Ev:
 4537              	.LFB3120:
 552:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4538              		.loc 5 552 7
 4539              		.cfi_startproc
 4540 0000 F30F1EFA 		endbr64	
 4541 0004 55       		pushq	%rbp	#
 4542              		.cfi_def_cfa_offset 16
 4543              		.cfi_offset 6, -16
 4544 0005 4889E5   		movq	%rsp, %rbp	#,
 4545              		.cfi_def_cfa_register 6
 4546 0008 4883EC10 		subq	$16, %rsp	#,
 4547 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4548              	# /usr/include/c++/9/bits/shared_ptr_base.h:552:       ~_Sp_counted_ptr_inplace() noexcept { }
 552:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4549              		.loc 5 552 45
 4550 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp82
 4551 0014 4889C7   		movq	%rax, %rdi	# tmp82,
 4552 0017 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	#
 4552      00
 4553 001c 488B45F8 		movq	-8(%rbp), %rax	# this, tmp83
 4554 0020 BE280000 		movl	$40, %esi	#,
 4554      00
 4555 0025 4889C7   		movq	%rax, %rdi	# tmp83,
 4556 0028 E8000000 		call	_ZdlPvm@PLT	#
 4556      00
 4557 002d C9       		leave	
 4558              		.cfi_def_cfa 7, 8
 4559 002e C3       		ret	
 4560              		.cfi_endproc
 4561              	.LFE3120:
 4563              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_di
 4564              		.align 2
 4565              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
 4567              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv:
 4568              	.LFB3121:
 555:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 4569              		.loc 5 555 7
 4570              		.cfi_startproc
 4571 0000 F30F1EFA 		endbr64	
 4572 0004 55       		pushq	%rbp	#
 4573              		.cfi_def_cfa_offset 16
 4574              		.cfi_offset 6, -16
 4575 0005 4889E5   		movq	%rsp, %rbp	#,
 4576              		.cfi_def_cfa_register 6
 4577 0008 53       		pushq	%rbx	#
 4578 0009 4883EC18 		subq	$24, %rsp	#,
 4579              		.cfi_offset 3, -24
 4580 000d 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 4581              	# /usr/include/c++/9/bits/shared_ptr_base.h:557: 	allocator_traits<_Alloc>::destroy(_M_impl._M_allo
 557:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 4582              		.loc 5 557 35
 4583 0011 488B45E8 		movq	-24(%rbp), %rax	# this, tmp85
 4584 0015 4889C7   		movq	%rax, %rdi	# tmp85,
 4585 0018 E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv	#
 4585      00
 4586 001d 4889C3   		movq	%rax, %rbx	#, _1
 4587 0020 488B45E8 		movq	-24(%rbp), %rax	# this, tmp86
 4588 0024 4883C010 		addq	$16, %rax	#, _2
 4589 0028 4889C7   		movq	%rax, %rdi	# _2,
 4590 002b E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_Impl8_M_allocEv
 4590      00
 4591 0030 4889DE   		movq	%rbx, %rsi	# _1,
 4592 0033 4889C7   		movq	%rax, %rdi	# _3,
 4593 0036 E8000000 		call	_ZNSt16allocator_traitsISaI7ComplexEE7destroyIS0_EEvRS1_PT_	#
 4593      00
 4594              	# /usr/include/c++/9/bits/shared_ptr_base.h:558:       }
 558:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4595              		.loc 5 558 7
 4596 003b 90       		nop	
 4597 003c 4883C418 		addq	$24, %rsp	#,
 4598 0040 5B       		popq	%rbx	#
 4599 0041 5D       		popq	%rbp	#
 4600              		.cfi_def_cfa 7, 8
 4601 0042 C3       		ret	
 4602              		.cfi_endproc
 4603              	.LFE3121:
 4605              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_de
 4606              		.align 2
 4607              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
 4609              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
 4610              	.LFB3122:
 562:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 4611              		.loc 5 562 7
 4612              		.cfi_startproc
 4613 0000 F30F1EFA 		endbr64	
 4614 0004 55       		pushq	%rbp	#
 4615              		.cfi_def_cfa_offset 16
 4616              		.cfi_offset 6, -16
 4617 0005 4889E5   		movq	%rsp, %rbp	#,
 4618              		.cfi_def_cfa_register 6
 4619 0008 4883EC40 		subq	$64, %rsp	#,
 4620 000c 48897DC8 		movq	%rdi, -56(%rbp)	# this, this
 4621              	# /usr/include/c++/9/bits/shared_ptr_base.h:562:       _M_destroy() noexcept
 562:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 4622              		.loc 5 562 7
 4623 0010 64488B04 		movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp92
 4623      25280000 
 4623      00
 4624 0019 488945F8 		movq	%rax, -8(%rbp)	# tmp92, D.54905
 4625 001d 31C0     		xorl	%eax, %eax	# tmp92
 4626              	# /usr/include/c++/9/bits/shared_ptr_base.h:564: 	__allocator_type __a(_M_impl._M_alloc());
 564:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 4627              		.loc 5 564 19
 4628 001f 488B45C8 		movq	-56(%rbp), %rax	# this, tmp84
 4629 0023 4883C010 		addq	$16, %rax	#, _1
 4630 0027 4889C7   		movq	%rax, %rdi	# _1,
 4631 002a E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_Impl8_M_allocEv
 4631      00
 4632 002f 4889C2   		movq	%rax, %rdx	#, _2
 4633 0032 488D45DF 		leaq	-33(%rbp), %rax	#, tmp85
 4634 0036 4889D6   		movq	%rdx, %rsi	# _2,
 4635 0039 4889C7   		movq	%rax, %rdi	# tmp85,
 4636 003c E8000000 		call	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEEC1IS0_EERKSaI
 4636      00
 4637              	# /usr/include/c++/9/bits/shared_ptr_base.h:565: 	__allocated_ptr<__allocator_type> __guard_ptr{ __
 565:/usr/include/c++/9/bits/shared_ptr_base.h **** 	this->~_Sp_counted_ptr_inplace();
 4638              		.loc 5 565 36
 4639 0041 488B55C8 		movq	-56(%rbp), %rdx	# this, tmp86
 4640 0045 488D4DDF 		leaq	-33(%rbp), %rcx	#, tmp87
 4641 0049 488D45E0 		leaq	-32(%rbp), %rax	#, tmp88
 4642 004d 4889CE   		movq	%rcx, %rsi	# tmp87,
 4643 0050 4889C7   		movq	%rax, %rdi	# tmp88,
 4644 0053 E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 4644      00
 4645              	# /usr/include/c++/9/bits/shared_ptr_base.h:566: 	this->~_Sp_counted_ptr_inplace();
 566:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 4646              		.loc 5 566 2
 4647 0058 488B45C8 		movq	-56(%rbp), %rax	# this, tmp89
 4648 005c 4889C7   		movq	%rax, %rdi	# tmp89,
 4649 005f E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EED1Ev	#
 4649      00
 4650              	# /usr/include/c++/9/bits/shared_ptr_base.h:565: 	__allocated_ptr<__allocator_type> __guard_ptr{ __
 565:/usr/include/c++/9/bits/shared_ptr_base.h **** 	this->~_Sp_counted_ptr_inplace();
 4651              		.loc 5 565 36
 4652 0064 488D45E0 		leaq	-32(%rbp), %rax	#, tmp90
 4653 0068 4889C7   		movq	%rax, %rdi	# tmp90,
 4654 006b E8000000 		call	_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS1_ELN9__gnu_cxx12_Lock_poli
 4654      00
 4655              	# /usr/include/c++/9/bits/shared_ptr_base.h:564: 	__allocator_type __a(_M_impl._M_alloc());
 564:/usr/include/c++/9/bits/shared_ptr_base.h **** 	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 4656              		.loc 5 564 19
 4657 0070 488D45DF 		leaq	-33(%rbp), %rax	#, tmp91
 4658 0074 4889C7   		movq	%rax, %rdi	# tmp91,
 4659 0077 E8000000 		call	_ZNSaISt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev	#
 4659      00
 4660              	# /usr/include/c++/9/bits/shared_ptr_base.h:567:       }
 567:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4661              		.loc 5 567 7
 4662 007c 90       		nop	
 4663 007d 488B45F8 		movq	-8(%rbp), %rax	# D.54905, tmp93
 4664 0081 64483304 		xorq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp93
 4664      25280000 
 4664      00
 4665 008a 7405     		je	.L187	#,
 4666 008c E8000000 		call	__stack_chk_fail@PLT	#
 4666      00
 4667              	.L187:
 4668 0091 C9       		leave	
 4669              		.cfi_def_cfa 7, 8
 4670 0092 C3       		ret	
 4671              		.cfi_endproc
 4672              	.LFE3122:
 4674              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_ge
 4675              		.align 2
 4676              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleter
 4678              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9t
 4679              	.LFB3123:
 575:/usr/include/c++/9/bits/shared_ptr_base.h ****       {
 4680              		.loc 5 575 7
 4681              		.cfi_startproc
 4682 0000 F30F1EFA 		endbr64	
 4683 0004 55       		pushq	%rbp	#
 4684              		.cfi_def_cfa_offset 16
 4685              		.cfi_offset 6, -16
 4686 0005 4889E5   		movq	%rsp, %rbp	#,
 4687              		.cfi_def_cfa_register 6
 4688 0008 4883EC20 		subq	$32, %rsp	#,
 4689 000c 48897DE8 		movq	%rdi, -24(%rbp)	# this, this
 4690 0010 488975E0 		movq	%rsi, -32(%rbp)	# __ti, __ti
 4691              	# /usr/include/c++/9/bits/shared_ptr_base.h:577: 	auto __ptr = const_cast<typename remove_cv<_Tp>::
 577:/usr/include/c++/9/bits/shared_ptr_base.h **** 	// Check for the fake type_info first, so we don't try to access it
 4692              		.loc 5 577 15
 4693 0014 488B45E8 		movq	-24(%rbp), %rax	# this, tmp87
 4694 0018 4889C7   		movq	%rax, %rdi	# tmp87,
 4695 001b E8000000 		call	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE6_M_ptrEv	#
 4695      00
 4696 0020 488945F8 		movq	%rax, -8(%rbp)	# tmp88, __ptr
 4697              	# /usr/include/c++/9/bits/shared_ptr_base.h:582: 	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 582:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    ||
 4698              		.loc 5 582 43
 4699 0024 E8000000 		call	_ZNSt19_Sp_make_shared_tag5_S_tiEv	#
 4699      00
 4700              	# /usr/include/c++/9/bits/shared_ptr_base.h:583: 	    ||
 583:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 4701              		.loc 5 583 6
 4702 0029 483945E0 		cmpq	%rax, -32(%rbp)	# _1, __ti
 4703 002d 7417     		je	.L189	#,
 4704              	# /usr/include/c++/9/bits/shared_ptr_base.h:585: 	    __ti == typeid(_Sp_make_shared_tag)
 585:/usr/include/c++/9/bits/shared_ptr_base.h **** #else
 4705              		.loc 5 585 11 discriminator 2
 4706 002f 488B45E0 		movq	-32(%rbp), %rax	# __ti, tmp89
 4707 0033 488D3500 		leaq	_ZTISt19_Sp_make_shared_tag(%rip), %rsi	#,
 4707      000000
 4708 003a 4889C7   		movq	%rax, %rdi	# tmp89,
 4709 003d E8000000 		call	_ZNKSt9type_infoeqERKS_	#
 4709      00
 4710              	# /usr/include/c++/9/bits/shared_ptr_base.h:583: 	    ||
 583:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 4711              		.loc 5 583 6 discriminator 2
 4712 0042 84C0     		testb	%al, %al	# _2
 4713 0044 7407     		je	.L190	#,
 4714              	.L189:
 4715              	# /usr/include/c++/9/bits/shared_ptr_base.h:583: 	    ||
 583:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 4716              		.loc 5 583 6 is_stmt 0 discriminator 3
 4717 0046 B8010000 		movl	$1, %eax	#, iftmp.2_3
 4717      00
 4718 004b EB05     		jmp	.L191	#
 4719              	.L190:
 4720              	# /usr/include/c++/9/bits/shared_ptr_base.h:583: 	    ||
 583:/usr/include/c++/9/bits/shared_ptr_base.h **** #if __cpp_rtti
 4721              		.loc 5 583 6 discriminator 4
 4722 004d B8000000 		movl	$0, %eax	#, iftmp.2_3
 4722      00
 4723              	.L191:
 4724              	# /usr/include/c++/9/bits/shared_ptr_base.h:582: 	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 582:/usr/include/c++/9/bits/shared_ptr_base.h **** 	    ||
 4725              		.loc 5 582 2 is_stmt 1 discriminator 6
 4726 0052 84C0     		testb	%al, %al	# iftmp.2_3
 4727 0054 7406     		je	.L192	#,
 4728              	# /usr/include/c++/9/bits/shared_ptr_base.h:590: 	  return __ptr;
 590:/usr/include/c++/9/bits/shared_ptr_base.h **** 	return nullptr;
 4729              		.loc 5 590 11
 4730 0056 488B45F8 		movq	-8(%rbp), %rax	# __ptr, _4
 4731 005a EB05     		jmp	.L193	#
 4732              	.L192:
 4733              	# /usr/include/c++/9/bits/shared_ptr_base.h:591: 	return nullptr;
 591:/usr/include/c++/9/bits/shared_ptr_base.h ****       }
 4734              		.loc 5 591 9
 4735 005c B8000000 		movl	$0, %eax	#, _4
 4735      00
 4736              	.L193:
 4737              	# /usr/include/c++/9/bits/shared_ptr_base.h:592:       }
 592:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4738              		.loc 5 592 7
 4739 0061 C9       		leave	
 4740              		.cfi_def_cfa 7, 8
 4741 0062 C3       		ret	
 4742              		.cfi_endproc
 4743              	.LFE3123:
 4745              		.section	.text._ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_Impl8
 4746              		.align 2
 4747              		.weak	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_Impl8_M_allocE
 4749              	_ZNSt23_Sp_counted_ptr_inplaceI7ComplexSaIS0_ELN9__gnu_cxx12_Lock_policyE2EE5_Impl8_M_allocEv:
 4750              	.LFB3124:
 533:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4751              		.loc 5 533 10
 4752              		.cfi_startproc
 4753 0000 F30F1EFA 		endbr64	
 4754 0004 55       		pushq	%rbp	#
 4755              		.cfi_def_cfa_offset 16
 4756              		.cfi_offset 6, -16
 4757 0005 4889E5   		movq	%rsp, %rbp	#,
 4758              		.cfi_def_cfa_register 6
 4759 0008 4883EC10 		subq	$16, %rsp	#,
 4760 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4761              	# /usr/include/c++/9/bits/shared_ptr_base.h:533: 	_Alloc& _M_alloc() noexcept { return _A_base::_S_
 533:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4762              		.loc 5 533 54
 4763 0010 488B45F8 		movq	-8(%rbp), %rax	# this, tmp84
 4764 0014 4889C7   		movq	%rax, %rdi	# tmp84,
 4765 0017 E8000000 		call	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EE6_S_getERS2_	#
 4765      00
 4766              	# /usr/include/c++/9/bits/shared_ptr_base.h:533: 	_Alloc& _M_alloc() noexcept { return _A_base::_S_
 533:/usr/include/c++/9/bits/shared_ptr_base.h **** 
 4767              		.loc 5 533 63
 4768 001c C9       		leave	
 4769              		.cfi_def_cfa 7, 8
 4770 001d C3       		ret	
 4771              		.cfi_endproc
 4772              	.LFE3124:
 4774              		.section	.text._ZNSt16allocator_traitsISaI7ComplexEE7destroyIS0_EEvRS1_PT_,"axG",@progbits,_ZNSt16
 4775              		.weak	_ZNSt16allocator_traitsISaI7ComplexEE7destroyIS0_EEvRS1_PT_
 4777              	_ZNSt16allocator_traitsISaI7ComplexEE7destroyIS0_EEvRS1_PT_:
 4778              	.LFB3125:
 484:/usr/include/c++/9/bits/alloc_traits.h **** 
 485:/usr/include/c++/9/bits/alloc_traits.h ****       /**
 486:/usr/include/c++/9/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 487:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 488:/usr/include/c++/9/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 489:/usr/include/c++/9/bits/alloc_traits.h ****        *
 490:/usr/include/c++/9/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 491:/usr/include/c++/9/bits/alloc_traits.h ****       */
 492:/usr/include/c++/9/bits/alloc_traits.h ****       template<typename _Up>
 493:/usr/include/c++/9/bits/alloc_traits.h **** 	static void
 494:/usr/include/c++/9/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 4779              		.loc 12 494 2
 4780              		.cfi_startproc
 4781 0000 F30F1EFA 		endbr64	
 4782 0004 55       		pushq	%rbp	#
 4783              		.cfi_def_cfa_offset 16
 4784              		.cfi_offset 6, -16
 4785 0005 4889E5   		movq	%rsp, %rbp	#,
 4786              		.cfi_def_cfa_register 6
 4787 0008 4883EC10 		subq	$16, %rsp	#,
 4788 000c 48897DF8 		movq	%rdi, -8(%rbp)	# __a, __a
 4789 0010 488975F0 		movq	%rsi, -16(%rbp)	# __p, __p
 4790              	# /usr/include/c++/9/bits/alloc_traits.h:496: 	{ __a.destroy(__p); }
 495:/usr/include/c++/9/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 496:/usr/include/c++/9/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 4791              		.loc 12 496 4
 4792 0014 488B55F0 		movq	-16(%rbp), %rdx	# __p, tmp82
 4793 0018 488B45F8 		movq	-8(%rbp), %rax	# __a, tmp83
 4794 001c 4889D6   		movq	%rdx, %rsi	# tmp82,
 4795 001f 4889C7   		movq	%rax, %rdi	# tmp83,
 4796 0022 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI7ComplexE7destroyIS1_EEvPT_	#
 4796      00
 4797              	# /usr/include/c++/9/bits/alloc_traits.h:496: 	{ __a.destroy(__p); }
 4798              		.loc 12 496 22
 4799 0027 90       		nop	
 4800 0028 C9       		leave	
 4801              		.cfi_def_cfa 7, 8
 4802 0029 C3       		ret	
 4803              		.cfi_endproc
 4804              	.LFE3125:
 4806              		.section	.text._ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EE6_S_getERS2_,"axG",@progbits,_ZNSt14_Sp_
 4807              		.weak	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EE6_S_getERS2_
 4809              	_ZNSt14_Sp_ebo_helperILi0ESaI7ComplexELb1EE6_S_getERS2_:
 4810              	.LFB3126:
 418:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 4811              		.loc 5 418 7
 4812              		.cfi_startproc
 4813 0000 F30F1EFA 		endbr64	
 4814 0004 55       		pushq	%rbp	#
 4815              		.cfi_def_cfa_offset 16
 4816              		.cfi_offset 6, -16
 4817 0005 4889E5   		movq	%rsp, %rbp	#,
 4818              		.cfi_def_cfa_register 6
 4819 0008 48897DF8 		movq	%rdi, -8(%rbp)	# __eboh, __eboh
 4820              	# /usr/include/c++/9/bits/shared_ptr_base.h:418:       _S_get(_Sp_ebo_helper& __eboh) { return stat
 418:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 4821              		.loc 5 418 71
 4822 000c 488B45F8 		movq	-8(%rbp), %rax	# __eboh, _2
 4823              	# /usr/include/c++/9/bits/shared_ptr_base.h:418:       _S_get(_Sp_ebo_helper& __eboh) { return stat
 418:/usr/include/c++/9/bits/shared_ptr_base.h ****     };
 4824              		.loc 5 418 74
 4825 0010 5D       		popq	%rbp	#
 4826              		.cfi_def_cfa 7, 8
 4827 0011 C3       		ret	
 4828              		.cfi_endproc
 4829              	.LFE3126:
 4831              		.section	.text._ZN9__gnu_cxx13new_allocatorI7ComplexE7destroyIS1_EEvPT_,"axG",@progbits,_ZN9__gnu_
 4832              		.align 2
 4833              		.weak	_ZN9__gnu_cxx13new_allocatorI7ComplexE7destroyIS1_EEvPT_
 4835              	_ZN9__gnu_cxx13new_allocatorI7ComplexE7destroyIS1_EEvPT_:
 4836              	.LFB3127:
 147:/usr/include/c++/9/ext/new_allocator.h **** 
 148:/usr/include/c++/9/ext/new_allocator.h ****       template<typename _Up>
 149:/usr/include/c++/9/ext/new_allocator.h **** 	void
 150:/usr/include/c++/9/ext/new_allocator.h **** 	destroy(_Up* __p)
 4837              		.loc 10 150 2
 4838              		.cfi_startproc
 4839 0000 F30F1EFA 		endbr64	
 4840 0004 55       		pushq	%rbp	#
 4841              		.cfi_def_cfa_offset 16
 4842              		.cfi_offset 6, -16
 4843 0005 4889E5   		movq	%rsp, %rbp	#,
 4844              		.cfi_def_cfa_register 6
 4845 0008 4883EC10 		subq	$16, %rsp	#,
 4846 000c 48897DF8 		movq	%rdi, -8(%rbp)	# this, this
 4847 0010 488975F0 		movq	%rsi, -16(%rbp)	# __p, __p
 4848              	# /usr/include/c++/9/ext/new_allocator.h:152: 	{ __p->~_Up(); }
 151:/usr/include/c++/9/ext/new_allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 152:/usr/include/c++/9/ext/new_allocator.h **** 	{ __p->~_Up(); }
 4849              		.loc 10 152 4
 4850 0014 488B45F0 		movq	-16(%rbp), %rax	# __p, tmp84
 4851 0018 488B00   		movq	(%rax), %rax	# __p_4(D)->D.46476._vptr.Core, _1
 4852 001b 488B10   		movq	(%rax), %rdx	# *_1, _2
 4853 001e 488B45F0 		movq	-16(%rbp), %rax	# __p, tmp85
 4854 0022 4889C7   		movq	%rax, %rdi	# tmp85,
 4855 0025 FFD2     		call	*%rdx	# _2
 4856              	.LVL8:
 4857              	# /usr/include/c++/9/ext/new_allocator.h:152: 	{ __p->~_Up(); }
 4858              		.loc 10 152 17
 4859 0027 90       		nop	
 4860 0028 C9       		leave	
 4861              		.cfi_def_cfa 7, 8
 4862 0029 C3       		ret	
 4863              		.cfi_endproc
 4864              	.LFE3127:
 4866              		.weak	_ZTISt19_Sp_make_shared_tag
 4867              		.section	.data.rel.ro._ZTISt19_Sp_make_shared_tag,"awG",@progbits,_ZTISt19_Sp_make_shared_tag,comd
 4868              		.align 8
 4871              	_ZTISt19_Sp_make_shared_tag:
 4872              	# <anonymous>:
 4873              	# <anonymous>:
 4874 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 4874      00000000 
 4875              	# <anonymous>:
 4876 0008 00000000 		.quad	_ZTSSt19_Sp_make_shared_tag
 4876      00000000 
 4877              		.weak	_ZTSSt19_Sp_make_shared_tag
 4878              		.section	.rodata._ZTSSt19_Sp_make_shared_tag,"aG",@progbits,_ZTSSt19_Sp_make_shared_tag,comdat
 4879              		.align 16
 4882              	_ZTSSt19_Sp_make_shared_tag:
 4883 0000 53743139 		.string	"St19_Sp_make_shared_tag"
 4883      5F53705F 
 4883      6D616B65 
 4883      5F736861 
 4883      7265645F 
 4884              		.weak	_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
 4885              		.section	.data.rel.ro._ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"awG",@progbits,_ZTISt11_
 4886              		.align 8
 4889              	_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE:
 4890              	# <anonymous>:
 4891              	# <anonymous>:
 4892 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 4892      00000000 
 4893              	# <anonymous>:
 4894 0008 00000000 		.quad	_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
 4894      00000000 
 4895              		.weak	_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
 4896              		.section	.rodata._ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"aG",@progbits,_ZTSSt11_Mutex_
 4897              		.align 32
 4900              	_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE:
 4901 0000 53743131 		.string	"St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE"
 4901      5F4D7574 
 4901      65785F62 
 4901      61736549 
 4901      4C4E395F 
 4902              		.text
 4904              	_GLOBAL__sub_I_main:
 4905              	.LFB3128:
 4906              		.loc 6 75 1
 4907              		.cfi_startproc
 4908 0280 F30F1EFA 		endbr64	
 4909 0284 55       		pushq	%rbp	#
 4910              		.cfi_def_cfa_offset 16
 4911              		.cfi_offset 6, -16
 4912 0285 4889E5   		movq	%rsp, %rbp	#,
 4913              		.cfi_def_cfa_register 6
 4914              	# test.cpp:75: }
 4915              		.loc 6 75 1
 4916 0288 BEFFFF00 		movl	$65535, %esi	#,
 4916      00
 4917 028d BF010000 		movl	$1, %edi	#,
 4917      00
 4918 0292 E89CFFFF 		call	_Z41__static_initialization_and_destruction_0ii	#
 4918      FF
 4919 0297 5D       		popq	%rbp	#
 4920              		.cfi_def_cfa 7, 8
 4921 0298 C3       		ret	
 4922              		.cfi_endproc
 4923              	.LFE3128:
 4925              		.section	.init_array,"aw"
 4926              		.align 8
 4927 0000 00000000 		.quad	_GLOBAL__sub_I_main
 4927      00000000 
 4928              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 4929              		.section	.rodata
 4930 0011 00000000 		.align 8
 4930      000000
 4931              	.LC2:
 4932 0018 00000000 		.long	0
 4933 001c 00001440 		.long	1075052544
 4934              		.align 8
 4935              	.LC3:
 4936 0020 00000000 		.long	0
 4937 0024 00000840 		.long	1074266112
 4938              		.align 8
 4939              	.LC4:
 4940 0028 00000000 		.long	0
 4941 002c 00002640 		.long	1076232192
 4942              		.align 8
 4943              	.LC5:
 4944 0030 00000000 		.long	0
 4945 0034 00001C40 		.long	1075576832
 4946              		.text
 4947              	.Letext0:
 4948              		.file 16 "/usr/include/c++/9/cwchar"
 4949              		.file 17 "/usr/include/c++/9/bits/exception_ptr.h"
 4950              		.file 18 "/usr/include/c++/9/type_traits"
 4951              		.file 19 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h"
 4952              		.file 20 "/usr/include/c++/9/bits/cpp_type_traits.h"
 4953              		.file 21 "/usr/include/c++/9/bits/stl_pair.h"
 4954              		.file 22 "/usr/include/c++/9/debug/debug.h"
 4955              		.file 23 "/usr/include/c++/9/bits/char_traits.h"
 4956              		.file 24 "/usr/include/c++/9/cstdint"
 4957              		.file 25 "/usr/include/c++/9/clocale"
 4958              		.file 26 "/usr/include/c++/9/cstdlib"
 4959              		.file 27 "/usr/include/c++/9/cstdio"
 4960              		.file 28 "/usr/include/c++/9/bits/basic_string.h"
 4961              		.file 29 "/usr/include/c++/9/system_error"
 4962              		.file 30 "/usr/include/c++/9/bits/ios_base.h"
 4963              		.file 31 "/usr/include/c++/9/cwctype"
 4964              		.file 32 "/usr/include/c++/9/iosfwd"
 4965              		.file 33 "/usr/include/c++/9/bits/uses_allocator.h"
 4966              		.file 34 "/usr/include/c++/9/bits/stl_iterator_base_types.h"
 4967              		.file 35 "/usr/include/c++/9/tuple"
 4968              		.file 36 "/usr/include/c++/9/bits/predefined_ops.h"
 4969              		.file 37 "/usr/include/c++/9/ext/numeric_traits.h"
 4970              		.file 38 "/usr/include/c++/9/bits/atomic_base.h"
 4971              		.file 39 "/usr/include/c++/9/ext/concurrence.h"
 4972              		.file 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 4973              		.file 41 "<built-in>"
 4974              		.file 42 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 4975              		.file 43 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 4976              		.file 44 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 4977              		.file 45 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 4978              		.file 46 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 4979              		.file 47 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 4980              		.file 48 "/usr/include/wchar.h"
 4981              		.file 49 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 4982              		.file 50 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4983              		.file 51 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 4984              		.file 52 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 4985              		.file 53 "/usr/include/stdint.h"
 4986              		.file 54 "/usr/include/locale.h"
 4987              		.file 55 "/usr/include/time.h"
 4988              		.file 56 "/usr/include/pthread.h"
 4989              		.file 57 "/usr/include/x86_64-linux-gnu/c++/9/bits/atomic_word.h"
 4990              		.file 58 "/usr/include/stdlib.h"
 4991              		.file 59 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h"
 4992              		.file 60 "/usr/include/stdio.h"
 4993              		.file 61 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 4994              		.file 62 "/usr/include/errno.h"
 4995              		.file 63 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 4996              		.file 64 "/usr/include/wctype.h"
 23945              		.align 8
 23948              	DW.ref.__gxx_personality_v0:
 23949 0000 00000000 		.quad	__gxx_personality_v0
 23949      00000000 
 23950              		.hidden	__dso_handle
 23951              		.ident	"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"
 23952              		.section	.note.GNU-stack,"",@progbits
 23953              		.section	.note.gnu.property,"a"
 23954              		.align 8
 23955 0000 04000000 		.long	 1f - 0f
 23956 0004 10000000 		.long	 4f - 1f
 23957 0008 05000000 		.long	 5
 23958              	0:
 23959 000c 474E5500 		.string	 "GNU"
 23960              	1:
 23961              		.align 8
 23962 0010 020000C0 		.long	 0xc0000002
 23963 0014 04000000 		.long	 3f - 2f
 23964              	2:
 23965 0018 03000000 		.long	 0x3
 23966              	3:
 23967 001c 00000000 		.align 8
 23968              	4:
